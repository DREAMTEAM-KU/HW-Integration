
TGR2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  0800ab50  0800ab50  0001ab50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b1c8  0800b1c8  0001b1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b1d0  0800b1d0  0001b1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b1d4  0800b1d4  0001b1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006e0  20000000  0800b1d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000098c  200006e0  0800b8b8  000206e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000106c  0800b8b8  0002106c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000206e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000385dd  00000000  00000000  00020710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000064e6  00000000  00000000  00058ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001df71  00000000  00000000  0005f1d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001f38  00000000  00000000  0007d148  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000024f8  00000000  00000000  0007f080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00010b22  00000000  00000000  00081578  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000c4f0  00000000  00000000  0009209a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0009e58a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006de8  00000000  00000000  0009e608  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         0000009c  00000000  00000000  000a53f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  000a548c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006e0 	.word	0x200006e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab34 	.word	0x0800ab34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006e4 	.word	0x200006e4
 80001cc:	0800ab34 	.word	0x0800ab34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2uiz>:
 8000ba0:	004a      	lsls	r2, r1, #1
 8000ba2:	d211      	bcs.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d211      	bcs.n	8000bce <__aeabi_d2uiz+0x2e>
 8000baa:	d50d      	bpl.n	8000bc8 <__aeabi_d2uiz+0x28>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d40e      	bmi.n	8000bd4 <__aeabi_d2uiz+0x34>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d102      	bne.n	8000bda <__aeabi_d2uiz+0x3a>
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	4770      	bx	lr
 8000bda:	f04f 0000 	mov.w	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295
 8000c94:	f000 b97a 	b.w	8000f8c <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f806 	bl	8000cb0 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	9e08      	ldr	r6, [sp, #32]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d151      	bne.n	8000d64 <__udivmoddi4+0xb4>
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	d96d      	bls.n	8000da2 <__udivmoddi4+0xf2>
 8000cc6:	fab2 fe82 	clz	lr, r2
 8000cca:	f1be 0f00 	cmp.w	lr, #0
 8000cce:	d00b      	beq.n	8000ce8 <__udivmoddi4+0x38>
 8000cd0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cd4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cd8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cdc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ce0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ce4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cec:	0c25      	lsrs	r5, r4, #16
 8000cee:	fbbc f8fa 	udiv	r8, ip, sl
 8000cf2:	fa1f f987 	uxth.w	r9, r7
 8000cf6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cfa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cfe:	fb08 f309 	mul.w	r3, r8, r9
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x6c>
 8000d06:	19ed      	adds	r5, r5, r7
 8000d08:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d0c:	f080 8123 	bcs.w	8000f56 <__udivmoddi4+0x2a6>
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	f240 8120 	bls.w	8000f56 <__udivmoddi4+0x2a6>
 8000d16:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1a:	443d      	add	r5, r7
 8000d1c:	1aed      	subs	r5, r5, r3
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d24:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb00 f909 	mul.w	r9, r0, r9
 8000d30:	45a1      	cmp	r9, r4
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x98>
 8000d34:	19e4      	adds	r4, r4, r7
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	f080 810a 	bcs.w	8000f52 <__udivmoddi4+0x2a2>
 8000d3e:	45a1      	cmp	r9, r4
 8000d40:	f240 8107 	bls.w	8000f52 <__udivmoddi4+0x2a2>
 8000d44:	3802      	subs	r0, #2
 8000d46:	443c      	add	r4, r7
 8000d48:	eba4 0409 	sub.w	r4, r4, r9
 8000d4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d50:	2100      	movs	r1, #0
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d061      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d56:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	6034      	str	r4, [r6, #0]
 8000d5e:	6073      	str	r3, [r6, #4]
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0xc8>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d054      	beq.n	8000e16 <__udivmoddi4+0x166>
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d72:	4608      	mov	r0, r1
 8000d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d78:	fab3 f183 	clz	r1, r3
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	f040 808e 	bne.w	8000e9e <__udivmoddi4+0x1ee>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xdc>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80fa 	bhi.w	8000f80 <__udivmoddi4+0x2d0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	46ac      	mov	ip, r5
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d03f      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d9a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	b912      	cbnz	r2, 8000daa <__udivmoddi4+0xfa>
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000daa:	fab7 fe87 	clz	lr, r7
 8000dae:	f1be 0f00 	cmp.w	lr, #0
 8000db2:	d134      	bne.n	8000e1e <__udivmoddi4+0x16e>
 8000db4:	1beb      	subs	r3, r5, r7
 8000db6:	0c3a      	lsrs	r2, r7, #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dc2:	0c25      	lsrs	r5, r4, #16
 8000dc4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dc8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dcc:	fb0c f308 	mul.w	r3, ip, r8
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x134>
 8000dd4:	19ed      	adds	r5, r5, r7
 8000dd6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x132>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	f200 80d1 	bhi.w	8000f84 <__udivmoddi4+0x2d4>
 8000de2:	4680      	mov	r8, r0
 8000de4:	1aed      	subs	r5, r5, r3
 8000de6:	b2a3      	uxth	r3, r4
 8000de8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dec:	fb02 5510 	mls	r5, r2, r0, r5
 8000df0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000df4:	fb0c fc00 	mul.w	ip, ip, r0
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x15c>
 8000dfc:	19e4      	adds	r4, r4, r7
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x15a>
 8000e04:	45a4      	cmp	ip, r4
 8000e06:	f200 80b8 	bhi.w	8000f7a <__udivmoddi4+0x2ca>
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	eba4 040c 	sub.w	r4, r4, ip
 8000e10:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e14:	e79d      	b.n	8000d52 <__udivmoddi4+0xa2>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	f1ce 0420 	rsb	r4, lr, #32
 8000e22:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e26:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e2a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e2e:	0c3a      	lsrs	r2, r7, #16
 8000e30:	fa25 f404 	lsr.w	r4, r5, r4
 8000e34:	ea48 0803 	orr.w	r8, r8, r3
 8000e38:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e3c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e40:	fb02 4411 	mls	r4, r2, r1, r4
 8000e44:	fa1f fc87 	uxth.w	ip, r7
 8000e48:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e4c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e50:	42ab      	cmp	r3, r5
 8000e52:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e56:	d909      	bls.n	8000e6c <__udivmoddi4+0x1bc>
 8000e58:	19ed      	adds	r5, r5, r7
 8000e5a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e5e:	f080 808a 	bcs.w	8000f76 <__udivmoddi4+0x2c6>
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	f240 8087 	bls.w	8000f76 <__udivmoddi4+0x2c6>
 8000e68:	3902      	subs	r1, #2
 8000e6a:	443d      	add	r5, r7
 8000e6c:	1aeb      	subs	r3, r5, r3
 8000e6e:	fa1f f588 	uxth.w	r5, r8
 8000e72:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e76:	fb02 3310 	mls	r3, r2, r0, r3
 8000e7a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e7e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x1e6>
 8000e86:	19ed      	adds	r5, r5, r7
 8000e88:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8c:	d26f      	bcs.n	8000f6e <__udivmoddi4+0x2be>
 8000e8e:	42ab      	cmp	r3, r5
 8000e90:	d96d      	bls.n	8000f6e <__udivmoddi4+0x2be>
 8000e92:	3802      	subs	r0, #2
 8000e94:	443d      	add	r5, r7
 8000e96:	1aeb      	subs	r3, r5, r3
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	e78f      	b.n	8000dbe <__udivmoddi4+0x10e>
 8000e9e:	f1c1 0720 	rsb	r7, r1, #32
 8000ea2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ea6:	408b      	lsls	r3, r1
 8000ea8:	fa05 f401 	lsl.w	r4, r5, r1
 8000eac:	ea48 0303 	orr.w	r3, r8, r3
 8000eb0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000eb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ebe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ec2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ec6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eca:	fa1f f883 	uxth.w	r8, r3
 8000ece:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ed2:	fb09 f408 	mul.w	r4, r9, r8
 8000ed6:	42ac      	cmp	r4, r5
 8000ed8:	fa02 f201 	lsl.w	r2, r2, r1
 8000edc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x244>
 8000ee2:	18ed      	adds	r5, r5, r3
 8000ee4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee8:	d243      	bcs.n	8000f72 <__udivmoddi4+0x2c2>
 8000eea:	42ac      	cmp	r4, r5
 8000eec:	d941      	bls.n	8000f72 <__udivmoddi4+0x2c2>
 8000eee:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef2:	441d      	add	r5, r3
 8000ef4:	1b2d      	subs	r5, r5, r4
 8000ef6:	fa1f fe8e 	uxth.w	lr, lr
 8000efa:	fbb5 f0fc 	udiv	r0, r5, ip
 8000efe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f02:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f06:	fb00 f808 	mul.w	r8, r0, r8
 8000f0a:	45a0      	cmp	r8, r4
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x26e>
 8000f0e:	18e4      	adds	r4, r4, r3
 8000f10:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f14:	d229      	bcs.n	8000f6a <__udivmoddi4+0x2ba>
 8000f16:	45a0      	cmp	r8, r4
 8000f18:	d927      	bls.n	8000f6a <__udivmoddi4+0x2ba>
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	441c      	add	r4, r3
 8000f1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f22:	eba4 0408 	sub.w	r4, r4, r8
 8000f26:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2a:	454c      	cmp	r4, r9
 8000f2c:	46c6      	mov	lr, r8
 8000f2e:	464d      	mov	r5, r9
 8000f30:	d315      	bcc.n	8000f5e <__udivmoddi4+0x2ae>
 8000f32:	d012      	beq.n	8000f5a <__udivmoddi4+0x2aa>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x29c>
 8000f36:	ebba 030e 	subs.w	r3, sl, lr
 8000f3a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40cb      	lsrs	r3, r1
 8000f44:	431f      	orrs	r7, r3
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	6037      	str	r7, [r6, #0]
 8000f4a:	6074      	str	r4, [r6, #4]
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	4618      	mov	r0, r3
 8000f54:	e6f8      	b.n	8000d48 <__udivmoddi4+0x98>
 8000f56:	4690      	mov	r8, r2
 8000f58:	e6e0      	b.n	8000d1c <__udivmoddi4+0x6c>
 8000f5a:	45c2      	cmp	sl, r8
 8000f5c:	d2ea      	bcs.n	8000f34 <__udivmoddi4+0x284>
 8000f5e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f62:	eb69 0503 	sbc.w	r5, r9, r3
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7e4      	b.n	8000f34 <__udivmoddi4+0x284>
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	e7d7      	b.n	8000f1e <__udivmoddi4+0x26e>
 8000f6e:	4640      	mov	r0, r8
 8000f70:	e791      	b.n	8000e96 <__udivmoddi4+0x1e6>
 8000f72:	4681      	mov	r9, r0
 8000f74:	e7be      	b.n	8000ef4 <__udivmoddi4+0x244>
 8000f76:	4601      	mov	r1, r0
 8000f78:	e778      	b.n	8000e6c <__udivmoddi4+0x1bc>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	443c      	add	r4, r7
 8000f7e:	e745      	b.n	8000e0c <__udivmoddi4+0x15c>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xe6>
 8000f84:	f1a8 0802 	sub.w	r8, r8, #2
 8000f88:	443d      	add	r5, r7
 8000f8a:	e72b      	b.n	8000de4 <__udivmoddi4+0x134>

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <I2Cx_Init.constprop.8>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8000f90:	b5f0      	push	{r4, r5, r6, r7, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
  i2c_handler->Init.OwnAddress1      = 0;
 8000f92:	482a      	ldr	r0, [pc, #168]	; (800103c <I2Cx_Init.constprop.8+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000f94:	4c2a      	ldr	r4, [pc, #168]	; (8001040 <I2Cx_Init.constprop.8+0xb0>)
  i2c_handler->Init.OwnAddress1      = 0;
 8000f96:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <I2Cx_Init.constprop.8+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000f98:	4d2b      	ldr	r5, [pc, #172]	; (8001048 <I2Cx_Init.constprop.8+0xb8>)
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f9a:	4f2c      	ldr	r7, [pc, #176]	; (800104c <I2Cx_Init.constprop.8+0xbc>)
  i2c_handler->Init.OwnAddress1      = 0;
 8000f9c:	2600      	movs	r6, #0
 8000f9e:	e884 0049 	stmia.w	r4, {r0, r3, r6}
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	60e2      	str	r2, [r4, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000fa6:	6126      	str	r6, [r4, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000fa8:	6166      	str	r6, [r4, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000faa:	61e6      	str	r6, [r4, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000fac:	6226      	str	r6, [r4, #32]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000fae:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	64eb      	str	r3, [r5, #76]	; 0x4c
 8000fb6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8000fb8:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000fc2:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000fc4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fc8:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000fca:	2312      	movs	r3, #18
 8000fcc:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000fd2:	a903      	add	r1, sp, #12
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000fd4:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000fd6:	4638      	mov	r0, r7
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000fd8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000fda:	f000 fdbb 	bl	8001b54 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000fde:	a903      	add	r1, sp, #12
 8000fe0:	4638      	mov	r0, r7
 8000fe2:	f000 fdb7 	bl	8001b54 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000fe6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000fe8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fec:	65ab      	str	r3, [r5, #88]	; 0x58
 8000fee:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8000ff8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000ffa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ffe:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001000:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001002:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001006:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001008:	4632      	mov	r2, r6
 800100a:	210f      	movs	r1, #15
 800100c:	2021      	movs	r0, #33	; 0x21
 800100e:	f000 fc85 	bl	800191c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001012:	2021      	movs	r0, #33	; 0x21
 8001014:	f000 fcb6 	bl	8001984 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001018:	4632      	mov	r2, r6
 800101a:	210f      	movs	r1, #15
 800101c:	2022      	movs	r0, #34	; 0x22
 800101e:	f000 fc7d 	bl	800191c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001022:	2022      	movs	r0, #34	; 0x22
 8001024:	f000 fcae 	bl	8001984 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8001028:	4620      	mov	r0, r4
 800102a:	f001 f89f 	bl	800216c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800102e:	4631      	mov	r1, r6
 8001030:	4620      	mov	r0, r4
 8001032:	f001 fba5 	bl	8002780 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001036:	b009      	add	sp, #36	; 0x24
 8001038:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800103a:	bf00      	nop
 800103c:	40005800 	.word	0x40005800
 8001040:	200007dc 	.word	0x200007dc
 8001044:	00702681 	.word	0x00702681
 8001048:	40021000 	.word	0x40021000
 800104c:	48000400 	.word	0x48000400

08001050 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <BSP_LED_Toggle+0x10>)
 8001052:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001056:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800105a:	f000 bef6 	b.w	8001e4a <HAL_GPIO_TogglePin>
 800105e:	bf00      	nop
 8001060:	20000000 	.word	0x20000000

08001064 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8001064:	f7ff bf94 	b.w	8000f90 <I2Cx_Init.constprop.8>

08001068 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001068:	b510      	push	{r4, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8001072:	f804 2d01 	strb.w	r2, [r4, #-1]!
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001076:	9302      	str	r3, [sp, #8]
 8001078:	2301      	movs	r3, #1
 800107a:	460a      	mov	r2, r1
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	4601      	mov	r1, r0
 8001080:	9400      	str	r4, [sp, #0]
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <SENSOR_IO_Write+0x30>)
 8001084:	f001 fa06 	bl	8002494 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8001088:	b120      	cbz	r0, 8001094 <SENSOR_IO_Write+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <SENSOR_IO_Write+0x30>)
 800108c:	f001 f8bf 	bl	800220e <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8001090:	f7ff ff7e 	bl	8000f90 <I2Cx_Init.constprop.8>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 8001094:	b006      	add	sp, #24
 8001096:	bd10      	pop	{r4, pc}
 8001098:	200007dc 	.word	0x200007dc

0800109c <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800109c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 800109e:	aa06      	add	r2, sp, #24
 80010a0:	2300      	movs	r3, #0
 80010a2:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	9302      	str	r3, [sp, #8]
 80010ac:	2301      	movs	r3, #1
 80010ae:	e88d 000c 	stmia.w	sp, {r2, r3}
 80010b2:	460a      	mov	r2, r1
 80010b4:	4601      	mov	r1, r0
 80010b6:	4807      	ldr	r0, [pc, #28]	; (80010d4 <SENSOR_IO_Read+0x38>)
 80010b8:	f001 faa4 	bl	8002604 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80010bc:	b120      	cbz	r0, 80010c8 <SENSOR_IO_Read+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <SENSOR_IO_Read+0x38>)
 80010c0:	f001 f8a5 	bl	800220e <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80010c4:	f7ff ff64 	bl	8000f90 <I2Cx_Init.constprop.8>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 80010c8:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80010cc:	b007      	add	sp, #28
 80010ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80010d2:	bf00      	nop
 80010d4:	200007dc 	.word	0x200007dc

080010d8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80010d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80010da:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80010de:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 80010e2:	460a      	mov	r2, r1
 80010e4:	2301      	movs	r3, #1
 80010e6:	4601      	mov	r1, r0
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <SENSOR_IO_ReadMultiple+0x2c>)
 80010ea:	f001 fa8b 	bl	8002604 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80010ee:	4604      	mov	r4, r0
 80010f0:	b120      	cbz	r0, 80010fc <SENSOR_IO_ReadMultiple+0x24>
  HAL_I2C_DeInit(i2c_handler);
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <SENSOR_IO_ReadMultiple+0x2c>)
 80010f4:	f001 f88b 	bl	800220e <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80010f8:	f7ff ff4a 	bl	8000f90 <I2Cx_Init.constprop.8>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 80010fc:	4620      	mov	r0, r4
 80010fe:	b004      	add	sp, #16
 8001100:	bd10      	pop	{r4, pc}
 8001102:	bf00      	nop
 8001104:	200007dc 	.word	0x200007dc

08001108 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001108:	b510      	push	{r4, lr}
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800110a:	4c07      	ldr	r4, [pc, #28]	; (8001128 <BSP_ACCELERO_Init+0x20>)
 800110c:	68a3      	ldr	r3, [r4, #8]
 800110e:	4798      	blx	r3
 8001110:	286a      	cmp	r0, #106	; 0x6a
 8001112:	d107      	bne.n	8001124 <BSP_ACCELERO_Init+0x1c>
    ret = ACCELERO_ERROR;
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <BSP_ACCELERO_Init+0x24>)
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001116:	f244 4030 	movw	r0, #17456	; 0x4430
    AccelerometerDrv = &Lsm6dslAccDrv;
 800111a:	601c      	str	r4, [r3, #0]
    AccelerometerDrv->Init(ctrl);
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	4798      	blx	r3
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001120:	2000      	movs	r0, #0
 8001122:	bd10      	pop	{r4, pc}
    ret = ACCELERO_ERROR;
 8001124:	2001      	movs	r0, #1
  }  

  return ret;
}
 8001126:	bd10      	pop	{r4, pc}
 8001128:	20000060 	.word	0x20000060
 800112c:	200006fc 	.word	0x200006fc

08001130 <BSP_ACCELERO_AccGetXYZ>:
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv != NULL)
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <BSP_ACCELERO_AccGetXYZ+0x10>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	b113      	cbz	r3, 800113c <BSP_ACCELERO_AccGetXYZ+0xc>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	b103      	cbz	r3, 800113c <BSP_ACCELERO_AccGetXYZ+0xc>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800113a:	4718      	bx	r3
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200006fc 	.word	0x200006fc

08001144 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001144:	b510      	push	{r4, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001146:	4c07      	ldr	r4, [pc, #28]	; (8001164 <BSP_GYRO_Init+0x20>)
 8001148:	68a3      	ldr	r3, [r4, #8]
 800114a:	4798      	blx	r3
 800114c:	286a      	cmp	r0, #106	; 0x6a
 800114e:	d107      	bne.n	8001160 <BSP_GYRO_Init+0x1c>
    ret = GYRO_ERROR;
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <BSP_GYRO_Init+0x24>)

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8001152:	f244 403c 	movw	r0, #17468	; 0x443c
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001156:	601c      	str	r4, [r3, #0]
    GyroscopeDrv->Init(ctrl);
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	4798      	blx	r3
    
    ret = GYRO_OK;
 800115c:	2000      	movs	r0, #0
 800115e:	bd10      	pop	{r4, pc}
    ret = GYRO_ERROR;
 8001160:	2001      	movs	r0, #1
  }
  
  return ret;
}
 8001162:	bd10      	pop	{r4, pc}
 8001164:	20000094 	.word	0x20000094
 8001168:	20000700 	.word	0x20000700

0800116c <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv != NULL)
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <BSP_GYRO_GetXYZ+0x10>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	b113      	cbz	r3, 8001178 <BSP_GYRO_GetXYZ+0xc>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	b103      	cbz	r3, 8001178 <BSP_GYRO_GetXYZ+0xc>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8001176:	4718      	bx	r3
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000700 	.word	0x20000700

08001180 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001180:	b510      	push	{r4, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001182:	4c07      	ldr	r4, [pc, #28]	; (80011a0 <BSP_HSENSOR_Init+0x20>)
 8001184:	20be      	movs	r0, #190	; 0xbe
 8001186:	6863      	ldr	r3, [r4, #4]
 8001188:	4798      	blx	r3
 800118a:	28bc      	cmp	r0, #188	; 0xbc
 800118c:	d106      	bne.n	800119c <BSP_HSENSOR_Init+0x1c>
  {
    ret = HSENSOR_ERROR;
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800118e:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <BSP_HSENSOR_Init+0x24>)
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001190:	20be      	movs	r0, #190	; 0xbe
    Hsensor_drv = &HTS221_H_Drv;
 8001192:	601c      	str	r4, [r3, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001198:	2000      	movs	r0, #0
 800119a:	bd10      	pop	{r4, pc}
    ret = HSENSOR_ERROR;
 800119c:	2001      	movs	r0, #1
  }
  
  return ret;
}
 800119e:	bd10      	pop	{r4, pc}
 80011a0:	20000004 	.word	0x20000004
 80011a4:	20000704 	.word	0x20000704

080011a8 <BSP_HSENSOR_ReadHumidity>:
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80011a8:	4b02      	ldr	r3, [pc, #8]	; (80011b4 <BSP_HSENSOR_ReadHumidity+0xc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	20be      	movs	r0, #190	; 0xbe
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4718      	bx	r3
 80011b2:	bf00      	nop
 80011b4:	20000704 	.word	0x20000704

080011b8 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80011b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80011ba:	4d0f      	ldr	r5, [pc, #60]	; (80011f8 <BSP_MAGNETO_Init+0x40>)
 80011bc:	68ab      	ldr	r3, [r5, #8]
 80011be:	4798      	blx	r3
 80011c0:	283d      	cmp	r0, #61	; 0x3d
 80011c2:	d117      	bne.n	80011f4 <BSP_MAGNETO_Init+0x3c>
    ret = MAGNETO_ERROR;
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <BSP_MAGNETO_Init+0x44>)
 80011c6:	601d      	str	r5, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80011c8:	2358      	movs	r3, #88	; 0x58
 80011ca:	f88d 3000 	strb.w	r3, [sp]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80011ce:	2308      	movs	r3, #8
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80011d0:	2400      	movs	r4, #0
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80011d2:	f88d 3003 	strb.w	r3, [sp, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80011d6:	2340      	movs	r3, #64	; 0x40
 80011d8:	f88d 3004 	strb.w	r3, [sp, #4]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80011dc:	f88d 4001 	strb.w	r4, [sp, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80011e0:	f88d 4002 	strb.w	r4, [sp, #2]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80011e4:	aa02      	add	r2, sp, #8
 80011e6:	e912 0003 	ldmdb	r2, {r0, r1}
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	4798      	blx	r3
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80011ee:	4620      	mov	r0, r4
  } 

  return ret;  
}
 80011f0:	b003      	add	sp, #12
 80011f2:	bd30      	pop	{r4, r5, pc}
    ret = MAGNETO_ERROR;
 80011f4:	2001      	movs	r0, #1
 80011f6:	e7fb      	b.n	80011f0 <BSP_MAGNETO_Init+0x38>
 80011f8:	20000020 	.word	0x20000020
 80011fc:	20000708 	.word	0x20000708

08001200 <BSP_MAGNETO_GetXYZ>:
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
  if(MagnetoDrv != NULL)
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <BSP_MAGNETO_GetXYZ+0x10>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	b113      	cbz	r3, 800120c <BSP_MAGNETO_GetXYZ+0xc>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	b103      	cbz	r3, 800120c <BSP_MAGNETO_GetXYZ+0xc>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800120a:	4718      	bx	r3
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000708 	.word	0x20000708

08001214 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001214:	b510      	push	{r4, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001216:	4c07      	ldr	r4, [pc, #28]	; (8001234 <BSP_PSENSOR_Init+0x20>)
 8001218:	20ba      	movs	r0, #186	; 0xba
 800121a:	6863      	ldr	r3, [r4, #4]
 800121c:	4798      	blx	r3
 800121e:	28b1      	cmp	r0, #177	; 0xb1
 8001220:	d106      	bne.n	8001230 <BSP_PSENSOR_Init+0x1c>
  {
    ret = PSENSOR_ERROR;
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <BSP_PSENSOR_Init+0x24>)
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001224:	20ba      	movs	r0, #186	; 0xba
     Psensor_drv = &LPS22HB_P_Drv;
 8001226:	601c      	str	r4, [r3, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	4798      	blx	r3
    ret = PSENSOR_OK;
 800122c:	2000      	movs	r0, #0
 800122e:	bd10      	pop	{r4, pc}
    ret = PSENSOR_ERROR;
 8001230:	2001      	movs	r0, #1
  }
  
  return ret;
}
 8001232:	bd10      	pop	{r4, pc}
 8001234:	20000054 	.word	0x20000054
 8001238:	2000070c 	.word	0x2000070c

0800123c <BSP_PSENSOR_ReadPressure>:
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 800123c:	4b02      	ldr	r3, [pc, #8]	; (8001248 <BSP_PSENSOR_ReadPressure+0xc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	20ba      	movs	r0, #186	; 0xba
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	4718      	bx	r3
 8001246:	bf00      	nop
 8001248:	2000070c 	.word	0x2000070c

0800124c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800124c:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800124e:	4c06      	ldr	r4, [pc, #24]	; (8001268 <BSP_TSENSOR_Init+0x1c>)
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <BSP_TSENSOR_Init+0x20>)
 8001252:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001254:	f7ff ff06 	bl	8001064 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	2100      	movs	r1, #0
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	20be      	movs	r0, #190	; 0xbe
 8001260:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 8001262:	2000      	movs	r0, #0
 8001264:	bd10      	pop	{r4, pc}
 8001266:	bf00      	nop
 8001268:	20000710 	.word	0x20000710
 800126c:	20000010 	.word	0x20000010

08001270 <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001270:	4b02      	ldr	r3, [pc, #8]	; (800127c <BSP_TSENSOR_ReadTemp+0xc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	20be      	movs	r0, #190	; 0xbe
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	4718      	bx	r3
 800127a:	bf00      	nop
 800127c:	20000710 	.word	0x20000710

08001280 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001280:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001282:	b2c4      	uxtb	r4, r0
 8001284:	2120      	movs	r1, #32
 8001286:	4620      	mov	r0, r4
 8001288:	f7ff ff08 	bl	800109c <SENSOR_IO_Read>
 800128c:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001290:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 8001294:	4620      	mov	r0, r4
 8001296:	2120      	movs	r1, #32
}
 8001298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800129c:	f7ff bee4 	b.w	8001068 <SENSOR_IO_Write>

080012a0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80012a0:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80012a2:	b2c4      	uxtb	r4, r0
 80012a4:	2120      	movs	r1, #32
 80012a6:	4620      	mov	r0, r4
 80012a8:	f7ff fef8 	bl	800109c <SENSOR_IO_Read>
 80012ac:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80012b0:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 80012b4:	4620      	mov	r0, r4
 80012b6:	2120      	movs	r1, #32
}
 80012b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80012bc:	f7ff bed4 	b.w	8001068 <SENSOR_IO_Write>

080012c0 <HTS221_H_ReadID>:
{  
 80012c0:	b510      	push	{r4, lr}
 80012c2:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 80012c4:	f7ff fece 	bl	8001064 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80012c8:	b2e0      	uxtb	r0, r4
 80012ca:	210f      	movs	r1, #15
}
 80012cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80012d0:	f7ff bee4 	b.w	800109c <SENSOR_IO_Read>

080012d4 <HTS221_H_ReadHumidity>:
{
 80012d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80012d8:	fa5f f880 	uxtb.w	r8, r0
 80012dc:	2302      	movs	r3, #2
 80012de:	aa01      	add	r2, sp, #4
 80012e0:	21b0      	movs	r1, #176	; 0xb0
 80012e2:	4640      	mov	r0, r8
 80012e4:	f7ff fef8 	bl	80010d8 <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80012e8:	2302      	movs	r3, #2
 80012ea:	aa01      	add	r2, sp, #4
 80012ec:	21b6      	movs	r1, #182	; 0xb6
 80012ee:	4640      	mov	r0, r8
  H0_rh = buffer[0] >> 1;
 80012f0:	f89d 6004 	ldrb.w	r6, [sp, #4]
  H1_rh = buffer[1] >> 1;
 80012f4:	f89d 5005 	ldrb.w	r5, [sp, #5]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80012f8:	f7ff feee 	bl	80010d8 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80012fc:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8001300:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001304:	2302      	movs	r3, #2
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001306:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800130a:	aa01      	add	r2, sp, #4
 800130c:	21ba      	movs	r1, #186	; 0xba
 800130e:	4640      	mov	r0, r8
 8001310:	f7ff fee2 	bl	80010d8 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001314:	b227      	sxth	r7, r4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001316:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800131a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800131e:	aa01      	add	r2, sp, #4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001320:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001324:	21a8      	movs	r1, #168	; 0xa8
 8001326:	2302      	movs	r3, #2
 8001328:	4640      	mov	r0, r8
 800132a:	f7ff fed5 	bl	80010d8 <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800132e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001332:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001336:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800133a:	b21b      	sxth	r3, r3
 800133c:	1bdb      	subs	r3, r3, r7
 800133e:	ee07 3a90 	vmov	s15, r3
  H0_rh = buffer[0] >> 1;
 8001342:	0876      	lsrs	r6, r6, #1
  H1_rh = buffer[1] >> 1;
 8001344:	086d      	lsrs	r5, r5, #1
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001346:	1bab      	subs	r3, r5, r6
 8001348:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134c:	ee07 3a90 	vmov	s15, r3
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001350:	b224      	sxth	r4, r4
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001356:	1be4      	subs	r4, r4, r7
 8001358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135c:	ee07 4a10 	vmov	s14, r4
 8001360:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001364:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8001368:	ee07 6a90 	vmov	s15, r6
 800136c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        : ( tmp_f <    0.0f ) ?    0.0f
 8001370:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80013ac <HTS221_H_ReadHumidity+0xd8>
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001374:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 8001378:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800137c:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 8001380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001388:	dc0d      	bgt.n	80013a6 <HTS221_H_ReadHumidity+0xd2>
        : tmp_f;
 800138a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800138e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013b0 <HTS221_H_ReadHumidity+0xdc>
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	bf48      	it	mi
 8001398:	eef0 7a47 	vmovmi.f32	s15, s14
}
 800139c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80013a0:	b002      	add	sp, #8
 80013a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        : ( tmp_f <    0.0f ) ?    0.0f
 80013a6:	eef0 7a47 	vmov.f32	s15, s14
 80013aa:	e7f7      	b.n	800139c <HTS221_H_ReadHumidity+0xc8>
 80013ac:	447a0000 	.word	0x447a0000
 80013b0:	00000000 	.word	0x00000000

080013b4 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80013b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80013b8:	fa5f f880 	uxtb.w	r8, r0
 80013bc:	aa01      	add	r2, sp, #4
 80013be:	2302      	movs	r3, #2
 80013c0:	21b2      	movs	r1, #178	; 0xb2
 80013c2:	4640      	mov	r0, r8
 80013c4:	f7ff fe88 	bl	80010d8 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80013c8:	2135      	movs	r1, #53	; 0x35
 80013ca:	4640      	mov	r0, r8
 80013cc:	f7ff fe66 	bl	800109c <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80013d0:	0206      	lsls	r6, r0, #8
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80013d2:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80013d6:	f406 7340 	and.w	r3, r6, #768	; 0x300
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80013da:	0180      	lsls	r0, r0, #6
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80013dc:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80013e0:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T0_degC = T0_degC_x8_u16 >> 3;
 80013e4:	431e      	orrs	r6, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 80013e6:	4328      	orrs	r0, r5

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80013e8:	2304      	movs	r3, #4
 80013ea:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 80013ee:	08c5      	lsrs	r5, r0, #3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80013f0:	21bc      	movs	r1, #188	; 0xbc
 80013f2:	4640      	mov	r0, r8
 80013f4:	f7ff fe70 	bl	80010d8 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80013f8:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80013fc:	f89d 7004 	ldrb.w	r7, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001400:	f89d 3007 	ldrb.w	r3, [sp, #7]
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001404:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001408:	f89d 4006 	ldrb.w	r4, [sp, #6]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800140c:	aa01      	add	r2, sp, #4
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800140e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001412:	21aa      	movs	r1, #170	; 0xaa
 8001414:	2302      	movs	r3, #2
 8001416:	4640      	mov	r0, r8
 8001418:	f7ff fe5e 	bl	80010d8 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800141c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001420:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001424:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001428:	b23f      	sxth	r7, r7

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800142a:	b21b      	sxth	r3, r3
 800142c:	1bdb      	subs	r3, r3, r7
  T0_degC = T0_degC_x8_u16 >> 3;
 800142e:	08f6      	lsrs	r6, r6, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	1bab      	subs	r3, r5, r6
 8001436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800143a:	ee07 3a90 	vmov	s15, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800143e:	b224      	sxth	r4, r4
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001444:	1be4      	subs	r4, r4, r7
 8001446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144a:	ee07 4a10 	vmov	s14, r4
 800144e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001452:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001456:	ee07 6a90 	vmov	s15, r6
 800145a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 800145e:	ee36 0a80 	vadd.f32	s0, s13, s0
 8001462:	b002      	add	sp, #8
 8001464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001468 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001468:	b507      	push	{r0, r1, r2, lr}
 800146a:	ab02      	add	r3, sp, #8
 800146c:	e903 0003 	stmdb	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001470:	2120      	movs	r1, #32
 8001472:	f89d 2000 	ldrb.w	r2, [sp]
 8001476:	203c      	movs	r0, #60	; 0x3c
 8001478:	f7ff fdf6 	bl	8001068 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 800147c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001480:	2121      	movs	r1, #33	; 0x21
 8001482:	203c      	movs	r0, #60	; 0x3c
 8001484:	f7ff fdf0 	bl	8001068 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001488:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800148c:	2122      	movs	r1, #34	; 0x22
 800148e:	203c      	movs	r0, #60	; 0x3c
 8001490:	f7ff fdea 	bl	8001068 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001494:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001498:	2123      	movs	r1, #35	; 0x23
 800149a:	203c      	movs	r0, #60	; 0x3c
 800149c:	f7ff fde4 	bl	8001068 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80014a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80014a4:	2124      	movs	r1, #36	; 0x24
 80014a6:	203c      	movs	r0, #60	; 0x3c
}
 80014a8:	b003      	add	sp, #12
 80014aa:	f85d eb04 	ldr.w	lr, [sp], #4
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80014ae:	f7ff bddb 	b.w	8001068 <SENSOR_IO_Write>

080014b2 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 80014b2:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80014b4:	2122      	movs	r1, #34	; 0x22
 80014b6:	203c      	movs	r0, #60	; 0x3c
 80014b8:	f7ff fdf0 	bl	800109c <SENSOR_IO_Read>

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 80014bc:	f000 02fc 	and.w	r2, r0, #252	; 0xfc

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80014c0:	f042 0203 	orr.w	r2, r2, #3
 80014c4:	2122      	movs	r1, #34	; 0x22
 80014c6:	203c      	movs	r0, #60	; 0x3c
}
 80014c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80014cc:	f7ff bdcc 	b.w	8001068 <SENSOR_IO_Write>

080014d0 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80014d0:	b510      	push	{r4, lr}
  uint8_t ctrl = 0;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80014d2:	2122      	movs	r1, #34	; 0x22
{  
 80014d4:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80014d6:	203c      	movs	r0, #60	; 0x3c
 80014d8:	f7ff fde0 	bl	800109c <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80014dc:	f000 02df 	and.w	r2, r0, #223	; 0xdf

  /* Set Low Power Mode */
  if(status)
 80014e0:	b10c      	cbz	r4, 80014e6 <LIS3MDL_MagLowPower+0x16>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80014e2:	f042 0220 	orr.w	r2, r2, #32
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80014e6:	2122      	movs	r1, #34	; 0x22
 80014e8:	203c      	movs	r0, #60	; 0x3c
}
 80014ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80014ee:	f7ff bdbb 	b.w	8001068 <SENSOR_IO_Write>

080014f2 <LIS3MDL_MagReadID>:
{
 80014f2:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 80014f4:	f7ff fdb6 	bl	8001064 <SENSOR_IO_Init>
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80014f8:	210f      	movs	r1, #15
 80014fa:	203c      	movs	r0, #60	; 0x3c
}
 80014fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001500:	f7ff bdcc 	b.w	800109c <SENSOR_IO_Read>

08001504 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001504:	b530      	push	{r4, r5, lr}
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001506:	2121      	movs	r1, #33	; 0x21
{
 8001508:	b085      	sub	sp, #20
 800150a:	4605      	mov	r5, r0
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800150c:	203c      	movs	r0, #60	; 0x3c
 800150e:	f7ff fdc5 	bl	800109c <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001512:	2306      	movs	r3, #6
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001514:	4604      	mov	r4, r0
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001516:	aa02      	add	r2, sp, #8
 8001518:	21a8      	movs	r1, #168	; 0xa8
 800151a:	203c      	movs	r0, #60	; 0x3c
 800151c:	f7ff fddc 	bl	80010d8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001520:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001524:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001528:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800152c:	f8ad 3000 	strh.w	r3, [sp]
 8001530:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001534:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001538:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800153c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8001540:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001544:	f89d 300c 	ldrb.w	r3, [sp, #12]
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8001548:	f004 0460 	and.w	r4, r4, #96	; 0x60
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800154c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  switch(ctrlm & 0x60)
 8001550:	2c20      	cmp	r4, #32
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001552:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch(ctrlm & 0x60)
 8001556:	d021      	beq.n	800159c <LIS3MDL_MagReadXYZ+0x98>
 8001558:	d803      	bhi.n	8001562 <LIS3MDL_MagReadXYZ+0x5e>
 800155a:	b14c      	cbz	r4, 8001570 <LIS3MDL_MagReadXYZ+0x6c>
  float sensitivity = 0;
 800155c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80015a8 <LIS3MDL_MagReadXYZ+0xa4>
 8001560:	e008      	b.n	8001574 <LIS3MDL_MagReadXYZ+0x70>
  switch(ctrlm & 0x60)
 8001562:	2c40      	cmp	r4, #64	; 0x40
 8001564:	d01d      	beq.n	80015a2 <LIS3MDL_MagReadXYZ+0x9e>
 8001566:	2c60      	cmp	r4, #96	; 0x60
 8001568:	d1f8      	bne.n	800155c <LIS3MDL_MagReadXYZ+0x58>
    break;
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
    break;
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800156a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80015ac <LIS3MDL_MagReadXYZ+0xa8>
    break;    
 800156e:	e001      	b.n	8001574 <LIS3MDL_MagReadXYZ+0x70>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8001570:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80015b0 <LIS3MDL_MagReadXYZ+0xac>
 8001574:	2200      	movs	r2, #0
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001576:	f93d 3012 	ldrsh.w	r3, [sp, r2, lsl #1]
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800158a:	ee17 3a90 	vmov	r3, s15
 800158e:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
 8001592:	3201      	adds	r2, #1
  for(i=0; i<3; i++)
 8001594:	2a03      	cmp	r2, #3
 8001596:	d1ee      	bne.n	8001576 <LIS3MDL_MagReadXYZ+0x72>
  }
}
 8001598:	b005      	add	sp, #20
 800159a:	bd30      	pop	{r4, r5, pc}
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 800159c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80015b4 <LIS3MDL_MagReadXYZ+0xb0>
    break;
 80015a0:	e7e8      	b.n	8001574 <LIS3MDL_MagReadXYZ+0x70>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80015a2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80015b8 <LIS3MDL_MagReadXYZ+0xb4>
    break;
 80015a6:	e7e5      	b.n	8001574 <LIS3MDL_MagReadXYZ+0x70>
 80015a8:	00000000 	.word	0x00000000
 80015ac:	3f147ae1 	.word	0x3f147ae1
 80015b0:	3e0f5c29 	.word	0x3e0f5c29
 80015b4:	3e947ae1 	.word	0x3e947ae1
 80015b8:	3edc28f6 	.word	0x3edc28f6

080015bc <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80015bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80015be:	2400      	movs	r4, #0
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80015c0:	b2c6      	uxtb	r6, r0
 80015c2:	ad01      	add	r5, sp, #4
 80015c4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80015c8:	b2c9      	uxtb	r1, r1
 80015ca:	4630      	mov	r0, r6
 80015cc:	f7ff fd66 	bl	800109c <SENSOR_IO_Read>
 80015d0:	5528      	strb	r0, [r5, r4]
 80015d2:	3401      	adds	r4, #1
  for(i = 0; i < 3; i++)
 80015d4:	2c03      	cmp	r4, #3
 80015d6:	d1f5      	bne.n	80015c4 <LPS22HB_P_ReadPressure+0x8>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80015d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80015dc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80015e0:	041b      	lsls	r3, r3, #16
 80015e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80015ea:	4313      	orrs	r3, r2

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80015ec:	021a      	lsls	r2, r3, #8
    tmp |= 0xFF000000;
 80015ee:	bf48      	it	mi
 80015f0:	f043 437f 	orrmi.w	r3, r3, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 80015f4:	2264      	movs	r2, #100	; 0x64
 80015f6:	4353      	muls	r3, r2
 80015f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015fc:	fb93 f3f2 	sdiv	r3, r3, r2

  return (float)((float)raw_press / 100.0f);
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8001608:	eddf 7a02 	vldr	s15, [pc, #8]	; 8001614 <LPS22HB_P_ReadPressure+0x58>
 800160c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8001610:	b002      	add	sp, #8
 8001612:	bd70      	pop	{r4, r5, r6, pc}
 8001614:	42c80000 	.word	0x42c80000

08001618 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001618:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800161a:	b2c4      	uxtb	r4, r0
 800161c:	211a      	movs	r1, #26
 800161e:	4620      	mov	r0, r4
 8001620:	f7ff fd3c 	bl	800109c <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 8001624:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001628:	f042 0201 	orr.w	r2, r2, #1
 800162c:	4620      	mov	r0, r4
 800162e:	211a      	movs	r1, #26
 8001630:	f7ff fd1a 	bl	8001068 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001634:	2110      	movs	r1, #16
 8001636:	4620      	mov	r0, r4
 8001638:	f7ff fd30 	bl	800109c <SENSOR_IO_Read>
 800163c:	f000 028d 	and.w	r2, r0, #141	; 0x8d
  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001640:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 8001644:	4620      	mov	r0, r4
 8001646:	2110      	movs	r1, #16
}  
 8001648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800164c:	f7ff bd0c 	b.w	8001068 <SENSOR_IO_Write>

08001650 <LPS22HB_P_Init>:
  LPS22HB_Init(DeviceAddr);
 8001650:	f7ff bfe2 	b.w	8001618 <LPS22HB_Init>

08001654 <LPS22HB_P_ReadID>:
{  
 8001654:	b510      	push	{r4, lr}
 8001656:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 8001658:	f7ff fd04 	bl	8001064 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800165c:	b2e0      	uxtb	r0, r4
 800165e:	210f      	movs	r1, #15
}
 8001660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001664:	f7ff bd1a 	b.w	800109c <SENSOR_IO_Read>

08001668 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001668:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800166a:	2110      	movs	r1, #16
{  
 800166c:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800166e:	20d4      	movs	r0, #212	; 0xd4
 8001670:	f7ff fd14 	bl	800109c <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 8001674:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 8001678:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	2110      	movs	r1, #16
 800167e:	20d4      	movs	r0, #212	; 0xd4
 8001680:	f7ff fcf2 	bl	8001068 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001684:	2112      	movs	r1, #18
 8001686:	20d4      	movs	r0, #212	; 0xd4
 8001688:	f7ff fd08 	bl	800109c <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 800168c:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001690:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 8001694:	2112      	movs	r1, #18
 8001696:	20d4      	movs	r0, #212	; 0xd4
}
 8001698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800169c:	f7ff bce4 	b.w	8001068 <SENSOR_IO_Write>

080016a0 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80016a0:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80016a2:	2110      	movs	r1, #16
 80016a4:	20d4      	movs	r0, #212	; 0xd4
 80016a6:	f7ff fcf9 	bl	800109c <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80016aa:	2110      	movs	r1, #16
 80016ac:	f000 020f 	and.w	r2, r0, #15
}
 80016b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80016b4:	20d4      	movs	r0, #212	; 0xd4
 80016b6:	f7ff bcd7 	b.w	8001068 <SENSOR_IO_Write>

080016ba <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80016ba:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80016bc:	2115      	movs	r1, #21
{
 80016be:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80016c0:	20d4      	movs	r0, #212	; 0xd4
 80016c2:	f7ff fceb 	bl	800109c <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80016c6:	f000 02ef 	and.w	r2, r0, #239	; 0xef

  /* Set Low Power Mode */
  if(status)
 80016ca:	b10c      	cbz	r4, 80016d0 <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80016cc:	f042 0210 	orr.w	r2, r2, #16
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80016d0:	2115      	movs	r1, #21
 80016d2:	20d4      	movs	r0, #212	; 0xd4
}
 80016d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80016d8:	f7ff bcc6 	b.w	8001068 <SENSOR_IO_Write>

080016dc <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80016dc:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80016de:	2111      	movs	r1, #17
{  
 80016e0:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80016e2:	20d4      	movs	r0, #212	; 0xd4
 80016e4:	f7ff fcda 	bl	800109c <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 80016e8:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 80016ec:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	2111      	movs	r1, #17
 80016f2:	20d4      	movs	r0, #212	; 0xd4
 80016f4:	f7ff fcb8 	bl	8001068 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80016f8:	2112      	movs	r1, #18
 80016fa:	20d4      	movs	r0, #212	; 0xd4
 80016fc:	f7ff fcce 	bl	800109c <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8001700:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001704:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 8001708:	2112      	movs	r1, #18
 800170a:	20d4      	movs	r0, #212	; 0xd4
}
 800170c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001710:	f7ff bcaa 	b.w	8001068 <SENSOR_IO_Write>

08001714 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001714:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001716:	2111      	movs	r1, #17
 8001718:	20d4      	movs	r0, #212	; 0xd4
 800171a:	f7ff fcbf 	bl	800109c <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800171e:	2111      	movs	r1, #17
 8001720:	f000 020f 	and.w	r2, r0, #15
}
 8001724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001728:	20d4      	movs	r0, #212	; 0xd4
 800172a:	f7ff bc9d 	b.w	8001068 <SENSOR_IO_Write>

0800172e <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800172e:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001730:	2116      	movs	r1, #22
{  
 8001732:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001734:	20d4      	movs	r0, #212	; 0xd4
 8001736:	f7ff fcb1 	bl	800109c <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 800173a:	f000 027f 	and.w	r2, r0, #127	; 0x7f

  /* Set Low Power Mode */
  if(status)
 800173e:	b10c      	cbz	r4, 8001744 <LSM6DSL_GyroLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001740:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001744:	2116      	movs	r1, #22
 8001746:	20d4      	movs	r0, #212	; 0xd4
}
 8001748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800174c:	f7ff bc8c 	b.w	8001068 <SENSOR_IO_Write>

08001750 <LSM6DSL_GyroReadID>:
{
 8001750:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 8001752:	f7ff fc87 	bl	8001064 <SENSOR_IO_Init>
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8001756:	210f      	movs	r1, #15
 8001758:	20d4      	movs	r0, #212	; 0xd4
}
 800175a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 800175e:	f7ff bc9d 	b.w	800109c <SENSOR_IO_Read>

08001762 <LSM6DSL_AccReadID>:
 8001762:	f7ff bff5 	b.w	8001750 <LSM6DSL_GyroReadID>
	...

08001768 <LSM6DSL_AccReadXYZ>:
{
 8001768:	b530      	push	{r4, r5, lr}
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800176a:	2110      	movs	r1, #16
{
 800176c:	b085      	sub	sp, #20
 800176e:	4605      	mov	r5, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001770:	20d4      	movs	r0, #212	; 0xd4
 8001772:	f7ff fc93 	bl	800109c <SENSOR_IO_Read>
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001776:	2306      	movs	r3, #6
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001778:	4604      	mov	r4, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800177a:	aa02      	add	r2, sp, #8
 800177c:	2128      	movs	r1, #40	; 0x28
 800177e:	20d4      	movs	r0, #212	; 0xd4
 8001780:	f7ff fcaa 	bl	80010d8 <SENSOR_IO_ReadMultiple>
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001784:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001788:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800178c:	4817      	ldr	r0, [pc, #92]	; (80017ec <LSM6DSL_AccReadXYZ+0x84>)
 800178e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001792:	f8ad 3000 	strh.w	r3, [sp]
 8001796:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800179a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800179e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80017a2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80017a6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80017aa:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80017ae:	f004 040c 	and.w	r4, r4, #12
 80017b2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80017b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80017ba:	ed90 7a00 	vldr	s14, [r0]
 80017be:	f8ad 3004 	strh.w	r3, [sp, #4]
 80017c2:	2200      	movs	r2, #0
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80017c4:	f93d 3012 	ldrsh.w	r3, [sp, r2, lsl #1]
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d8:	ee17 3a90 	vmov	r3, s15
 80017dc:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
 80017e0:	3201      	adds	r2, #1
  for(i=0; i<3; i++)
 80017e2:	2a03      	cmp	r2, #3
 80017e4:	d1ee      	bne.n	80017c4 <LSM6DSL_AccReadXYZ+0x5c>
}
 80017e6:	b005      	add	sp, #20
 80017e8:	bd30      	pop	{r4, r5, pc}
 80017ea:	bf00      	nop
 80017ec:	0800ab50 	.word	0x0800ab50

080017f0 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80017f0:	b530      	push	{r4, r5, lr}
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80017f2:	2111      	movs	r1, #17
{
 80017f4:	b085      	sub	sp, #20
 80017f6:	4604      	mov	r4, r0
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80017f8:	20d4      	movs	r0, #212	; 0xd4
 80017fa:	f7ff fc4f 	bl	800109c <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80017fe:	2306      	movs	r3, #6
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001800:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8001802:	aa02      	add	r2, sp, #8
 8001804:	2122      	movs	r1, #34	; 0x22
 8001806:	20d4      	movs	r0, #212	; 0xd4
 8001808:	f7ff fc66 	bl	80010d8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800180c:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001810:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001814:	4815      	ldr	r0, [pc, #84]	; (800186c <LSM6DSL_GyroReadXYZAngRate+0x7c>)
 8001816:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800181a:	f8ad 3000 	strh.w	r3, [sp]
 800181e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001822:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001826:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800182a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800182e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001832:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001836:	f005 050c 	and.w	r5, r5, #12
 800183a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800183e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8001842:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001846:	ed90 7a00 	vldr	s14, [r0]
 800184a:	2300      	movs	r3, #0
 800184c:	4620      	mov	r0, r4
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800184e:	f93d 2013 	ldrsh.w	r2, [sp, r3, lsl #1]
 8001852:	ee07 2a90 	vmov	s15, r2
 8001856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185a:	3301      	adds	r3, #1
 800185c:	ee67 7a87 	vmul.f32	s15, s15, s14
  for(i=0; i<3; i++)
 8001860:	2b03      	cmp	r3, #3
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001862:	ece0 7a01 	vstmia	r0!, {s15}
  for(i=0; i<3; i++)
 8001866:	d1f2      	bne.n	800184e <LSM6DSL_GyroReadXYZAngRate+0x5e>
  }
}
 8001868:	b005      	add	sp, #20
 800186a:	bd30      	pop	{r4, r5, pc}
 800186c:	0800ab84 	.word	0x0800ab84

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_InitTick+0x2c>)
{
 8001874:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001880:	f000 f88c 	bl	800199c <HAL_SYSTICK_Config>
 8001884:	4604      	mov	r4, r0
 8001886:	b938      	cbnz	r0, 8001898 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001888:	4602      	mov	r2, r0
 800188a:	4629      	mov	r1, r5
 800188c:	f04f 30ff 	mov.w	r0, #4294967295
 8001890:	f000 f844 	bl	800191c <HAL_NVIC_SetPriority>
 8001894:	4620      	mov	r0, r4
 8001896:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8001898:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800189a:	bd38      	pop	{r3, r4, r5, pc}
 800189c:	20000250 	.word	0x20000250

080018a0 <HAL_Init>:
{
 80018a0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a2:	2003      	movs	r0, #3
 80018a4:	f000 f828 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff ffe1 	bl	8001870 <HAL_InitTick>
 80018ae:	4604      	mov	r4, r0
 80018b0:	b918      	cbnz	r0, 80018ba <HAL_Init+0x1a>
    HAL_MspInit();
 80018b2:	f003 fb89 	bl	8004fc8 <HAL_MspInit>
}
 80018b6:	4620      	mov	r0, r4
 80018b8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80018ba:	2401      	movs	r4, #1
 80018bc:	e7fb      	b.n	80018b6 <HAL_Init+0x16>
	...

080018c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80018c0:	4a02      	ldr	r2, [pc, #8]	; (80018cc <HAL_IncTick+0xc>)
 80018c2:	6813      	ldr	r3, [r2, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000828 	.word	0x20000828

080018d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018d0:	4b01      	ldr	r3, [pc, #4]	; (80018d8 <HAL_GetTick+0x8>)
 80018d2:	6818      	ldr	r0, [r3, #0]
}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000828 	.word	0x20000828

080018dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018dc:	b538      	push	{r3, r4, r5, lr}
 80018de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80018e0:	f7ff fff6 	bl	80018d0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80018e6:	4605      	mov	r5, r0
  {
    wait++;
 80018e8:	bf18      	it	ne
 80018ea:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ec:	f7ff fff0 	bl	80018d0 <HAL_GetTick>
 80018f0:	1b40      	subs	r0, r0, r5
 80018f2:	4284      	cmp	r4, r0
 80018f4:	d8fa      	bhi.n	80018ec <HAL_Delay+0x10>
  {
  }
}
 80018f6:	bd38      	pop	{r3, r4, r5, pc}

080018f8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80018fa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001900:	041b      	lsls	r3, r3, #16
 8001902:	0c1b      	lsrs	r3, r3, #16
 8001904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001908:	0200      	lsls	r0, r0, #8
 800190a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001912:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001914:	60d3      	str	r3, [r2, #12]
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191e:	b530      	push	{r4, r5, lr}
 8001920:	68dc      	ldr	r4, [r3, #12]
 8001922:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001926:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	2b04      	cmp	r3, #4
 800192e:	bf28      	it	cs
 8001930:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	f04f 0501 	mov.w	r5, #1
 8001938:	fa05 f303 	lsl.w	r3, r5, r3
 800193c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001940:	bf8c      	ite	hi
 8001942:	3c03      	subhi	r4, #3
 8001944:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001946:	4019      	ands	r1, r3
 8001948:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800194a:	fa05 f404 	lsl.w	r4, r5, r4
 800194e:	3c01      	subs	r4, #1
 8001950:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001952:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	ea42 0201 	orr.w	r2, r2, r1
 8001958:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	bfaf      	iteee	ge
 800195e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001962:	f000 000f 	andlt.w	r0, r0, #15
 8001966:	4b06      	ldrlt	r3, [pc, #24]	; (8001980 <HAL_NVIC_SetPriority+0x64>)
 8001968:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	bfa5      	ittet	ge
 800196c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001970:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001978:	bd30      	pop	{r4, r5, pc}
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00
 8001980:	e000ed14 	.word	0xe000ed14

08001984 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001984:	0942      	lsrs	r2, r0, #5
 8001986:	2301      	movs	r3, #1
 8001988:	f000 001f 	and.w	r0, r0, #31
 800198c:	fa03 f000 	lsl.w	r0, r3, r0
 8001990:	4b01      	ldr	r3, [pc, #4]	; (8001998 <HAL_NVIC_EnableIRQ+0x14>)
 8001992:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100

0800199c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	3801      	subs	r0, #1
 800199e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80019a2:	d20a      	bcs.n	80019ba <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	21f0      	movs	r1, #240	; 0xf0
 80019ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80019ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <DFSDM_GetChannelFromInstance+0x54>)
 80019ca:	4298      	cmp	r0, r3
 80019cc:	d017      	beq.n	80019fe <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 0;
  }
  else if (Instance == DFSDM1_Channel1)
 80019ce:	3320      	adds	r3, #32
 80019d0:	4298      	cmp	r0, r3
 80019d2:	d016      	beq.n	8001a02 <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 1;
  }
  else if (Instance == DFSDM1_Channel2)
 80019d4:	3320      	adds	r3, #32
 80019d6:	4298      	cmp	r0, r3
 80019d8:	d015      	beq.n	8001a06 <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 2;
  }
  else if (Instance == DFSDM1_Channel3)
 80019da:	3320      	adds	r3, #32
 80019dc:	4298      	cmp	r0, r3
 80019de:	d014      	beq.n	8001a0a <DFSDM_GetChannelFromInstance+0x42>
    channel = 3;
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80019e0:	3320      	adds	r3, #32
 80019e2:	4298      	cmp	r0, r3
 80019e4:	d013      	beq.n	8001a0e <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 4;
  }
  else if (Instance == DFSDM1_Channel5)
 80019e6:	3320      	adds	r3, #32
 80019e8:	4298      	cmp	r0, r3
 80019ea:	d012      	beq.n	8001a12 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 5;
  }
  else if (Instance == DFSDM1_Channel6)
 80019ec:	3320      	adds	r3, #32
 80019ee:	4298      	cmp	r0, r3
 80019f0:	d011      	beq.n	8001a16 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 6;
  }
  else if (Instance == DFSDM1_Channel7)
  {
    channel = 7;
 80019f2:	3320      	adds	r3, #32
 80019f4:	4298      	cmp	r0, r3
 80019f6:	bf0c      	ite	eq
 80019f8:	2007      	moveq	r0, #7
 80019fa:	2000      	movne	r0, #0
 80019fc:	4770      	bx	lr
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 80019fe:	2000      	movs	r0, #0
 8001a00:	4770      	bx	lr
    channel = 1;
 8001a02:	2001      	movs	r0, #1
 8001a04:	4770      	bx	lr
    channel = 2;
 8001a06:	2002      	movs	r0, #2
 8001a08:	4770      	bx	lr
    channel = 3;
 8001a0a:	2003      	movs	r0, #3
 8001a0c:	4770      	bx	lr
    channel = 4;
 8001a0e:	2004      	movs	r0, #4
 8001a10:	4770      	bx	lr
    channel = 5;
 8001a12:	2005      	movs	r0, #5
 8001a14:	4770      	bx	lr
    channel = 6;
 8001a16:	2006      	movs	r0, #6
  }

  return channel;
}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40016000 	.word	0x40016000

08001a20 <HAL_DFSDM_ChannelInit>:
{
 8001a20:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 8001a22:	4604      	mov	r4, r0
 8001a24:	2800      	cmp	r0, #0
 8001a26:	d067      	beq.n	8001af8 <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001a28:	6800      	ldr	r0, [r0, #0]
 8001a2a:	4d34      	ldr	r5, [pc, #208]	; (8001afc <HAL_DFSDM_ChannelInit+0xdc>)
 8001a2c:	f7ff ffcc 	bl	80019c8 <DFSDM_GetChannelFromInstance>
 8001a30:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d15f      	bne.n	8001af8 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f003 fadd 	bl	8004ff8 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8001a3e:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <HAL_DFSDM_ChannelInit+0xe0>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	3201      	adds	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d119      	bne.n	8001a80 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_DFSDM_ChannelInit+0xe4>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001a54:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68a1      	ldr	r1, [r4, #8]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8001a64:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001a66:	7922      	ldrb	r2, [r4, #4]
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d105      	bne.n	8001a78 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001a6c:	68e1      	ldr	r1, [r4, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	3901      	subs	r1, #1
 8001a72:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001a76:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a7e:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001a80:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a82:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001a84:	6803      	ldr	r3, [r0, #0]
 8001a86:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8001a8a:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a8c:	6923      	ldr	r3, [r4, #16]
 8001a8e:	6802      	ldr	r2, [r0, #0]
 8001a90:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a92:	69a1      	ldr	r1, [r4, #24]
 8001a94:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a96:	4313      	orrs	r3, r2
 8001a98:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001a9a:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001a9c:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001a9e:	f023 030f 	bic.w	r3, r3, #15
 8001aa2:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001aa4:	69e3      	ldr	r3, [r4, #28]
 8001aa6:	6802      	ldr	r2, [r0, #0]
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001aae:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ab0:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001ab2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001ab4:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8001ab8:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001aba:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001abc:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ac4:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001ac6:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001ac8:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001ad0:	6843      	ldr	r3, [r0, #4]
 8001ad2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ad6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ad8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001adc:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001ade:	6803      	ldr	r3, [r0, #0]
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae4:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001aec:	f7ff ff6c 	bl	80019c8 <DFSDM_GetChannelFromInstance>
 8001af0:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8001af4:	2000      	movs	r0, #0
 8001af6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001af8:	2001      	movs	r0, #1
}
 8001afa:	bd38      	pop	{r3, r4, r5, pc}
 8001afc:	20000714 	.word	0x20000714
 8001b00:	20000734 	.word	0x20000734
 8001b04:	40016000 	.word	0x40016000

08001b08 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b08:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001b0c:	2a02      	cmp	r2, #2
{
 8001b0e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b10:	d003      	beq.n	8001b1a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b12:	2204      	movs	r2, #4
 8001b14:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001b16:	2001      	movs	r0, #1
 8001b18:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b1a:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b1c:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b1e:	6811      	ldr	r1, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b20:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b22:	f021 010e 	bic.w	r1, r1, #14
 8001b26:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b28:	6811      	ldr	r1, [r2, #0]
 8001b2a:	f021 0101 	bic.w	r1, r1, #1
 8001b2e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001b32:	2101      	movs	r1, #1
 8001b34:	f002 021c 	and.w	r2, r2, #28
 8001b38:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3c:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001b3e:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001b40:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001b44:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001b48:	b113      	cbz	r3, 8001b50 <HAL_DMA_Abort_IT+0x48>
    {
      hdma->XferAbortCallback(hdma);
 8001b4a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	bd10      	pop	{r4, pc}
 8001b50:	4618      	mov	r0, r3
    }
  }
  return status;
}
 8001b52:	bd10      	pop	{r4, pc}

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b58:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001d08 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b60:	4c67      	ldr	r4, [pc, #412]	; (8001d00 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001b64:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b66:	9a01      	ldr	r2, [sp, #4]
 8001b68:	40da      	lsrs	r2, r3
 8001b6a:	d102      	bne.n	8001b72 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001b6c:	b005      	add	sp, #20
 8001b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b72:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001b74:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b76:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001b78:	ea12 0e06 	ands.w	lr, r2, r6
 8001b7c:	f000 80b1 	beq.w	8001ce2 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b80:	684a      	ldr	r2, [r1, #4]
 8001b82:	f022 0710 	bic.w	r7, r2, #16
 8001b86:	2f02      	cmp	r7, #2
 8001b88:	d116      	bne.n	8001bb8 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8001b8a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001b8e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b92:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001b96:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b9a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001b9e:	f04f 0c0f 	mov.w	ip, #15
 8001ba2:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001ba6:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001baa:	690d      	ldr	r5, [r1, #16]
 8001bac:	fa05 f50a 	lsl.w	r5, r5, sl
 8001bb0:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001bb4:	f8c9 5020 	str.w	r5, [r9, #32]
 8001bb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bbc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001bbe:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bc2:	fa05 f50c 	lsl.w	r5, r5, ip
 8001bc6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bc8:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bcc:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bd0:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bd6:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bda:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001bdc:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be0:	d811      	bhi.n	8001c06 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001be2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001be4:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001be8:	68cf      	ldr	r7, [r1, #12]
 8001bea:	fa07 f70c 	lsl.w	r7, r7, ip
 8001bee:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001bf2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001bf4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf6:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bfa:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8001bfe:	409f      	lsls	r7, r3
 8001c00:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001c04:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c06:	f1ba 0f03 	cmp.w	sl, #3
 8001c0a:	d107      	bne.n	8001c1c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001c0c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c0e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c12:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8001c16:	409f      	lsls	r7, r3
 8001c18:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8001c1a:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001c1c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c1e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c20:	688e      	ldr	r6, [r1, #8]
 8001c22:	fa06 f60c 	lsl.w	r6, r6, ip
 8001c26:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001c28:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c2a:	00d5      	lsls	r5, r2, #3
 8001c2c:	d559      	bpl.n	8001ce2 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001c32:	f045 0501 	orr.w	r5, r5, #1
 8001c36:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8001c3a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001c3e:	f023 0603 	bic.w	r6, r3, #3
 8001c42:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001c46:	f005 0501 	and.w	r5, r5, #1
 8001c4a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001c4e:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c50:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c54:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001c56:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c58:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001c5c:	270f      	movs	r7, #15
 8001c5e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c62:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c66:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c6a:	d03c      	beq.n	8001ce6 <HAL_GPIO_Init+0x192>
 8001c6c:	4d25      	ldr	r5, [pc, #148]	; (8001d04 <HAL_GPIO_Init+0x1b0>)
 8001c6e:	42a8      	cmp	r0, r5
 8001c70:	d03b      	beq.n	8001cea <HAL_GPIO_Init+0x196>
 8001c72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c76:	42a8      	cmp	r0, r5
 8001c78:	d039      	beq.n	8001cee <HAL_GPIO_Init+0x19a>
 8001c7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c7e:	42a8      	cmp	r0, r5
 8001c80:	d037      	beq.n	8001cf2 <HAL_GPIO_Init+0x19e>
 8001c82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c86:	42a8      	cmp	r0, r5
 8001c88:	d035      	beq.n	8001cf6 <HAL_GPIO_Init+0x1a2>
 8001c8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c8e:	42a8      	cmp	r0, r5
 8001c90:	d033      	beq.n	8001cfa <HAL_GPIO_Init+0x1a6>
 8001c92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c96:	42a8      	cmp	r0, r5
 8001c98:	bf14      	ite	ne
 8001c9a:	2507      	movne	r5, #7
 8001c9c:	2506      	moveq	r5, #6
 8001c9e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001ca2:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ca4:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001ca6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001ca8:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cac:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8001cae:	bf54      	ite	pl
 8001cb0:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001cb2:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001cb6:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001cb8:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cba:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001cbc:	bf54      	ite	pl
 8001cbe:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001cc0:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001cc4:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001cc6:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc8:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001cca:	bf54      	ite	pl
 8001ccc:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001cce:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8001cd2:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001cd4:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd6:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001cd8:	bf54      	ite	pl
 8001cda:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001cdc:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001ce0:	60e5      	str	r5, [r4, #12]
    position++;
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	e73f      	b.n	8001b66 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ce6:	2500      	movs	r5, #0
 8001ce8:	e7d9      	b.n	8001c9e <HAL_GPIO_Init+0x14a>
 8001cea:	2501      	movs	r5, #1
 8001cec:	e7d7      	b.n	8001c9e <HAL_GPIO_Init+0x14a>
 8001cee:	2502      	movs	r5, #2
 8001cf0:	e7d5      	b.n	8001c9e <HAL_GPIO_Init+0x14a>
 8001cf2:	2503      	movs	r5, #3
 8001cf4:	e7d3      	b.n	8001c9e <HAL_GPIO_Init+0x14a>
 8001cf6:	2504      	movs	r5, #4
 8001cf8:	e7d1      	b.n	8001c9e <HAL_GPIO_Init+0x14a>
 8001cfa:	2505      	movs	r5, #5
 8001cfc:	e7cf      	b.n	8001c9e <HAL_GPIO_Init+0x14a>
 8001cfe:	bf00      	nop
 8001d00:	40010400 	.word	0x40010400
 8001d04:	48000400 	.word	0x48000400
 8001d08:	40021000 	.word	0x40021000

08001d0c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001d10:	4c47      	ldr	r4, [pc, #284]	; (8001e30 <HAL_GPIO_DeInit+0x124>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001d12:	f8df a124 	ldr.w	sl, [pc, #292]	; 8001e38 <HAL_GPIO_DeInit+0x12c>
 8001d16:	f8df b124 	ldr.w	fp, [pc, #292]	; 8001e3c <HAL_GPIO_DeInit+0x130>
  uint32_t position = 0x00u;
 8001d1a:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001d1c:	f04f 0801 	mov.w	r8, #1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001d20:	f04f 0903 	mov.w	r9, #3
  while ((GPIO_Pin >> position) != 0x00u)
 8001d24:	fa31 f203 	lsrs.w	r2, r1, r3
 8001d28:	d102      	bne.n	8001d30 <HAL_GPIO_DeInit+0x24>
      }
    }

    position++;
  }
}
 8001d2a:	b003      	add	sp, #12
 8001d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001d30:	fa08 f603 	lsl.w	r6, r8, r3
    if (iocurrent != 0x00u)
 8001d34:	ea11 0206 	ands.w	r2, r1, r6
 8001d38:	9201      	str	r2, [sp, #4]
 8001d3a:	d06a      	beq.n	8001e12 <HAL_GPIO_DeInit+0x106>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001d3c:	6807      	ldr	r7, [r0, #0]
 8001d3e:	005a      	lsls	r2, r3, #1
 8001d40:	fa09 f202 	lsl.w	r2, r9, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001d44:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001d48:	4317      	orrs	r7, r2
 8001d4a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001d4e:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001d50:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8001d54:	f003 0e07 	and.w	lr, r3, #7
 8001d58:	463d      	mov	r5, r7
 8001d5a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001d5e:	270f      	movs	r7, #15
 8001d60:	fa07 fe0e 	lsl.w	lr, r7, lr
 8001d64:	ea25 0e0e 	bic.w	lr, r5, lr
 8001d68:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d6c:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8001d70:	43d2      	mvns	r2, r2
 8001d72:	ea0e 0e02 	and.w	lr, lr, r2
 8001d76:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d7a:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8001d7e:	43f6      	mvns	r6, r6
 8001d80:	ea0e 0e06 	and.w	lr, lr, r6
 8001d84:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d88:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8001d8c:	ea02 020e 	and.w	r2, r2, lr
 8001d90:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001d92:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001d94:	4016      	ands	r6, r2
 8001d96:	62c6      	str	r6, [r0, #44]	; 0x2c
 8001d98:	f023 0603 	bic.w	r6, r3, #3
 8001d9c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001da0:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001da4:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8001da8:	68b2      	ldr	r2, [r6, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001daa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001dae:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001db2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001db6:	ea02 0c07 	and.w	ip, r2, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001dba:	d02c      	beq.n	8001e16 <HAL_GPIO_DeInit+0x10a>
 8001dbc:	4a1d      	ldr	r2, [pc, #116]	; (8001e34 <HAL_GPIO_DeInit+0x128>)
 8001dbe:	4290      	cmp	r0, r2
 8001dc0:	d02b      	beq.n	8001e1a <HAL_GPIO_DeInit+0x10e>
 8001dc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dc6:	4290      	cmp	r0, r2
 8001dc8:	d029      	beq.n	8001e1e <HAL_GPIO_DeInit+0x112>
 8001dca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dce:	4290      	cmp	r0, r2
 8001dd0:	d027      	beq.n	8001e22 <HAL_GPIO_DeInit+0x116>
 8001dd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dd6:	4290      	cmp	r0, r2
 8001dd8:	d025      	beq.n	8001e26 <HAL_GPIO_DeInit+0x11a>
 8001dda:	4550      	cmp	r0, sl
 8001ddc:	d025      	beq.n	8001e2a <HAL_GPIO_DeInit+0x11e>
 8001dde:	4558      	cmp	r0, fp
 8001de0:	bf0c      	ite	eq
 8001de2:	2206      	moveq	r2, #6
 8001de4:	2207      	movne	r2, #7
 8001de6:	fa02 f20e 	lsl.w	r2, r2, lr
 8001dea:	4594      	cmp	ip, r2
 8001dec:	d111      	bne.n	8001e12 <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001dee:	68b2      	ldr	r2, [r6, #8]
        EXTI->IMR1 &= ~(iocurrent);
 8001df0:	9d01      	ldr	r5, [sp, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001df2:	ea22 0707 	bic.w	r7, r2, r7
 8001df6:	60b7      	str	r7, [r6, #8]
        EXTI->IMR1 &= ~(iocurrent);
 8001df8:	6822      	ldr	r2, [r4, #0]
 8001dfa:	43ed      	mvns	r5, r5
 8001dfc:	402a      	ands	r2, r5
 8001dfe:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001e00:	6862      	ldr	r2, [r4, #4]
 8001e02:	402a      	ands	r2, r5
 8001e04:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001e06:	68a2      	ldr	r2, [r4, #8]
 8001e08:	402a      	ands	r2, r5
 8001e0a:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001e0c:	68e2      	ldr	r2, [r4, #12]
 8001e0e:	4015      	ands	r5, r2
 8001e10:	60e5      	str	r5, [r4, #12]
    position++;
 8001e12:	3301      	adds	r3, #1
 8001e14:	e786      	b.n	8001d24 <HAL_GPIO_DeInit+0x18>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001e16:	2200      	movs	r2, #0
 8001e18:	e7e5      	b.n	8001de6 <HAL_GPIO_DeInit+0xda>
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	e7e3      	b.n	8001de6 <HAL_GPIO_DeInit+0xda>
 8001e1e:	2202      	movs	r2, #2
 8001e20:	e7e1      	b.n	8001de6 <HAL_GPIO_DeInit+0xda>
 8001e22:	2203      	movs	r2, #3
 8001e24:	e7df      	b.n	8001de6 <HAL_GPIO_DeInit+0xda>
 8001e26:	2204      	movs	r2, #4
 8001e28:	e7dd      	b.n	8001de6 <HAL_GPIO_DeInit+0xda>
 8001e2a:	2205      	movs	r2, #5
 8001e2c:	e7db      	b.n	8001de6 <HAL_GPIO_DeInit+0xda>
 8001e2e:	bf00      	nop
 8001e30:	40010400 	.word	0x40010400
 8001e34:	48000400 	.word	0x48000400
 8001e38:	48001400 	.word	0x48001400
 8001e3c:	48001800 	.word	0x48001800

08001e40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e40:	b10a      	cbz	r2, 8001e46 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e42:	6181      	str	r1, [r0, #24]
 8001e44:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e46:	6281      	str	r1, [r0, #40]	; 0x28
 8001e48:	4770      	bx	lr

08001e4a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001e4a:	6943      	ldr	r3, [r0, #20]
 8001e4c:	4059      	eors	r1, r3
 8001e4e:	6141      	str	r1, [r0, #20]
 8001e50:	4770      	bx	lr

08001e52 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e52:	4770      	bx	lr

08001e54 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001e54:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001e58:	6959      	ldr	r1, [r3, #20]
 8001e5a:	4201      	tst	r1, r0
 8001e5c:	d002      	beq.n	8001e64 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e5e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e60:	f7ff fff7 	bl	8001e52 <HAL_GPIO_EXTI_Callback>
 8001e64:	bd08      	pop	{r3, pc}
 8001e66:	bf00      	nop
 8001e68:	40010400 	.word	0x40010400

08001e6c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e6c:	6803      	ldr	r3, [r0, #0]
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e72:	bf44      	itt	mi
 8001e74:	2200      	movmi	r2, #0
 8001e76:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e7c:	bf5e      	ittt	pl
 8001e7e:	699a      	ldrpl	r2, [r3, #24]
 8001e80:	f042 0201 	orrpl.w	r2, r2, #1
 8001e84:	619a      	strpl	r2, [r3, #24]
 8001e86:	4770      	bx	lr

08001e88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001e88:	b530      	push	{r4, r5, lr}
 8001e8a:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001e8c:	6805      	ldr	r5, [r0, #0]
 8001e8e:	4323      	orrs	r3, r4
 8001e90:	0d64      	lsrs	r4, r4, #21
 8001e92:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8001e96:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8001e9a:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8001e9e:	6868      	ldr	r0, [r5, #4]
 8001ea0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001ea4:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8001ea8:	4319      	orrs	r1, r3
 8001eaa:	f044 0403 	orr.w	r4, r4, #3
 8001eae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001eb2:	ea20 0404 	bic.w	r4, r0, r4
 8001eb6:	4321      	orrs	r1, r4
 8001eb8:	6069      	str	r1, [r5, #4]
 8001eba:	bd30      	pop	{r4, r5, pc}

08001ebc <I2C_WaitOnFlagUntilTimeout>:
{
 8001ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec0:	9f06      	ldr	r7, [sp, #24]
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	4688      	mov	r8, r1
 8001ec6:	4616      	mov	r6, r2
 8001ec8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eca:	6822      	ldr	r2, [r4, #0]
 8001ecc:	6993      	ldr	r3, [r2, #24]
 8001ece:	ea38 0303 	bics.w	r3, r8, r3
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	42b3      	cmp	r3, r6
 8001eda:	d002      	beq.n	8001ee2 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001edc:	2000      	movs	r0, #0
}
 8001ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001ee2:	1c6b      	adds	r3, r5, #1
 8001ee4:	d0f2      	beq.n	8001ecc <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ee6:	f7ff fcf3 	bl	80018d0 <HAL_GetTick>
 8001eea:	1bc0      	subs	r0, r0, r7
 8001eec:	4285      	cmp	r5, r0
 8001eee:	d301      	bcc.n	8001ef4 <I2C_WaitOnFlagUntilTimeout+0x38>
 8001ef0:	2d00      	cmp	r5, #0
 8001ef2:	d1ea      	bne.n	8001eca <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ef6:	f043 0320 	orr.w	r3, r3, #32
 8001efa:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	2320      	movs	r3, #32
 8001efe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001f08:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f12 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f12:	6803      	ldr	r3, [r0, #0]
{
 8001f14:	b570      	push	{r4, r5, r6, lr}
 8001f16:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f18:	6998      	ldr	r0, [r3, #24]
 8001f1a:	f010 0010 	ands.w	r0, r0, #16
{
 8001f1e:	460d      	mov	r5, r1
 8001f20:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f22:	d116      	bne.n	8001f52 <I2C_IsAcknowledgeFailed+0x40>
 8001f24:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8001f26:	1c69      	adds	r1, r5, #1
 8001f28:	d014      	beq.n	8001f54 <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2a:	f7ff fcd1 	bl	80018d0 <HAL_GetTick>
 8001f2e:	1b80      	subs	r0, r0, r6
 8001f30:	4285      	cmp	r5, r0
 8001f32:	d300      	bcc.n	8001f36 <I2C_IsAcknowledgeFailed+0x24>
 8001f34:	b96d      	cbnz	r5, 8001f52 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f38:	f043 0320 	orr.w	r3, r3, #32
 8001f3c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	2320      	movs	r3, #32
 8001f40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001f4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8001f4e:	2001      	movs	r0, #1
}
 8001f50:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	6999      	ldr	r1, [r3, #24]
 8001f56:	068a      	lsls	r2, r1, #26
 8001f58:	d5e5      	bpl.n	8001f26 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f5a:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f5c:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f5e:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001f60:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f62:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001f64:	f7ff ff82 	bl	8001e6c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001f68:	6822      	ldr	r2, [r4, #0]
 8001f6a:	6853      	ldr	r3, [r2, #4]
 8001f6c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001f70:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001f74:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8001f8a:	e7db      	b.n	8001f44 <I2C_IsAcknowledgeFailed+0x32>

08001f8c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001f8c:	b570      	push	{r4, r5, r6, lr}
 8001f8e:	4604      	mov	r4, r0
 8001f90:	460d      	mov	r5, r1
 8001f92:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	079b      	lsls	r3, r3, #30
 8001f9a:	d501      	bpl.n	8001fa0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fa0:	4632      	mov	r2, r6
 8001fa2:	4629      	mov	r1, r5
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f7ff ffb4 	bl	8001f12 <I2C_IsAcknowledgeFailed>
 8001faa:	b9a0      	cbnz	r0, 8001fd6 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001fac:	1c6a      	adds	r2, r5, #1
 8001fae:	d0f1      	beq.n	8001f94 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb0:	f7ff fc8e 	bl	80018d0 <HAL_GetTick>
 8001fb4:	1b80      	subs	r0, r0, r6
 8001fb6:	4285      	cmp	r5, r0
 8001fb8:	d301      	bcc.n	8001fbe <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001fba:	2d00      	cmp	r5, #0
 8001fbc:	d1ea      	bne.n	8001f94 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fc0:	f043 0320 	orr.w	r3, r3, #32
 8001fc4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001fd2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001fd6:	2001      	movs	r0, #1
}
 8001fd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001fdc <I2C_RequestMemoryWrite>:
{
 8001fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fde:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001fe0:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <I2C_RequestMemoryWrite+0x60>)
 8001fe4:	9300      	str	r3, [sp, #0]
{
 8001fe6:	4605      	mov	r5, r0
 8001fe8:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fee:	b2fa      	uxtb	r2, r7
 8001ff0:	f7ff ff4a 	bl	8001e88 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ff4:	4632      	mov	r2, r6
 8001ff6:	9908      	ldr	r1, [sp, #32]
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	f7ff ffc7 	bl	8001f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8001ffe:	b110      	cbz	r0, 8002006 <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8002000:	2001      	movs	r0, #1
}
 8002002:	b003      	add	sp, #12
 8002004:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002006:	2f01      	cmp	r7, #1
 8002008:	682b      	ldr	r3, [r5, #0]
 800200a:	d10c      	bne.n	8002026 <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800200c:	b2e4      	uxtb	r4, r4
 800200e:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002010:	9b08      	ldr	r3, [sp, #32]
 8002012:	9600      	str	r6, [sp, #0]
 8002014:	2200      	movs	r2, #0
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	4628      	mov	r0, r5
 800201a:	f7ff ff4f 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800201e:	3000      	adds	r0, #0
 8002020:	bf18      	it	ne
 8002022:	2001      	movne	r0, #1
 8002024:	e7ed      	b.n	8002002 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002026:	0a22      	lsrs	r2, r4, #8
 8002028:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800202a:	9908      	ldr	r1, [sp, #32]
 800202c:	4632      	mov	r2, r6
 800202e:	4628      	mov	r0, r5
 8002030:	f7ff ffac 	bl	8001f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8002034:	2800      	cmp	r0, #0
 8002036:	d1e3      	bne.n	8002000 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002038:	682b      	ldr	r3, [r5, #0]
 800203a:	e7e7      	b.n	800200c <I2C_RequestMemoryWrite+0x30>
 800203c:	80002000 	.word	0x80002000

08002040 <I2C_RequestMemoryRead>:
{
 8002040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002042:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002044:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <I2C_RequestMemoryRead+0x60>)
 8002048:	9300      	str	r3, [sp, #0]
{
 800204a:	4605      	mov	r5, r0
 800204c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800204e:	2300      	movs	r3, #0
 8002050:	b2fa      	uxtb	r2, r7
 8002052:	f7ff ff19 	bl	8001e88 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002056:	4632      	mov	r2, r6
 8002058:	9908      	ldr	r1, [sp, #32]
 800205a:	4628      	mov	r0, r5
 800205c:	f7ff ff96 	bl	8001f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8002060:	b110      	cbz	r0, 8002068 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8002062:	2001      	movs	r0, #1
}
 8002064:	b003      	add	sp, #12
 8002066:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002068:	2f01      	cmp	r7, #1
 800206a:	682b      	ldr	r3, [r5, #0]
 800206c:	d10c      	bne.n	8002088 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800206e:	b2e4      	uxtb	r4, r4
 8002070:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002072:	9b08      	ldr	r3, [sp, #32]
 8002074:	9600      	str	r6, [sp, #0]
 8002076:	2200      	movs	r2, #0
 8002078:	2140      	movs	r1, #64	; 0x40
 800207a:	4628      	mov	r0, r5
 800207c:	f7ff ff1e 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002080:	3000      	adds	r0, #0
 8002082:	bf18      	it	ne
 8002084:	2001      	movne	r0, #1
 8002086:	e7ed      	b.n	8002064 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002088:	0a22      	lsrs	r2, r4, #8
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800208c:	9908      	ldr	r1, [sp, #32]
 800208e:	4632      	mov	r2, r6
 8002090:	4628      	mov	r0, r5
 8002092:	f7ff ff7b 	bl	8001f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8002096:	2800      	cmp	r0, #0
 8002098:	d1e3      	bne.n	8002062 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800209a:	682b      	ldr	r3, [r5, #0]
 800209c:	e7e7      	b.n	800206e <I2C_RequestMemoryRead+0x2e>
 800209e:	bf00      	nop
 80020a0:	80002000 	.word	0x80002000

080020a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	4604      	mov	r4, r0
 80020a8:	460d      	mov	r5, r1
 80020aa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	069b      	lsls	r3, r3, #26
 80020b2:	d501      	bpl.n	80020b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80020b4:	2000      	movs	r0, #0
 80020b6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020b8:	4632      	mov	r2, r6
 80020ba:	4629      	mov	r1, r5
 80020bc:	4620      	mov	r0, r4
 80020be:	f7ff ff28 	bl	8001f12 <I2C_IsAcknowledgeFailed>
 80020c2:	b990      	cbnz	r0, 80020ea <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c4:	f7ff fc04 	bl	80018d0 <HAL_GetTick>
 80020c8:	1b80      	subs	r0, r0, r6
 80020ca:	4285      	cmp	r5, r0
 80020cc:	d301      	bcc.n	80020d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80020ce:	2d00      	cmp	r5, #0
 80020d0:	d1ec      	bne.n	80020ac <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020d4:	f043 0320 	orr.w	r3, r3, #32
 80020d8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020da:	2320      	movs	r3, #32
 80020dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80020e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80020ea:	2001      	movs	r0, #1
}
 80020ec:	bd70      	pop	{r4, r5, r6, pc}

080020ee <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80020ee:	b570      	push	{r4, r5, r6, lr}
 80020f0:	4604      	mov	r4, r0
 80020f2:	460d      	mov	r5, r1
 80020f4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	075b      	lsls	r3, r3, #29
 80020fc:	d40e      	bmi.n	800211c <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020fe:	4632      	mov	r2, r6
 8002100:	4629      	mov	r1, r5
 8002102:	4620      	mov	r0, r4
 8002104:	f7ff ff05 	bl	8001f12 <I2C_IsAcknowledgeFailed>
 8002108:	b9f0      	cbnz	r0, 8002148 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	699a      	ldr	r2, [r3, #24]
 800210e:	0691      	lsls	r1, r2, #26
 8002110:	d51c      	bpl.n	800214c <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002112:	699a      	ldr	r2, [r3, #24]
 8002114:	0752      	lsls	r2, r2, #29
 8002116:	d503      	bpl.n	8002120 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8002118:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800211a:	b10a      	cbz	r2, 8002120 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 800211c:	2000      	movs	r0, #0
 800211e:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002120:	2120      	movs	r1, #32
 8002122:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800212a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800212e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002138:	2300      	movs	r3, #0
 800213a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800213c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002144:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002148:	2001      	movs	r0, #1
}
 800214a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214c:	f7ff fbc0 	bl	80018d0 <HAL_GetTick>
 8002150:	1b80      	subs	r0, r0, r6
 8002152:	4285      	cmp	r5, r0
 8002154:	d301      	bcc.n	800215a <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8002156:	2d00      	cmp	r5, #0
 8002158:	d1cd      	bne.n	80020f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800215a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800215c:	f043 0320 	orr.w	r3, r3, #32
 8002160:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002162:	2320      	movs	r3, #32
 8002164:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8002168:	2300      	movs	r3, #0
 800216a:	e7eb      	b.n	8002144 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

0800216c <HAL_I2C_Init>:
{
 800216c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800216e:	4604      	mov	r4, r0
 8002170:	2800      	cmp	r0, #0
 8002172:	d04a      	beq.n	800220a <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002174:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002178:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800217c:	b91b      	cbnz	r3, 8002186 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800217e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002182:	f002 ff6b 	bl	800505c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002186:	2324      	movs	r3, #36	; 0x24
 8002188:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800218c:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800218e:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002198:	6862      	ldr	r2, [r4, #4]
 800219a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800219e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021a0:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021a2:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ac:	d124      	bne.n	80021f8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b2:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021b4:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80021b6:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021b8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80021bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021c0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80021ca:	6922      	ldr	r2, [r4, #16]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	69a1      	ldr	r1, [r4, #24]
 80021d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021d4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021d6:	6a21      	ldr	r1, [r4, #32]
 80021d8:	69e2      	ldr	r2, [r4, #28]
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	f042 0201 	orr.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e6:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80021e8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ea:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021ec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021f0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 80021f6:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021f8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021fc:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021fe:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002200:	bf04      	itt	eq
 8002202:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002206:	605a      	streq	r2, [r3, #4]
 8002208:	e7d4      	b.n	80021b4 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800220a:	2001      	movs	r0, #1
}
 800220c:	bd10      	pop	{r4, pc}

0800220e <HAL_I2C_DeInit>:
{
 800220e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002210:	4604      	mov	r4, r0
 8002212:	b198      	cbz	r0, 800223c <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8002214:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002216:	2324      	movs	r3, #36	; 0x24
 8002218:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800221c:	6813      	ldr	r3, [r2, #0]
 800221e:	f023 0301 	bic.w	r3, r3, #1
 8002222:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002224:	f002 ff50 	bl	80050c8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002228:	2000      	movs	r0, #0
 800222a:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800222c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8002230:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002234:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002236:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 800223a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800223c:	2001      	movs	r0, #1
}
 800223e:	bd10      	pop	{r4, pc}

08002240 <HAL_I2C_Master_Transmit>:
{
 8002240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002244:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002246:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800224a:	2b20      	cmp	r3, #32
{
 800224c:	4604      	mov	r4, r0
 800224e:	460e      	mov	r6, r1
 8002250:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002252:	f040 8084 	bne.w	800235e <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8002256:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800225a:	2b01      	cmp	r3, #1
 800225c:	d07f      	beq.n	800235e <HAL_I2C_Master_Transmit+0x11e>
 800225e:	2701      	movs	r7, #1
 8002260:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002264:	f7ff fb34 	bl	80018d0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002268:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800226a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800226c:	9000      	str	r0, [sp, #0]
 800226e:	463a      	mov	r2, r7
 8002270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002274:	4620      	mov	r0, r4
 8002276:	f7ff fe21 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 800227a:	b118      	cbz	r0, 8002284 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 800227c:	2001      	movs	r0, #1
}
 800227e:	b003      	add	sp, #12
 8002280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002284:	2321      	movs	r3, #33	; 0x21
 8002286:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800228a:	2310      	movs	r3, #16
 800228c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002290:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002292:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002296:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8002298:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800229c:	b29b      	uxth	r3, r3
 800229e:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80022a0:	6360      	str	r0, [r4, #52]	; 0x34
 80022a2:	4b30      	ldr	r3, [pc, #192]	; (8002364 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022a4:	d926      	bls.n	80022f4 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022a6:	22ff      	movs	r2, #255	; 0xff
 80022a8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022aa:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022b0:	4631      	mov	r1, r6
 80022b2:	4620      	mov	r0, r4
 80022b4:	f7ff fde8 	bl	8001e88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ba:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80022bc:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022be:	462a      	mov	r2, r5
 80022c0:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80022c2:	b9fb      	cbnz	r3, 8002304 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c4:	f7ff feee 	bl	80020a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022c8:	2800      	cmp	r0, #0
 80022ca:	d1d7      	bne.n	800227c <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022cc:	6823      	ldr	r3, [r4, #0]
 80022ce:	2120      	movs	r1, #32
 80022d0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80022d8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80022dc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80022e0:	f022 0201 	bic.w	r2, r2, #1
 80022e4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022e6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80022ea:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022ee:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80022f2:	e7c4      	b.n	800227e <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 80022f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80022f6:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80022f8:	b292      	uxth	r2, r2
 80022fa:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	e7d5      	b.n	80022b0 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002304:	f7ff fe42 	bl	8001f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8002308:	2800      	cmp	r0, #0
 800230a:	d1b7      	bne.n	800227c <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800230c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800230e:	6822      	ldr	r2, [r4, #0]
 8002310:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002314:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002316:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002318:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800231a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800231c:	3b01      	subs	r3, #1
 800231e:	b29b      	uxth	r3, r3
 8002320:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002322:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002324:	3a01      	subs	r2, #1
 8002326:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002328:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800232a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0c3      	beq.n	80022b8 <HAL_I2C_Master_Transmit+0x78>
 8002330:	2a00      	cmp	r2, #0
 8002332:	d1c1      	bne.n	80022b8 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002334:	9500      	str	r5, [sp, #0]
 8002336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	4620      	mov	r0, r4
 800233c:	f7ff fdbe 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 8002340:	2800      	cmp	r0, #0
 8002342:	d19b      	bne.n	800227c <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002344:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002346:	b29b      	uxth	r3, r3
 8002348:	2bff      	cmp	r3, #255	; 0xff
 800234a:	d903      	bls.n	8002354 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800234c:	22ff      	movs	r2, #255	; 0xff
 800234e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002350:	9000      	str	r0, [sp, #0]
 8002352:	e7ab      	b.n	80022ac <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8002354:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002356:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002358:	b292      	uxth	r2, r2
 800235a:	8522      	strh	r2, [r4, #40]	; 0x28
 800235c:	e7ce      	b.n	80022fc <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 800235e:	2002      	movs	r0, #2
 8002360:	e78d      	b.n	800227e <HAL_I2C_Master_Transmit+0x3e>
 8002362:	bf00      	nop
 8002364:	80002000 	.word	0x80002000

08002368 <HAL_I2C_Master_Receive>:
{
 8002368:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800236c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800236e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002372:	2b20      	cmp	r3, #32
{
 8002374:	4604      	mov	r4, r0
 8002376:	460e      	mov	r6, r1
 8002378:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800237a:	f040 8086 	bne.w	800248a <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 800237e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002382:	2b01      	cmp	r3, #1
 8002384:	f000 8081 	beq.w	800248a <HAL_I2C_Master_Receive+0x122>
 8002388:	2701      	movs	r7, #1
 800238a:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800238e:	f7ff fa9f 	bl	80018d0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002392:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8002394:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002396:	9000      	str	r0, [sp, #0]
 8002398:	463a      	mov	r2, r7
 800239a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800239e:	4620      	mov	r0, r4
 80023a0:	f7ff fd8c 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 80023a4:	b118      	cbz	r0, 80023ae <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 80023a6:	2001      	movs	r0, #1
}
 80023a8:	b003      	add	sp, #12
 80023aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023ae:	2322      	movs	r3, #34	; 0x22
 80023b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023b4:	2310      	movs	r3, #16
 80023b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ba:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80023bc:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80023c2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80023ca:	6360      	str	r0, [r4, #52]	; 0x34
 80023cc:	4b30      	ldr	r3, [pc, #192]	; (8002490 <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023ce:	d926      	bls.n	800241e <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023d0:	22ff      	movs	r2, #255	; 0xff
 80023d2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80023d4:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023da:	4631      	mov	r1, r6
 80023dc:	4620      	mov	r0, r4
 80023de:	f7ff fd53 	bl	8001e88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e4:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80023e6:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e8:	462a      	mov	r2, r5
 80023ea:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80023ec:	b9fb      	cbnz	r3, 800242e <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ee:	f7ff fe59 	bl	80020a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023f2:	2800      	cmp	r0, #0
 80023f4:	d1d7      	bne.n	80023a6 <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	2120      	movs	r1, #32
 80023fa:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002402:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002406:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002410:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002414:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002418:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800241c:	e7c4      	b.n	80023a8 <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 800241e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002420:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002422:	b292      	uxth	r2, r2
 8002424:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	e7d5      	b.n	80023da <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242e:	f7ff fe5e 	bl	80020ee <I2C_WaitOnRXNEFlagUntilTimeout>
 8002432:	2800      	cmp	r0, #0
 8002434:	d1b7      	bne.n	80023a6 <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002436:	6822      	ldr	r2, [r4, #0]
 8002438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800243a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800243c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800243e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002440:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002442:	3301      	adds	r3, #1
 8002444:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002446:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002448:	3b01      	subs	r3, #1
 800244a:	b29b      	uxth	r3, r3
 800244c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800244e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002450:	3a01      	subs	r2, #1
 8002452:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002454:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002456:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0c2      	beq.n	80023e2 <HAL_I2C_Master_Receive+0x7a>
 800245c:	2a00      	cmp	r2, #0
 800245e:	d1c0      	bne.n	80023e2 <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002460:	9500      	str	r5, [sp, #0]
 8002462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002464:	2180      	movs	r1, #128	; 0x80
 8002466:	4620      	mov	r0, r4
 8002468:	f7ff fd28 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 800246c:	2800      	cmp	r0, #0
 800246e:	d19a      	bne.n	80023a6 <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002470:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	2bff      	cmp	r3, #255	; 0xff
 8002476:	d903      	bls.n	8002480 <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002478:	22ff      	movs	r2, #255	; 0xff
 800247a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800247c:	9000      	str	r0, [sp, #0]
 800247e:	e7aa      	b.n	80023d6 <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 8002480:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002482:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002484:	b292      	uxth	r2, r2
 8002486:	8522      	strh	r2, [r4, #40]	; 0x28
 8002488:	e7cd      	b.n	8002426 <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 800248a:	2002      	movs	r0, #2
 800248c:	e78c      	b.n	80023a8 <HAL_I2C_Master_Receive+0x40>
 800248e:	bf00      	nop
 8002490:	80002400 	.word	0x80002400

08002494 <HAL_I2C_Mem_Write>:
{
 8002494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002498:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800249a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800249e:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a0:	2b20      	cmp	r3, #32
{
 80024a2:	4604      	mov	r4, r0
 80024a4:	460f      	mov	r7, r1
 80024a6:	9203      	str	r2, [sp, #12]
 80024a8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80024ac:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b0:	f040 80a5 	bne.w	80025fe <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 80024b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80024b6:	b113      	cbz	r3, 80024be <HAL_I2C_Mem_Write+0x2a>
 80024b8:	f1ba 0f00 	cmp.w	sl, #0
 80024bc:	d106      	bne.n	80024cc <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024c2:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80024c4:	2001      	movs	r0, #1
}
 80024c6:	b005      	add	sp, #20
 80024c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80024cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	f000 8094 	beq.w	80025fe <HAL_I2C_Mem_Write+0x16a>
 80024d6:	2501      	movs	r5, #1
 80024d8:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80024dc:	f7ff f9f8 	bl	80018d0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024e0:	2319      	movs	r3, #25
 80024e2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80024e4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024e6:	462a      	mov	r2, r5
 80024e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ec:	4620      	mov	r0, r4
 80024ee:	f7ff fce5 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 80024f2:	4681      	mov	r9, r0
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d1e5      	bne.n	80024c4 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024f8:	2321      	movs	r3, #33	; 0x21
 80024fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024fe:	2340      	movs	r3, #64	; 0x40
 8002500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002506:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002508:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800250a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800250c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002510:	9601      	str	r6, [sp, #4]
 8002512:	f8cd 8000 	str.w	r8, [sp]
 8002516:	465b      	mov	r3, fp
 8002518:	9a03      	ldr	r2, [sp, #12]
 800251a:	4639      	mov	r1, r7
 800251c:	4620      	mov	r0, r4
 800251e:	f7ff fd5d 	bl	8001fdc <I2C_RequestMemoryWrite>
 8002522:	b110      	cbz	r0, 800252a <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8002524:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8002528:	e7cc      	b.n	80024c4 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800252a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800252c:	b29b      	uxth	r3, r3
 800252e:	2bff      	cmp	r3, #255	; 0xff
 8002530:	d955      	bls.n	80025de <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002532:	22ff      	movs	r2, #255	; 0xff
 8002534:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002536:	9000      	str	r0, [sp, #0]
 8002538:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800253c:	4639      	mov	r1, r7
 800253e:	4620      	mov	r0, r4
 8002540:	f7ff fca2 	bl	8001e88 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002544:	4632      	mov	r2, r6
 8002546:	4641      	mov	r1, r8
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff fd1f 	bl	8001f8c <I2C_WaitOnTXISFlagUntilTimeout>
 800254e:	2800      	cmp	r0, #0
 8002550:	d1b8      	bne.n	80024c4 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002554:	6822      	ldr	r2, [r4, #0]
 8002556:	f813 1b01 	ldrb.w	r1, [r3], #1
 800255a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800255c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800255e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002560:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002562:	3b01      	subs	r3, #1
 8002564:	b29b      	uxth	r3, r3
 8002566:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002568:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800256a:	3a01      	subs	r2, #1
 800256c:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800256e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002570:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002572:	b1ab      	cbz	r3, 80025a0 <HAL_I2C_Mem_Write+0x10c>
 8002574:	b9a2      	cbnz	r2, 80025a0 <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002576:	9600      	str	r6, [sp, #0]
 8002578:	4643      	mov	r3, r8
 800257a:	2180      	movs	r1, #128	; 0x80
 800257c:	4620      	mov	r0, r4
 800257e:	f7ff fc9d 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 8002582:	2800      	cmp	r0, #0
 8002584:	d19e      	bne.n	80024c4 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002586:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	2bff      	cmp	r3, #255	; 0xff
 800258c:	d92f      	bls.n	80025ee <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800258e:	22ff      	movs	r2, #255	; 0xff
 8002590:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002592:	9000      	str	r0, [sp, #0]
 8002594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002598:	4639      	mov	r1, r7
 800259a:	4620      	mov	r0, r4
 800259c:	f7ff fc74 	bl	8001e88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80025a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1cd      	bne.n	8002544 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a8:	4632      	mov	r2, r6
 80025aa:	4641      	mov	r1, r8
 80025ac:	4620      	mov	r0, r4
 80025ae:	f7ff fd79 	bl	80020a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025b2:	2800      	cmp	r0, #0
 80025b4:	d186      	bne.n	80024c4 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	2120      	movs	r1, #32
 80025ba:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80025c2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80025c6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80025d0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80025d4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025d8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80025dc:	e773      	b.n	80024c6 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80025de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025e0:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80025e2:	b292      	uxth	r2, r2
 80025e4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	e7a6      	b.n	800253c <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 80025ee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025f0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80025f2:	b292      	uxth	r2, r2
 80025f4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	e7cc      	b.n	8002598 <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 80025fe:	2002      	movs	r0, #2
 8002600:	e761      	b.n	80024c6 <HAL_I2C_Mem_Write+0x32>
	...

08002604 <HAL_I2C_Mem_Read>:
{
 8002604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002608:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800260a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800260e:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002610:	2b20      	cmp	r3, #32
{
 8002612:	4604      	mov	r4, r0
 8002614:	460f      	mov	r7, r1
 8002616:	9203      	str	r2, [sp, #12]
 8002618:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 800261c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002620:	f040 80a9 	bne.w	8002776 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8002624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002626:	b113      	cbz	r3, 800262e <HAL_I2C_Mem_Read+0x2a>
 8002628:	f1ba 0f00 	cmp.w	sl, #0
 800262c:	d106      	bne.n	800263c <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800262e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002632:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002634:	2001      	movs	r0, #1
}
 8002636:	b005      	add	sp, #20
 8002638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800263c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002640:	2b01      	cmp	r3, #1
 8002642:	f000 8098 	beq.w	8002776 <HAL_I2C_Mem_Read+0x172>
 8002646:	2501      	movs	r5, #1
 8002648:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800264c:	f7ff f940 	bl	80018d0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002650:	2319      	movs	r3, #25
 8002652:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002654:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002656:	462a      	mov	r2, r5
 8002658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800265c:	4620      	mov	r0, r4
 800265e:	f7ff fc2d 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 8002662:	4681      	mov	r9, r0
 8002664:	2800      	cmp	r0, #0
 8002666:	d1e5      	bne.n	8002634 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002668:	2322      	movs	r3, #34	; 0x22
 800266a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800266e:	2340      	movs	r3, #64	; 0x40
 8002670:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002676:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002678:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800267a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800267c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002680:	9601      	str	r6, [sp, #4]
 8002682:	f8cd 8000 	str.w	r8, [sp]
 8002686:	465b      	mov	r3, fp
 8002688:	9a03      	ldr	r2, [sp, #12]
 800268a:	4639      	mov	r1, r7
 800268c:	4620      	mov	r0, r4
 800268e:	f7ff fcd7 	bl	8002040 <I2C_RequestMemoryRead>
 8002692:	b110      	cbz	r0, 800269a <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8002694:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8002698:	e7cc      	b.n	8002634 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800269a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	2bff      	cmp	r3, #255	; 0xff
 80026a0:	4b36      	ldr	r3, [pc, #216]	; (800277c <HAL_I2C_Mem_Read+0x178>)
 80026a2:	d958      	bls.n	8002756 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026a4:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80026a6:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026a8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80026aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80026ae:	4639      	mov	r1, r7
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7ff fbe9 	bl	8001e88 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80026b6:	9600      	str	r6, [sp, #0]
 80026b8:	4643      	mov	r3, r8
 80026ba:	2200      	movs	r2, #0
 80026bc:	2104      	movs	r1, #4
 80026be:	4620      	mov	r0, r4
 80026c0:	f7ff fbfc 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 80026c4:	2800      	cmp	r0, #0
 80026c6:	d1b5      	bne.n	8002634 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026c8:	6822      	ldr	r2, [r4, #0]
 80026ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ce:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80026d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80026d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80026d4:	3301      	adds	r3, #1
 80026d6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80026d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29b      	uxth	r3, r3
 80026de:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80026e2:	3a01      	subs	r2, #1
 80026e4:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026e6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80026e8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026ea:	b1ab      	cbz	r3, 8002718 <HAL_I2C_Mem_Read+0x114>
 80026ec:	b9a2      	cbnz	r2, 8002718 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ee:	9600      	str	r6, [sp, #0]
 80026f0:	4643      	mov	r3, r8
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff fbe1 	bl	8001ebc <I2C_WaitOnFlagUntilTimeout>
 80026fa:	2800      	cmp	r0, #0
 80026fc:	d19a      	bne.n	8002634 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	2bff      	cmp	r3, #255	; 0xff
 8002704:	d92f      	bls.n	8002766 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002706:	22ff      	movs	r2, #255	; 0xff
 8002708:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800270a:	9000      	str	r0, [sp, #0]
 800270c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002710:	4639      	mov	r1, r7
 8002712:	4620      	mov	r0, r4
 8002714:	f7ff fbb8 	bl	8001e88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002718:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ca      	bne.n	80026b6 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002720:	4632      	mov	r2, r6
 8002722:	4641      	mov	r1, r8
 8002724:	4620      	mov	r0, r4
 8002726:	f7ff fcbd 	bl	80020a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800272a:	2800      	cmp	r0, #0
 800272c:	d182      	bne.n	8002634 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800272e:	6823      	ldr	r3, [r4, #0]
 8002730:	2120      	movs	r1, #32
 8002732:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800273a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800273e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002742:	f022 0201 	bic.w	r2, r2, #1
 8002746:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002748:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800274c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002750:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002754:	e76f      	b.n	8002636 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8002756:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002758:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800275a:	b292      	uxth	r2, r2
 800275c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800275e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	e7a3      	b.n	80026ae <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8002766:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002768:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800276a:	b292      	uxth	r2, r2
 800276c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800276e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	e7cc      	b.n	8002710 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8002776:	2002      	movs	r0, #2
 8002778:	e75d      	b.n	8002636 <HAL_I2C_Mem_Read+0x32>
 800277a:	bf00      	nop
 800277c:	80002400 	.word	0x80002400

08002780 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002780:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	2a20      	cmp	r2, #32
{
 8002788:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800278a:	d11d      	bne.n	80027c8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800278c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002790:	2b01      	cmp	r3, #1
 8002792:	d019      	beq.n	80027c8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002794:	2324      	movs	r3, #36	; 0x24
 8002796:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800279a:	6803      	ldr	r3, [r0, #0]
 800279c:	681c      	ldr	r4, [r3, #0]
 800279e:	f024 0401 	bic.w	r4, r4, #1
 80027a2:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027a4:	681c      	ldr	r4, [r3, #0]
 80027a6:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80027aa:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027ac:	681c      	ldr	r4, [r3, #0]
 80027ae:	4321      	orrs	r1, r4
 80027b0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	f041 0101 	orr.w	r1, r1, #1
 80027b8:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ba:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80027bc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80027c0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2002      	movs	r0, #2
  }
}
 80027ca:	bd10      	pop	{r4, pc}

080027cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027cc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ce:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80027d2:	b2e4      	uxtb	r4, r4
 80027d4:	2c20      	cmp	r4, #32
 80027d6:	d11c      	bne.n	8002812 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027d8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d018      	beq.n	8002812 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027e0:	2324      	movs	r3, #36	; 0x24
 80027e2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e6:	6803      	ldr	r3, [r0, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027f0:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027f2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027f6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027fa:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002804:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002806:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800280a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800280e:	4618      	mov	r0, r3
 8002810:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002812:	2002      	movs	r0, #2
  }
}
 8002814:	bd10      	pop	{r4, pc}

08002816 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800281a:	4604      	mov	r4, r0
{
 800281c:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 800281e:	2800      	cmp	r0, #0
 8002820:	d074      	beq.n	800290c <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002822:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8002826:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800282a:	b91b      	cbnz	r3, 8002834 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800282c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002830:	f002 fd76 	bl	8005320 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002834:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002836:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8002838:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 800283c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8002840:	f001 fdb3 	bl	80043aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8002844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002846:	466e      	mov	r6, sp
 8002848:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800284a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800284c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800284e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002852:	e886 0003 	stmia.w	r6, {r0, r1}
 8002856:	f104 0804 	add.w	r8, r4, #4
 800285a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800285e:	6820      	ldr	r0, [r4, #0]
 8002860:	f001 fd74 	bl	800434c <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002864:	2100      	movs	r1, #0
 8002866:	6820      	ldr	r0, [r4, #0]
 8002868:	f001 fda5 	bl	80043b6 <USB_SetCurrentMode>
 800286c:	2100      	movs	r1, #0
 800286e:	4622      	mov	r2, r4
 8002870:	4623      	mov	r3, r4
 8002872:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002876:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002878:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 800287a:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800287e:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 8002882:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 8002884:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 8002886:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800288a:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 800288e:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002890:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8002892:	6518      	str	r0, [r3, #80]	; 0x50
 8002894:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 8002898:	d1ef      	bne.n	800287a <HAL_PCD_Init+0x64>
 800289a:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800289c:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 800289e:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 80028a2:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 80028a4:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 80028a6:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028aa:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028ae:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028b2:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028b6:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 80028ba:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 80028be:	d1ee      	bne.n	800289e <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80028c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028c2:	466e      	mov	r6, sp
 80028c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80028c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80028ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028ce:	e886 0003 	stmia.w	r6, {r0, r1}
 80028d2:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80028d6:	6820      	ldr	r0, [r4, #0]
 80028d8:	f001 fdae 	bl	8004438 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 80028dc:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80028de:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028e2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d102      	bne.n	80028f2 <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028ec:	4620      	mov	r0, r4
 80028ee:	f000 f80f 	bl	8002910 <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 80028f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d102      	bne.n	80028fe <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 80028f8:	4620      	mov	r0, r4
 80028fa:	f000 f81c 	bl	8002936 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80028fe:	6820      	ldr	r0, [r4, #0]
 8002900:	f001 fe36 	bl	8004570 <USB_DevDisconnect>

  return HAL_OK;
 8002904:	2000      	movs	r0, #0
}
 8002906:	b00a      	add	sp, #40	; 0x28
 8002908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800290c:	2001      	movs	r0, #1
 800290e:	e7fa      	b.n	8002906 <HAL_PCD_Init+0xf0>

08002910 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002910:	6802      	ldr	r2, [r0, #0]
{
 8002912:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8002914:	2101      	movs	r1, #1
 8002916:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800291a:	2000      	movs	r0, #0
 800291c:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002920:	6993      	ldr	r3, [r2, #24]
 8002922:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002926:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002928:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800292a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292e:	f043 0303 	orr.w	r3, r3, #3
 8002932:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8002934:	4770      	bx	lr

08002936 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002936:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 8002938:	2301      	movs	r3, #1
 800293a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 800293e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002944:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 8002946:	2000      	movs	r0, #0
 8002948:	4770      	bx	lr
	...

0800294c <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800294c:	4a02      	ldr	r2, [pc, #8]	; (8002958 <HAL_PWR_EnableBkUpAccess+0xc>)
 800294e:	6813      	ldr	r3, [r2, #0]
 8002950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4770      	bx	lr
 8002958:	40007000 	.word	0x40007000

0800295c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800295c:	4b02      	ldr	r3, [pc, #8]	; (8002968 <HAL_PWREx_GetVoltageRange+0xc>)
 800295e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002960:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40007000 	.word	0x40007000

0800296c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800296c:	4b17      	ldr	r3, [pc, #92]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800296e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002970:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002974:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002978:	d11c      	bne.n	80029b4 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800297a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800297e:	d015      	beq.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8002986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800298c:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 800298e:	6811      	ldr	r1, [r2, #0]
 8002990:	2232      	movs	r2, #50	; 0x32
 8002992:	434a      	muls	r2, r1
 8002994:	490f      	ldr	r1, [pc, #60]	; (80029d4 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8002996:	fbb2 f2f1 	udiv	r2, r2, r1
 800299a:	4619      	mov	r1, r3
 800299c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800299e:	6958      	ldr	r0, [r3, #20]
 80029a0:	0540      	lsls	r0, r0, #21
 80029a2:	d500      	bpl.n	80029a6 <HAL_PWREx_ControlVoltageScaling+0x3a>
 80029a4:	b922      	cbnz	r2, 80029b0 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029a6:	694b      	ldr	r3, [r1, #20]
 80029a8:	055b      	lsls	r3, r3, #21
 80029aa:	d40d      	bmi.n	80029c8 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029ac:	2000      	movs	r0, #0
 80029ae:	4770      	bx	lr
        wait_loop_index--;
 80029b0:	3a01      	subs	r2, #1
 80029b2:	e7f4      	b.n	800299e <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029b4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029b8:	bf1f      	itttt	ne
 80029ba:	681a      	ldrne	r2, [r3, #0]
 80029bc:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80029c0:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 80029c4:	601a      	strne	r2, [r3, #0]
 80029c6:	e7f1      	b.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 80029c8:	2003      	movs	r0, #3
}
 80029ca:	4770      	bx	lr
 80029cc:	40007000 	.word	0x40007000
 80029d0:	20000250 	.word	0x20000250
 80029d4:	000f4240 	.word	0x000f4240

080029d8 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80029d8:	4a02      	ldr	r2, [pc, #8]	; (80029e4 <HAL_PWREx_EnableVddUSB+0xc>)
 80029da:	6853      	ldr	r3, [r2, #4]
 80029dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e0:	6053      	str	r3, [r2, #4]
 80029e2:	4770      	bx	lr
 80029e4:	40007000 	.word	0x40007000

080029e8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80029e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ec:	9d06      	ldr	r5, [sp, #24]
 80029ee:	4604      	mov	r4, r0
 80029f0:	460f      	mov	r7, r1
 80029f2:	4616      	mov	r6, r2
 80029f4:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80029f6:	6821      	ldr	r1, [r4, #0]
 80029f8:	688a      	ldr	r2, [r1, #8]
 80029fa:	423a      	tst	r2, r7
 80029fc:	bf14      	ite	ne
 80029fe:	2201      	movne	r2, #1
 8002a00:	2200      	moveq	r2, #0
 8002a02:	42b2      	cmp	r2, r6
 8002a04:	d102      	bne.n	8002a0c <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002a06:	2000      	movs	r0, #0
}
 8002a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002a0c:	1c6b      	adds	r3, r5, #1
 8002a0e:	d0f3      	beq.n	80029f8 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a10:	f7fe ff5e 	bl	80018d0 <HAL_GetTick>
 8002a14:	eba0 0008 	sub.w	r0, r0, r8
 8002a18:	4285      	cmp	r5, r0
 8002a1a:	d301      	bcc.n	8002a20 <QSPI_WaitFlagStateUntilTimeout+0x38>
 8002a1c:	2d00      	cmp	r5, #0
 8002a1e:	d1ea      	bne.n	80029f6 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002a20:	2304      	movs	r3, #4
 8002a22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002a26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002a2e:	2001      	movs	r0, #1
 8002a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a34 <HAL_QSPI_Init>:
{
 8002a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a36:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7fe ff4a 	bl	80018d0 <HAL_GetTick>
 8002a3c:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8002a3e:	2c00      	cmp	r4, #0
 8002a40:	d049      	beq.n	8002ad6 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 8002a42:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d047      	beq.n	8002ada <HAL_QSPI_Init+0xa6>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002a50:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002a54:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8002a58:	b93a      	cbnz	r2, 8002a6a <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8002a5a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f002 fb48 	bl	80050f4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8002a64:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a68:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002a6a:	6820      	ldr	r0, [r4, #0]
 8002a6c:	68a1      	ldr	r1, [r4, #8]
 8002a6e:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002a72:	3901      	subs	r1, #1
 8002a74:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8002a78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a7c:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002a7e:	2120      	movs	r1, #32
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2200      	movs	r2, #0
 8002a84:	462b      	mov	r3, r5
 8002a86:	4620      	mov	r0, r4
 8002a88:	f7ff ffae 	bl	80029e8 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8002a8c:	b9f0      	cbnz	r0, 8002acc <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002a8e:	6822      	ldr	r2, [r4, #0]
 8002a90:	6865      	ldr	r5, [r4, #4]
 8002a92:	6811      	ldr	r1, [r2, #0]
 8002a94:	68e3      	ldr	r3, [r4, #12]
 8002a96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8002a9a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8002a9e:	f021 0110 	bic.w	r1, r1, #16
 8002aa2:	430b      	orrs	r3, r1
 8002aa4:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002aa6:	69a1      	ldr	r1, [r4, #24]
 8002aa8:	6963      	ldr	r3, [r4, #20]
 8002aaa:	6855      	ldr	r5, [r2, #4]
 8002aac:	430b      	orrs	r3, r1
 8002aae:	6921      	ldr	r1, [r4, #16]
 8002ab0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002ab4:	490a      	ldr	r1, [pc, #40]	; (8002ae0 <HAL_QSPI_Init+0xac>)
 8002ab6:	4029      	ands	r1, r5
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8002abc:	6813      	ldr	r3, [r2, #0]
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8002ac4:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002ac6:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8002ac8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8002acc:	2300      	movs	r3, #0
 8002ace:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8002ad2:	b003      	add	sp, #12
 8002ad4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	e7fb      	b.n	8002ad2 <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8002ada:	2002      	movs	r0, #2
 8002adc:	e7f9      	b.n	8002ad2 <HAL_QSPI_Init+0x9e>
 8002ade:	bf00      	nop
 8002ae0:	ffe0f8fe 	.word	0xffe0f8fe

08002ae4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ae6:	4d1e      	ldr	r5, [pc, #120]	; (8002b60 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002ae8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002aea:	00da      	lsls	r2, r3, #3
{
 8002aec:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002aee:	d518      	bpl.n	8002b22 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002af0:	f7ff ff34 	bl	800295c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002af4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002af8:	d123      	bne.n	8002b42 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002afa:	2c80      	cmp	r4, #128	; 0x80
 8002afc:	d929      	bls.n	8002b52 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002afe:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b00:	bf8c      	ite	hi
 8002b02:	2002      	movhi	r0, #2
 8002b04:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b06:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002b08:	6813      	ldr	r3, [r2, #0]
 8002b0a:	f023 0307 	bic.w	r3, r3, #7
 8002b0e:	4303      	orrs	r3, r0
 8002b10:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b12:	6813      	ldr	r3, [r2, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002b18:	1a18      	subs	r0, r3, r0
 8002b1a:	bf18      	it	ne
 8002b1c:	2001      	movne	r0, #1
 8002b1e:	b003      	add	sp, #12
 8002b20:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b28:	65ab      	str	r3, [r5, #88]	; 0x58
 8002b2a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b30:	9301      	str	r3, [sp, #4]
 8002b32:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002b34:	f7ff ff12 	bl	800295c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b38:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002b40:	e7d8      	b.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002b42:	2c80      	cmp	r4, #128	; 0x80
 8002b44:	d807      	bhi.n	8002b56 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002b46:	d008      	beq.n	8002b5a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002b48:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002b4c:	4258      	negs	r0, r3
 8002b4e:	4158      	adcs	r0, r3
 8002b50:	e7d9      	b.n	8002b06 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b52:	2000      	movs	r0, #0
 8002b54:	e7d7      	b.n	8002b06 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b56:	2003      	movs	r0, #3
 8002b58:	e7d5      	b.n	8002b06 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	e7d3      	b.n	8002b06 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8002b5e:	bf00      	nop
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40022000 	.word	0x40022000

08002b68 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b6a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b6c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b6e:	f012 020c 	ands.w	r2, r2, #12
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x18>
 8002b74:	2a0c      	cmp	r2, #12
 8002b76:	d115      	bne.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b78:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b7c:	2901      	cmp	r1, #1
 8002b7e:	d118      	bne.n	8002bb2 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b80:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002b82:	4820      	ldr	r0, [pc, #128]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b84:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b86:	bf55      	itete	pl
 8002b88:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b8c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b8e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b92:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002b96:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b9a:	b382      	cbz	r2, 8002bfe <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b9c:	2a0c      	cmp	r2, #12
 8002b9e:	d009      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x4c>
 8002ba0:	2000      	movs	r0, #0
  return sysclockfreq;
 8002ba2:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ba4:	2a04      	cmp	r2, #4
 8002ba6:	d029      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x94>
 8002ba8:	2a08      	cmp	r2, #8
 8002baa:	4817      	ldr	r0, [pc, #92]	; (8002c08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bac:	bf18      	it	ne
 8002bae:	2000      	movne	r0, #0
 8002bb0:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bb2:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bb4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bb6:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bb8:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bbc:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 8002bc0:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bc2:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x6c>
 8002bc8:	2903      	cmp	r1, #3
 8002bca:	d012      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bcc:	68d9      	ldr	r1, [r3, #12]
 8002bce:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8002bd2:	e003      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bd4:	68d9      	ldr	r1, [r3, #12]
 8002bd6:	480d      	ldr	r0, [pc, #52]	; (8002c0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bd8:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bdc:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bde:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002be2:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002be6:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002be8:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bea:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8002bec:	fbb0 f0f3 	udiv	r0, r0, r3
 8002bf0:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bf2:	68d9      	ldr	r1, [r3, #12]
 8002bf4:	4804      	ldr	r0, [pc, #16]	; (8002c08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002bf6:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8002bfa:	e7ef      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8002bfc:	4803      	ldr	r0, [pc, #12]	; (8002c0c <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8002bfe:	4770      	bx	lr
 8002c00:	40021000 	.word	0x40021000
 8002c04:	0800ad38 	.word	0x0800ad38
 8002c08:	007a1200 	.word	0x007a1200
 8002c0c:	00f42400 	.word	0x00f42400

08002c10 <HAL_RCC_OscConfig>:
{
 8002c10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002c14:	4605      	mov	r5, r0
 8002c16:	b918      	cbnz	r0, 8002c20 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002c18:	2001      	movs	r0, #1
}
 8002c1a:	b003      	add	sp, #12
 8002c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c20:	4ca5      	ldr	r4, [pc, #660]	; (8002eb8 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c22:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c24:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c26:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c28:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2a:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c2e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c32:	d53c      	bpl.n	8002cae <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c34:	b11e      	cbz	r6, 8002c3e <HAL_RCC_OscConfig+0x2e>
 8002c36:	2e0c      	cmp	r6, #12
 8002c38:	d163      	bne.n	8002d02 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c3a:	2f01      	cmp	r7, #1
 8002c3c:	d161      	bne.n	8002d02 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	0798      	lsls	r0, r3, #30
 8002c42:	d502      	bpl.n	8002c4a <HAL_RCC_OscConfig+0x3a>
 8002c44:	69ab      	ldr	r3, [r5, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0e6      	beq.n	8002c18 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	6a28      	ldr	r0, [r5, #32]
 8002c4e:	0719      	lsls	r1, r3, #28
 8002c50:	bf56      	itet	pl
 8002c52:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002c56:	6823      	ldrmi	r3, [r4, #0]
 8002c58:	091b      	lsrpl	r3, r3, #4
 8002c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c5e:	4283      	cmp	r3, r0
 8002c60:	d23a      	bcs.n	8002cd8 <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c62:	f7ff ff3f 	bl	8002ae4 <RCC_SetFlashLatencyFromMSIRange>
 8002c66:	2800      	cmp	r0, #0
 8002c68:	d1d6      	bne.n	8002c18 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	f043 0308 	orr.w	r3, r3, #8
 8002c70:	6023      	str	r3, [r4, #0]
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	6a2a      	ldr	r2, [r5, #32]
 8002c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c7e:	6863      	ldr	r3, [r4, #4]
 8002c80:	69ea      	ldr	r2, [r5, #28]
 8002c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c8a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c8c:	f7ff ff6c 	bl	8002b68 <HAL_RCC_GetSysClockFreq>
 8002c90:	68a3      	ldr	r3, [r4, #8]
 8002c92:	4a8a      	ldr	r2, [pc, #552]	; (8002ebc <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c98:	5cd3      	ldrb	r3, [r2, r3]
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	40d8      	lsrs	r0, r3
 8002ca0:	4b87      	ldr	r3, [pc, #540]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002ca2:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7fe fde3 	bl	8001870 <HAL_InitTick>
        if(status != HAL_OK)
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d1b5      	bne.n	8002c1a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cae:	682b      	ldr	r3, [r5, #0]
 8002cb0:	07d8      	lsls	r0, r3, #31
 8002cb2:	d45d      	bmi.n	8002d70 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb4:	682b      	ldr	r3, [r5, #0]
 8002cb6:	0799      	lsls	r1, r3, #30
 8002cb8:	f100 809c 	bmi.w	8002df4 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cbc:	682b      	ldr	r3, [r5, #0]
 8002cbe:	0718      	lsls	r0, r3, #28
 8002cc0:	f100 80d0 	bmi.w	8002e64 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc4:	682b      	ldr	r3, [r5, #0]
 8002cc6:	0759      	lsls	r1, r3, #29
 8002cc8:	f100 80fc 	bmi.w	8002ec4 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ccc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 8165 	bne.w	8002f9e <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	e7a0      	b.n	8002c1a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cd8:	6823      	ldr	r3, [r4, #0]
 8002cda:	f043 0308 	orr.w	r3, r3, #8
 8002cde:	6023      	str	r3, [r4, #0]
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce6:	4303      	orrs	r3, r0
 8002ce8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cea:	6863      	ldr	r3, [r4, #4]
 8002cec:	69ea      	ldr	r2, [r5, #28]
 8002cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cf2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002cf6:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf8:	f7ff fef4 	bl	8002ae4 <RCC_SetFlashLatencyFromMSIRange>
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d0c5      	beq.n	8002c8c <HAL_RCC_OscConfig+0x7c>
 8002d00:	e78a      	b.n	8002c18 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d02:	69ab      	ldr	r3, [r5, #24]
 8002d04:	b31b      	cbz	r3, 8002d4e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d0e:	f7fe fddf 	bl	80018d0 <HAL_GetTick>
 8002d12:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	079a      	lsls	r2, r3, #30
 8002d18:	d511      	bpl.n	8002d3e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	f043 0308 	orr.w	r3, r3, #8
 8002d20:	6023      	str	r3, [r4, #0]
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	6a2a      	ldr	r2, [r5, #32]
 8002d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d2e:	6863      	ldr	r3, [r4, #4]
 8002d30:	69ea      	ldr	r2, [r5, #28]
 8002d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d3a:	6063      	str	r3, [r4, #4]
 8002d3c:	e7b7      	b.n	8002cae <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d3e:	f7fe fdc7 	bl	80018d0 <HAL_GetTick>
 8002d42:	eba0 0008 	sub.w	r0, r0, r8
 8002d46:	2802      	cmp	r0, #2
 8002d48:	d9e4      	bls.n	8002d14 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8002d4a:	2003      	movs	r0, #3
 8002d4c:	e765      	b.n	8002c1a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d56:	f7fe fdbb 	bl	80018d0 <HAL_GetTick>
 8002d5a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d5c:	6823      	ldr	r3, [r4, #0]
 8002d5e:	079b      	lsls	r3, r3, #30
 8002d60:	d5a5      	bpl.n	8002cae <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d62:	f7fe fdb5 	bl	80018d0 <HAL_GetTick>
 8002d66:	eba0 0008 	sub.w	r0, r0, r8
 8002d6a:	2802      	cmp	r0, #2
 8002d6c:	d9f6      	bls.n	8002d5c <HAL_RCC_OscConfig+0x14c>
 8002d6e:	e7ec      	b.n	8002d4a <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d70:	2e08      	cmp	r6, #8
 8002d72:	d003      	beq.n	8002d7c <HAL_RCC_OscConfig+0x16c>
 8002d74:	2e0c      	cmp	r6, #12
 8002d76:	d108      	bne.n	8002d8a <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8002d78:	2f03      	cmp	r7, #3
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7c:	6823      	ldr	r3, [r4, #0]
 8002d7e:	039a      	lsls	r2, r3, #14
 8002d80:	d598      	bpl.n	8002cb4 <HAL_RCC_OscConfig+0xa4>
 8002d82:	686b      	ldr	r3, [r5, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d195      	bne.n	8002cb4 <HAL_RCC_OscConfig+0xa4>
 8002d88:	e746      	b.n	8002c18 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d8a:	686b      	ldr	r3, [r5, #4]
 8002d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d90:	d110      	bne.n	8002db4 <HAL_RCC_OscConfig+0x1a4>
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d98:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d9a:	f7fe fd99 	bl	80018d0 <HAL_GetTick>
 8002d9e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	039b      	lsls	r3, r3, #14
 8002da4:	d486      	bmi.n	8002cb4 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da6:	f7fe fd93 	bl	80018d0 <HAL_GetTick>
 8002daa:	eba0 0008 	sub.w	r0, r0, r8
 8002dae:	2864      	cmp	r0, #100	; 0x64
 8002db0:	d9f6      	bls.n	8002da0 <HAL_RCC_OscConfig+0x190>
 8002db2:	e7ca      	b.n	8002d4a <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db8:	d104      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x1b4>
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc0:	6023      	str	r3, [r4, #0]
 8002dc2:	e7e6      	b.n	8002d92 <HAL_RCC_OscConfig+0x182>
 8002dc4:	6822      	ldr	r2, [r4, #0]
 8002dc6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002dca:	6022      	str	r2, [r4, #0]
 8002dcc:	6822      	ldr	r2, [r4, #0]
 8002dce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dd2:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fd7a 	bl	80018d0 <HAL_GetTick>
 8002ddc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	0398      	lsls	r0, r3, #14
 8002de2:	f57f af67 	bpl.w	8002cb4 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de6:	f7fe fd73 	bl	80018d0 <HAL_GetTick>
 8002dea:	eba0 0008 	sub.w	r0, r0, r8
 8002dee:	2864      	cmp	r0, #100	; 0x64
 8002df0:	d9f5      	bls.n	8002dde <HAL_RCC_OscConfig+0x1ce>
 8002df2:	e7aa      	b.n	8002d4a <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002df4:	2e04      	cmp	r6, #4
 8002df6:	d003      	beq.n	8002e00 <HAL_RCC_OscConfig+0x1f0>
 8002df8:	2e0c      	cmp	r6, #12
 8002dfa:	d110      	bne.n	8002e1e <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8002dfc:	2f02      	cmp	r7, #2
 8002dfe:	d10e      	bne.n	8002e1e <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	0559      	lsls	r1, r3, #21
 8002e04:	d503      	bpl.n	8002e0e <HAL_RCC_OscConfig+0x1fe>
 8002e06:	68eb      	ldr	r3, [r5, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f43f af05 	beq.w	8002c18 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0e:	6863      	ldr	r3, [r4, #4]
 8002e10:	692a      	ldr	r2, [r5, #16]
 8002e12:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002e16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e1a:	6063      	str	r3, [r4, #4]
 8002e1c:	e74e      	b.n	8002cbc <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e1e:	68eb      	ldr	r3, [r5, #12]
 8002e20:	b17b      	cbz	r3, 8002e42 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e28:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e2a:	f7fe fd51 	bl	80018d0 <HAL_GetTick>
 8002e2e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	055a      	lsls	r2, r3, #21
 8002e34:	d4eb      	bmi.n	8002e0e <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e36:	f7fe fd4b 	bl	80018d0 <HAL_GetTick>
 8002e3a:	1bc0      	subs	r0, r0, r7
 8002e3c:	2802      	cmp	r0, #2
 8002e3e:	d9f7      	bls.n	8002e30 <HAL_RCC_OscConfig+0x220>
 8002e40:	e783      	b.n	8002d4a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e48:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e4a:	f7fe fd41 	bl	80018d0 <HAL_GetTick>
 8002e4e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	055b      	lsls	r3, r3, #21
 8002e54:	f57f af32 	bpl.w	8002cbc <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e58:	f7fe fd3a 	bl	80018d0 <HAL_GetTick>
 8002e5c:	1bc0      	subs	r0, r0, r7
 8002e5e:	2802      	cmp	r0, #2
 8002e60:	d9f6      	bls.n	8002e50 <HAL_RCC_OscConfig+0x240>
 8002e62:	e772      	b.n	8002d4a <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e64:	696b      	ldr	r3, [r5, #20]
 8002e66:	b19b      	cbz	r3, 8002e90 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8002e68:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002e74:	f7fe fd2c 	bl	80018d0 <HAL_GetTick>
 8002e78:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e7a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002e7e:	079a      	lsls	r2, r3, #30
 8002e80:	f53f af20 	bmi.w	8002cc4 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e84:	f7fe fd24 	bl	80018d0 <HAL_GetTick>
 8002e88:	1bc0      	subs	r0, r0, r7
 8002e8a:	2802      	cmp	r0, #2
 8002e8c:	d9f5      	bls.n	8002e7a <HAL_RCC_OscConfig+0x26a>
 8002e8e:	e75c      	b.n	8002d4a <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8002e90:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002e9c:	f7fe fd18 	bl	80018d0 <HAL_GetTick>
 8002ea0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ea2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002ea6:	079b      	lsls	r3, r3, #30
 8002ea8:	f57f af0c 	bpl.w	8002cc4 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fe fd10 	bl	80018d0 <HAL_GetTick>
 8002eb0:	1bc0      	subs	r0, r0, r7
 8002eb2:	2802      	cmp	r0, #2
 8002eb4:	d9f5      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x292>
 8002eb6:	e748      	b.n	8002d4a <HAL_RCC_OscConfig+0x13a>
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	0800ad20 	.word	0x0800ad20
 8002ec0:	20000250 	.word	0x20000250
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ec4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ec6:	00d8      	lsls	r0, r3, #3
 8002ec8:	d429      	bmi.n	8002f1e <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	65a3      	str	r3, [r4, #88]	; 0x58
 8002ed2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002edc:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee0:	4f5d      	ldr	r7, [pc, #372]	; (8003058 <HAL_RCC_OscConfig+0x448>)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	05d9      	lsls	r1, r3, #23
 8002ee6:	d51d      	bpl.n	8002f24 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee8:	68ab      	ldr	r3, [r5, #8]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d12b      	bne.n	8002f46 <HAL_RCC_OscConfig+0x336>
 8002eee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002efa:	f7fe fce9 	bl	80018d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002f02:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f04:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002f08:	079b      	lsls	r3, r3, #30
 8002f0a:	d542      	bpl.n	8002f92 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8002f0c:	f1b8 0f00 	cmp.w	r8, #0
 8002f10:	f43f aedc 	beq.w	8002ccc <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	65a3      	str	r3, [r4, #88]	; 0x58
 8002f1c:	e6d6      	b.n	8002ccc <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8002f1e:	f04f 0800 	mov.w	r8, #0
 8002f22:	e7dd      	b.n	8002ee0 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002f2c:	f7fe fcd0 	bl	80018d0 <HAL_GetTick>
 8002f30:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	05da      	lsls	r2, r3, #23
 8002f36:	d4d7      	bmi.n	8002ee8 <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f38:	f7fe fcca 	bl	80018d0 <HAL_GetTick>
 8002f3c:	eba0 0009 	sub.w	r0, r0, r9
 8002f40:	2802      	cmp	r0, #2
 8002f42:	d9f6      	bls.n	8002f32 <HAL_RCC_OscConfig+0x322>
 8002f44:	e701      	b.n	8002d4a <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f46:	2b05      	cmp	r3, #5
 8002f48:	d106      	bne.n	8002f58 <HAL_RCC_OscConfig+0x348>
 8002f4a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002f56:	e7ca      	b.n	8002eee <HAL_RCC_OscConfig+0x2de>
 8002f58:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002f64:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002f68:	f022 0204 	bic.w	r2, r2, #4
 8002f6c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1c2      	bne.n	8002efa <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8002f74:	f7fe fcac 	bl	80018d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f78:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002f7c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f7e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002f82:	0798      	lsls	r0, r3, #30
 8002f84:	d5c2      	bpl.n	8002f0c <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f7fe fca3 	bl	80018d0 <HAL_GetTick>
 8002f8a:	1bc0      	subs	r0, r0, r7
 8002f8c:	4548      	cmp	r0, r9
 8002f8e:	d9f6      	bls.n	8002f7e <HAL_RCC_OscConfig+0x36e>
 8002f90:	e6db      	b.n	8002d4a <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7fe fc9d 	bl	80018d0 <HAL_GetTick>
 8002f96:	1bc0      	subs	r0, r0, r7
 8002f98:	4548      	cmp	r0, r9
 8002f9a:	d9b3      	bls.n	8002f04 <HAL_RCC_OscConfig+0x2f4>
 8002f9c:	e6d5      	b.n	8002d4a <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f9e:	2e0c      	cmp	r6, #12
 8002fa0:	f43f ae3a 	beq.w	8002c18 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fa4:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fac:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fae:	d137      	bne.n	8003020 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fc8e 	bl	80018d0 <HAL_GetTick>
 8002fb4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	0199      	lsls	r1, r3, #6
 8002fba:	d42b      	bmi.n	8003014 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fbc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002fbe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002fc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002fc4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002fc6:	3a01      	subs	r2, #1
 8002fc8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002fcc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002fce:	0912      	lsrs	r2, r2, #4
 8002fd0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002fd4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002fd6:	0852      	lsrs	r2, r2, #1
 8002fd8:	3a01      	subs	r2, #1
 8002fda:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002fde:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002fe0:	0852      	lsrs	r2, r2, #1
 8002fe2:	3a01      	subs	r2, #1
 8002fe4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002fe8:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff0:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ff2:	68e3      	ldr	r3, [r4, #12]
 8002ff4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff8:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fc69 	bl	80018d0 <HAL_GetTick>
 8002ffe:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	019a      	lsls	r2, r3, #6
 8003004:	f53f ae66 	bmi.w	8002cd4 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003008:	f7fe fc62 	bl	80018d0 <HAL_GetTick>
 800300c:	1b40      	subs	r0, r0, r5
 800300e:	2802      	cmp	r0, #2
 8003010:	d9f6      	bls.n	8003000 <HAL_RCC_OscConfig+0x3f0>
 8003012:	e69a      	b.n	8002d4a <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fe fc5c 	bl	80018d0 <HAL_GetTick>
 8003018:	1b80      	subs	r0, r0, r6
 800301a:	2802      	cmp	r0, #2
 800301c:	d9cb      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x3a6>
 800301e:	e694      	b.n	8002d4a <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003026:	bf02      	ittt	eq
 8003028:	68e3      	ldreq	r3, [r4, #12]
 800302a:	f023 0303 	biceq.w	r3, r3, #3
 800302e:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003030:	68e3      	ldr	r3, [r4, #12]
 8003032:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800303c:	f7fe fc48 	bl	80018d0 <HAL_GetTick>
 8003040:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	019b      	lsls	r3, r3, #6
 8003046:	f57f ae45 	bpl.w	8002cd4 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304a:	f7fe fc41 	bl	80018d0 <HAL_GetTick>
 800304e:	1b40      	subs	r0, r0, r5
 8003050:	2802      	cmp	r0, #2
 8003052:	d9f6      	bls.n	8003042 <HAL_RCC_OscConfig+0x432>
 8003054:	e679      	b.n	8002d4a <HAL_RCC_OscConfig+0x13a>
 8003056:	bf00      	nop
 8003058:	40007000 	.word	0x40007000

0800305c <HAL_RCC_ClockConfig>:
{
 800305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003060:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8003062:	4604      	mov	r4, r0
 8003064:	b910      	cbnz	r0, 800306c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003066:	2001      	movs	r0, #1
 8003068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800306c:	4a40      	ldr	r2, [pc, #256]	; (8003170 <HAL_RCC_ClockConfig+0x114>)
 800306e:	6813      	ldr	r3, [r2, #0]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	428b      	cmp	r3, r1
 8003076:	d329      	bcc.n	80030cc <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	07d9      	lsls	r1, r3, #31
 800307c:	d431      	bmi.n	80030e2 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800307e:	6821      	ldr	r1, [r4, #0]
 8003080:	078a      	lsls	r2, r1, #30
 8003082:	d45b      	bmi.n	800313c <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003084:	4a3a      	ldr	r2, [pc, #232]	; (8003170 <HAL_RCC_ClockConfig+0x114>)
 8003086:	6813      	ldr	r3, [r2, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	429e      	cmp	r6, r3
 800308e:	d35d      	bcc.n	800314c <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	f011 0f04 	tst.w	r1, #4
 8003094:	4d37      	ldr	r5, [pc, #220]	; (8003174 <HAL_RCC_ClockConfig+0x118>)
 8003096:	d164      	bne.n	8003162 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003098:	070b      	lsls	r3, r1, #28
 800309a:	d506      	bpl.n	80030aa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800309c:	68ab      	ldr	r3, [r5, #8]
 800309e:	6922      	ldr	r2, [r4, #16]
 80030a0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80030a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80030a8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030aa:	f7ff fd5d 	bl	8002b68 <HAL_RCC_GetSysClockFreq>
 80030ae:	68ab      	ldr	r3, [r5, #8]
 80030b0:	4a31      	ldr	r2, [pc, #196]	; (8003178 <HAL_RCC_ClockConfig+0x11c>)
 80030b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80030b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030ba:	5cd3      	ldrb	r3, [r2, r3]
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	40d8      	lsrs	r0, r3
 80030c2:	4b2e      	ldr	r3, [pc, #184]	; (800317c <HAL_RCC_ClockConfig+0x120>)
 80030c4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fe bbd2 	b.w	8001870 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030cc:	6813      	ldr	r3, [r2, #0]
 80030ce:	f023 0307 	bic.w	r3, r3, #7
 80030d2:	430b      	orrs	r3, r1
 80030d4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	6813      	ldr	r3, [r2, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	4299      	cmp	r1, r3
 80030de:	d1c2      	bne.n	8003066 <HAL_RCC_ClockConfig+0xa>
 80030e0:	e7ca      	b.n	8003078 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e2:	6862      	ldr	r2, [r4, #4]
 80030e4:	4d23      	ldr	r5, [pc, #140]	; (8003174 <HAL_RCC_ClockConfig+0x118>)
 80030e6:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030e8:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ea:	d11b      	bne.n	8003124 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f0:	d0b9      	beq.n	8003066 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030f2:	68ab      	ldr	r3, [r5, #8]
 80030f4:	f023 0303 	bic.w	r3, r3, #3
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80030fc:	f7fe fbe8 	bl	80018d0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003100:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003104:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	68ab      	ldr	r3, [r5, #8]
 8003108:	6862      	ldr	r2, [r4, #4]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003112:	d0b4      	beq.n	800307e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003114:	f7fe fbdc 	bl	80018d0 <HAL_GetTick>
 8003118:	1bc0      	subs	r0, r0, r7
 800311a:	4540      	cmp	r0, r8
 800311c:	d9f3      	bls.n	8003106 <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 800311e:	2003      	movs	r0, #3
}
 8003120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003124:	2a02      	cmp	r2, #2
 8003126:	d102      	bne.n	800312e <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003128:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800312c:	e7e0      	b.n	80030f0 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800312e:	b912      	cbnz	r2, 8003136 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003130:	f013 0f02 	tst.w	r3, #2
 8003134:	e7dc      	b.n	80030f0 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003136:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800313a:	e7d9      	b.n	80030f0 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313c:	4a0d      	ldr	r2, [pc, #52]	; (8003174 <HAL_RCC_ClockConfig+0x118>)
 800313e:	68a0      	ldr	r0, [r4, #8]
 8003140:	6893      	ldr	r3, [r2, #8]
 8003142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003146:	4303      	orrs	r3, r0
 8003148:	6093      	str	r3, [r2, #8]
 800314a:	e79b      	b.n	8003084 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314c:	6813      	ldr	r3, [r2, #0]
 800314e:	f023 0307 	bic.w	r3, r3, #7
 8003152:	4333      	orrs	r3, r6
 8003154:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	6813      	ldr	r3, [r2, #0]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	429e      	cmp	r6, r3
 800315e:	d182      	bne.n	8003066 <HAL_RCC_ClockConfig+0xa>
 8003160:	e796      	b.n	8003090 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003162:	68ab      	ldr	r3, [r5, #8]
 8003164:	68e2      	ldr	r2, [r4, #12]
 8003166:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800316a:	4313      	orrs	r3, r2
 800316c:	60ab      	str	r3, [r5, #8]
 800316e:	e793      	b.n	8003098 <HAL_RCC_ClockConfig+0x3c>
 8003170:	40022000 	.word	0x40022000
 8003174:	40021000 	.word	0x40021000
 8003178:	0800ad20 	.word	0x0800ad20
 800317c:	20000250 	.word	0x20000250

08003180 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003180:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003182:	4a06      	ldr	r2, [pc, #24]	; (800319c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800318a:	5cd3      	ldrb	r3, [r2, r3]
 800318c:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800318e:	6810      	ldr	r0, [r2, #0]
 8003190:	f003 031f 	and.w	r3, r3, #31
}
 8003194:	40d8      	lsrs	r0, r3
 8003196:	4770      	bx	lr
 8003198:	40021000 	.word	0x40021000
 800319c:	0800ad30 	.word	0x0800ad30
 80031a0:	20000250 	.word	0x20000250

080031a4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80031a6:	4a06      	ldr	r2, [pc, #24]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80031ae:	5cd3      	ldrb	r3, [r2, r3]
 80031b0:	4a04      	ldr	r2, [pc, #16]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b2:	6810      	ldr	r0, [r2, #0]
 80031b4:	f003 031f 	and.w	r3, r3, #31
}
 80031b8:	40d8      	lsrs	r0, r3
 80031ba:	4770      	bx	lr
 80031bc:	40021000 	.word	0x40021000
 80031c0:	0800ad30 	.word	0x0800ad30
 80031c4:	20000250 	.word	0x20000250

080031c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031ca:	4b45      	ldr	r3, [pc, #276]	; (80032e0 <RCCEx_PLLSAI1_Config+0x118>)
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	f012 0f03 	tst.w	r2, #3
{
 80031d2:	4605      	mov	r5, r0
 80031d4:	460e      	mov	r6, r1
 80031d6:	461c      	mov	r4, r3
 80031d8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031da:	d02a      	beq.n	8003232 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	f002 0203 	and.w	r2, r2, #3
 80031e2:	4282      	cmp	r2, r0
 80031e4:	d13c      	bne.n	8003260 <RCCEx_PLLSAI1_Config+0x98>
       ||
 80031e6:	2a00      	cmp	r2, #0
 80031e8:	d03a      	beq.n	8003260 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031ea:	68db      	ldr	r3, [r3, #12]
       ||
 80031ec:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031ee:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80031f2:	3301      	adds	r3, #1
       ||
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d133      	bne.n	8003260 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031f8:	6823      	ldr	r3, [r4, #0]
 80031fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031fe:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003200:	f7fe fb66 	bl	80018d0 <HAL_GetTick>
 8003204:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	011a      	lsls	r2, r3, #4
 800320a:	d432      	bmi.n	8003272 <RCCEx_PLLSAI1_Config+0xaa>
 800320c:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800320e:	2e00      	cmp	r6, #0
 8003210:	d036      	beq.n	8003280 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003212:	2e01      	cmp	r6, #1
 8003214:	d150      	bne.n	80032b8 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003216:	6922      	ldr	r2, [r4, #16]
 8003218:	6928      	ldr	r0, [r5, #16]
 800321a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800321e:	0840      	lsrs	r0, r0, #1
 8003220:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003224:	3801      	subs	r0, #1
 8003226:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800322a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800322e:	6122      	str	r2, [r4, #16]
 8003230:	e032      	b.n	8003298 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8003232:	2802      	cmp	r0, #2
 8003234:	d010      	beq.n	8003258 <RCCEx_PLLSAI1_Config+0x90>
 8003236:	2803      	cmp	r0, #3
 8003238:	d014      	beq.n	8003264 <RCCEx_PLLSAI1_Config+0x9c>
 800323a:	2801      	cmp	r0, #1
 800323c:	d110      	bne.n	8003260 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	079f      	lsls	r7, r3, #30
 8003242:	d538      	bpl.n	80032b6 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003244:	68e3      	ldr	r3, [r4, #12]
 8003246:	686a      	ldr	r2, [r5, #4]
 8003248:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800324c:	3a01      	subs	r2, #1
 800324e:	4318      	orrs	r0, r3
 8003250:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8003254:	60e0      	str	r0, [r4, #12]
 8003256:	e7cf      	b.n	80031f8 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800325e:	d1f1      	bne.n	8003244 <RCCEx_PLLSAI1_Config+0x7c>
 8003260:	2001      	movs	r0, #1
 8003262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	0391      	lsls	r1, r2, #14
 8003268:	d4ec      	bmi.n	8003244 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003270:	e7f5      	b.n	800325e <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003272:	f7fe fb2d 	bl	80018d0 <HAL_GetTick>
 8003276:	1bc0      	subs	r0, r0, r7
 8003278:	2802      	cmp	r0, #2
 800327a:	d9c4      	bls.n	8003206 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800327c:	2003      	movs	r0, #3
 800327e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003280:	6921      	ldr	r1, [r4, #16]
 8003282:	68eb      	ldr	r3, [r5, #12]
 8003284:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8003288:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800328c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8003296:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800329e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fe fb16 	bl	80018d0 <HAL_GetTick>
 80032a4:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	d513      	bpl.n	80032d4 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032ac:	6923      	ldr	r3, [r4, #16]
 80032ae:	69aa      	ldr	r2, [r5, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	6123      	str	r3, [r4, #16]
 80032b4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80032b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032b8:	6923      	ldr	r3, [r4, #16]
 80032ba:	6968      	ldr	r0, [r5, #20]
 80032bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032c0:	0840      	lsrs	r0, r0, #1
 80032c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032c6:	3801      	subs	r0, #1
 80032c8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80032cc:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80032d0:	6123      	str	r3, [r4, #16]
 80032d2:	e7e1      	b.n	8003298 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032d4:	f7fe fafc 	bl	80018d0 <HAL_GetTick>
 80032d8:	1b80      	subs	r0, r0, r6
 80032da:	2802      	cmp	r0, #2
 80032dc:	d9e3      	bls.n	80032a6 <RCCEx_PLLSAI1_Config+0xde>
 80032de:	e7cd      	b.n	800327c <RCCEx_PLLSAI1_Config+0xb4>
 80032e0:	40021000 	.word	0x40021000

080032e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032e6:	4b3d      	ldr	r3, [pc, #244]	; (80033dc <RCCEx_PLLSAI2_Config+0xf8>)
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	f012 0f03 	tst.w	r2, #3
{
 80032ee:	4605      	mov	r5, r0
 80032f0:	460e      	mov	r6, r1
 80032f2:	461c      	mov	r4, r3
 80032f4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032f6:	d028      	beq.n	800334a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	f002 0203 	and.w	r2, r2, #3
 80032fe:	4282      	cmp	r2, r0
 8003300:	d13a      	bne.n	8003378 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8003302:	2a00      	cmp	r2, #0
 8003304:	d038      	beq.n	8003378 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003306:	68db      	ldr	r3, [r3, #12]
       ||
 8003308:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800330a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800330e:	3301      	adds	r3, #1
       ||
 8003310:	4293      	cmp	r3, r2
 8003312:	d131      	bne.n	8003378 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800331c:	f7fe fad8 	bl	80018d0 <HAL_GetTick>
 8003320:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	009a      	lsls	r2, r3, #2
 8003326:	d430      	bmi.n	800338a <RCCEx_PLLSAI2_Config+0xa6>
 8003328:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800332a:	2e00      	cmp	r6, #0
 800332c:	d034      	beq.n	8003398 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800332e:	6963      	ldr	r3, [r4, #20]
 8003330:	6929      	ldr	r1, [r5, #16]
 8003332:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003336:	0849      	lsrs	r1, r1, #1
 8003338:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800333c:	3901      	subs	r1, #1
 800333e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003342:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8003346:	6163      	str	r3, [r4, #20]
 8003348:	e032      	b.n	80033b0 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800334a:	2802      	cmp	r0, #2
 800334c:	d010      	beq.n	8003370 <RCCEx_PLLSAI2_Config+0x8c>
 800334e:	2803      	cmp	r0, #3
 8003350:	d014      	beq.n	800337c <RCCEx_PLLSAI2_Config+0x98>
 8003352:	2801      	cmp	r0, #1
 8003354:	d110      	bne.n	8003378 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	079f      	lsls	r7, r3, #30
 800335a:	d538      	bpl.n	80033ce <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800335c:	68e3      	ldr	r3, [r4, #12]
 800335e:	686a      	ldr	r2, [r5, #4]
 8003360:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8003364:	3a01      	subs	r2, #1
 8003366:	4318      	orrs	r0, r3
 8003368:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800336c:	60e0      	str	r0, [r4, #12]
 800336e:	e7d1      	b.n	8003314 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003376:	d1f1      	bne.n	800335c <RCCEx_PLLSAI2_Config+0x78>
 8003378:	2001      	movs	r0, #1
 800337a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	0391      	lsls	r1, r2, #14
 8003380:	d4ec      	bmi.n	800335c <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003388:	e7f5      	b.n	8003376 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800338a:	f7fe faa1 	bl	80018d0 <HAL_GetTick>
 800338e:	1bc0      	subs	r0, r0, r7
 8003390:	2802      	cmp	r0, #2
 8003392:	d9c6      	bls.n	8003322 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8003394:	2003      	movs	r0, #3
 8003396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003398:	6962      	ldr	r2, [r4, #20]
 800339a:	68eb      	ldr	r3, [r5, #12]
 800339c:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80033a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033a4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 80033ae:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b6:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fe fa8a 	bl	80018d0 <HAL_GetTick>
 80033bc:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	d505      	bpl.n	80033d0 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033c4:	6963      	ldr	r3, [r4, #20]
 80033c6:	696a      	ldr	r2, [r5, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	6163      	str	r3, [r4, #20]
 80033cc:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80033ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033d0:	f7fe fa7e 	bl	80018d0 <HAL_GetTick>
 80033d4:	1b80      	subs	r0, r0, r6
 80033d6:	2802      	cmp	r0, #2
 80033d8:	d9f1      	bls.n	80033be <RCCEx_PLLSAI2_Config+0xda>
 80033da:	e7db      	b.n	8003394 <RCCEx_PLLSAI2_Config+0xb0>
 80033dc:	40021000 	.word	0x40021000

080033e0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80033e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033e4:	6806      	ldr	r6, [r0, #0]
 80033e6:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80033ea:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033ec:	d024      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80033ee:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80033f0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80033f4:	d02c      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80033f6:	d802      	bhi.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80033f8:	b1c1      	cbz	r1, 800342c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80033fa:	2601      	movs	r6, #1
 80033fc:	e01c      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80033fe:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003402:	d00d      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003404:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8003408:	d1f7      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800340a:	4a4d      	ldr	r2, [pc, #308]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800340e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003412:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003416:	430b      	orrs	r3, r1
 8003418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800341c:	2600      	movs	r6, #0
 800341e:	e00b      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003420:	4a47      	ldr	r2, [pc, #284]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003422:	68d3      	ldr	r3, [r2, #12]
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	60d3      	str	r3, [r2, #12]
      break;
 800342a:	e7ee      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800342c:	3004      	adds	r0, #4
 800342e:	f7ff fecb 	bl	80031c8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003432:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003434:	2800      	cmp	r0, #0
 8003436:	d0e8      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	04d8      	lsls	r0, r3, #19
 800343c:	d506      	bpl.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800343e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003440:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8003444:	d074      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003446:	d808      	bhi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003448:	b1a9      	cbz	r1, 8003476 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800344a:	2601      	movs	r6, #1
 800344c:	4635      	mov	r5, r6
 800344e:	e021      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003450:	2100      	movs	r1, #0
 8003452:	3020      	adds	r0, #32
 8003454:	f7ff ff46 	bl	80032e4 <RCCEx_PLLSAI2_Config>
 8003458:	e7eb      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800345a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800345e:	d004      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8003460:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8003464:	d1f1      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003466:	4635      	mov	r5, r6
 8003468:	e009      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800346a:	4a35      	ldr	r2, [pc, #212]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346c:	68d3      	ldr	r3, [r2, #12]
 800346e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003472:	60d3      	str	r3, [r2, #12]
 8003474:	e7f7      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003476:	1d20      	adds	r0, r4, #4
 8003478:	f7ff fea6 	bl	80031c8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800347c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800347e:	2d00      	cmp	r5, #0
 8003480:	d15c      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003482:	4a2f      	ldr	r2, [pc, #188]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003484:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003486:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800348a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800348e:	430b      	orrs	r3, r1
 8003490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	0399      	lsls	r1, r3, #14
 8003498:	f140 814f 	bpl.w	800373a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800349c:	4f28      	ldr	r7, [pc, #160]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800349e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034a0:	00da      	lsls	r2, r3, #3
 80034a2:	f140 8176 	bpl.w	8003792 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 80034a6:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034aa:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8003544 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80034ae:	f8d9 3000 	ldr.w	r3, [r9]
 80034b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b6:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80034ba:	f7fe fa09 	bl	80018d0 <HAL_GetTick>
 80034be:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034c0:	f8d9 3000 	ldr.w	r3, [r9]
 80034c4:	05db      	lsls	r3, r3, #23
 80034c6:	d53f      	bpl.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 80034c8:	2d00      	cmp	r5, #0
 80034ca:	d144      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034d0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80034d4:	d015      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x122>
 80034d6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80034da:	4293      	cmp	r3, r2
 80034dc:	d011      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80034e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80034e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80034ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034ee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80034fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80034fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003502:	07d8      	lsls	r0, r3, #31
 8003504:	d509      	bpl.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8003506:	f7fe f9e3 	bl	80018d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800350e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003510:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003514:	0799      	lsls	r1, r3, #30
 8003516:	f140 8109 	bpl.w	800372c <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800351a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800351e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800352c:	4635      	mov	r5, r6
 800352e:	e012      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003530:	2100      	movs	r1, #0
 8003532:	f104 0020 	add.w	r0, r4, #32
 8003536:	f7ff fed5 	bl	80032e4 <RCCEx_PLLSAI2_Config>
 800353a:	e79f      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800353c:	462e      	mov	r6, r5
 800353e:	e7a9      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8003540:	40021000 	.word	0x40021000
 8003544:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003548:	f7fe f9c2 	bl	80018d0 <HAL_GetTick>
 800354c:	eba0 000a 	sub.w	r0, r0, sl
 8003550:	2802      	cmp	r0, #2
 8003552:	d9b5      	bls.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8003554:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8003556:	f1b8 0f00 	cmp.w	r8, #0
 800355a:	d003      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 800355c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800355e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003562:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	07da      	lsls	r2, r3, #31
 8003568:	d508      	bpl.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800356a:	4990      	ldr	r1, [pc, #576]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800356c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800356e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003572:	f022 0203 	bic.w	r2, r2, #3
 8003576:	4302      	orrs	r2, r0
 8003578:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800357c:	079f      	lsls	r7, r3, #30
 800357e:	d508      	bpl.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003580:	498a      	ldr	r1, [pc, #552]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003582:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003584:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003588:	f022 020c 	bic.w	r2, r2, #12
 800358c:	4302      	orrs	r2, r0
 800358e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003592:	075e      	lsls	r6, r3, #29
 8003594:	d508      	bpl.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003596:	4985      	ldr	r1, [pc, #532]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003598:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800359a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800359e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80035a2:	4302      	orrs	r2, r0
 80035a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035a8:	0718      	lsls	r0, r3, #28
 80035aa:	d508      	bpl.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035ac:	497f      	ldr	r1, [pc, #508]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80035ae:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80035b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80035b4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80035b8:	4302      	orrs	r2, r0
 80035ba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035be:	06d9      	lsls	r1, r3, #27
 80035c0:	d508      	bpl.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035c2:	497a      	ldr	r1, [pc, #488]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80035c4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80035c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80035ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80035ce:	4302      	orrs	r2, r0
 80035d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035d4:	069a      	lsls	r2, r3, #26
 80035d6:	d508      	bpl.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035d8:	4974      	ldr	r1, [pc, #464]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80035da:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80035dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80035e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80035e4:	4302      	orrs	r2, r0
 80035e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ea:	059f      	lsls	r7, r3, #22
 80035ec:	d508      	bpl.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035ee:	496f      	ldr	r1, [pc, #444]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80035f0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80035f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80035f6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80035fa:	4302      	orrs	r2, r0
 80035fc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003600:	055e      	lsls	r6, r3, #21
 8003602:	d508      	bpl.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003604:	4969      	ldr	r1, [pc, #420]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003606:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003608:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800360c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003610:	4302      	orrs	r2, r0
 8003612:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003616:	0658      	lsls	r0, r3, #25
 8003618:	d508      	bpl.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800361a:	4964      	ldr	r1, [pc, #400]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800361c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800361e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003622:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003626:	4302      	orrs	r2, r0
 8003628:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800362c:	0619      	lsls	r1, r3, #24
 800362e:	d508      	bpl.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003630:	495e      	ldr	r1, [pc, #376]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003632:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003634:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003638:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800363c:	4302      	orrs	r2, r0
 800363e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003642:	05da      	lsls	r2, r3, #23
 8003644:	d508      	bpl.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003646:	4959      	ldr	r1, [pc, #356]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800364a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800364e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003652:	4302      	orrs	r2, r0
 8003654:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003658:	049b      	lsls	r3, r3, #18
 800365a:	d50f      	bpl.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800365c:	4a53      	ldr	r2, [pc, #332]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800365e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003660:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003664:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003668:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800366a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800366e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003672:	d164      	bne.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003674:	68d3      	ldr	r3, [r2, #12]
 8003676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800367a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	031f      	lsls	r7, r3, #12
 8003680:	d50f      	bpl.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003682:	4a4a      	ldr	r2, [pc, #296]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003684:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003686:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800368a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800368e:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003690:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003698:	d15c      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800369a:	68d3      	ldr	r3, [r2, #12]
 800369c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	035e      	lsls	r6, r3, #13
 80036a6:	d50f      	bpl.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036a8:	4a40      	ldr	r2, [pc, #256]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80036aa:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80036ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80036b0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80036b4:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036b6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036be:	d154      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c0:	68d3      	ldr	r3, [r2, #12]
 80036c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036c6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	0458      	lsls	r0, r3, #17
 80036cc:	d512      	bpl.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036ce:	4937      	ldr	r1, [pc, #220]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80036d0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80036d2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80036d6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80036da:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036dc:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036e4:	d14c      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036e6:	2102      	movs	r1, #2
 80036e8:	1d20      	adds	r0, r4, #4
 80036ea:	f7ff fd6d 	bl	80031c8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80036ee:	2800      	cmp	r0, #0
 80036f0:	bf18      	it	ne
 80036f2:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036f4:	6822      	ldr	r2, [r4, #0]
 80036f6:	0411      	lsls	r1, r2, #16
 80036f8:	d508      	bpl.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036fa:	492c      	ldr	r1, [pc, #176]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80036fc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80036fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003702:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003706:	4303      	orrs	r3, r0
 8003708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800370c:	03d3      	lsls	r3, r2, #15
 800370e:	d509      	bpl.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003710:	4a26      	ldr	r2, [pc, #152]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8003712:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003716:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800371a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800371e:	430b      	orrs	r3, r1
 8003720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003724:	4628      	mov	r0, r5
 8003726:	b002      	add	sp, #8
 8003728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372c:	f7fe f8d0 	bl	80018d0 <HAL_GetTick>
 8003730:	1b40      	subs	r0, r0, r5
 8003732:	4548      	cmp	r0, r9
 8003734:	f67f aeec 	bls.w	8003510 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003738:	e70c      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800373a:	4635      	mov	r5, r6
 800373c:	e712      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800373e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003742:	d19b      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003744:	2101      	movs	r1, #1
 8003746:	1d20      	adds	r0, r4, #4
 8003748:	f7ff fd3e 	bl	80031c8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800374c:	2800      	cmp	r0, #0
 800374e:	bf18      	it	ne
 8003750:	4605      	movne	r5, r0
 8003752:	e793      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003754:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003758:	d1a3      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800375a:	2101      	movs	r1, #1
 800375c:	1d20      	adds	r0, r4, #4
 800375e:	f7ff fd33 	bl	80031c8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003762:	2800      	cmp	r0, #0
 8003764:	bf18      	it	ne
 8003766:	4605      	movne	r5, r0
 8003768:	e79b      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800376a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800376e:	d1ab      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003770:	2101      	movs	r1, #1
 8003772:	1d20      	adds	r0, r4, #4
 8003774:	f7ff fd28 	bl	80031c8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003778:	2800      	cmp	r0, #0
 800377a:	bf18      	it	ne
 800377c:	4605      	movne	r5, r0
 800377e:	e7a3      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003780:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8003784:	d1b6      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003786:	2102      	movs	r1, #2
 8003788:	f104 0020 	add.w	r0, r4, #32
 800378c:	f7ff fdaa 	bl	80032e4 <RCCEx_PLLSAI2_Config>
 8003790:	e7ad      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003798:	65bb      	str	r3, [r7, #88]	; 0x58
 800379a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800379c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80037a4:	f04f 0801 	mov.w	r8, #1
 80037a8:	e67f      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xca>
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000

080037b0 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80037b0:	4a02      	ldr	r2, [pc, #8]	; (80037bc <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80037b2:	6813      	ldr	r3, [r2, #0]
 80037b4:	f043 0304 	orr.w	r3, r3, #4
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	4770      	bx	lr
 80037bc:	40021000 	.word	0x40021000

080037c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037c0:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037c2:	4604      	mov	r4, r0
 80037c4:	2800      	cmp	r0, #0
 80037c6:	d04a      	beq.n	800385e <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037c8:	2300      	movs	r3, #0
 80037ca:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037cc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80037d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037d4:	b91b      	cbnz	r3, 80037de <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037d6:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037da:	f001 fcc1 	bl	8005160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037de:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037e0:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80037e2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80037e6:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037e8:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80037ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037ee:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80037f2:	600b      	str	r3, [r1, #0]
 80037f4:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037f8:	d92e      	bls.n	8003858 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037fa:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037fc:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003800:	bf18      	it	ne
 8003802:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003804:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003806:	b92b      	cbnz	r3, 8003814 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003808:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800380c:	bf8c      	ite	hi
 800380e:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003810:	2301      	movls	r3, #1
 8003812:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003814:	68a6      	ldr	r6, [r4, #8]
 8003816:	6863      	ldr	r3, [r4, #4]
 8003818:	69a5      	ldr	r5, [r4, #24]
 800381a:	4333      	orrs	r3, r6
 800381c:	6926      	ldr	r6, [r4, #16]
 800381e:	4333      	orrs	r3, r6
 8003820:	6966      	ldr	r6, [r4, #20]
 8003822:	4333      	orrs	r3, r6
 8003824:	69e6      	ldr	r6, [r4, #28]
 8003826:	4333      	orrs	r3, r6
 8003828:	6a26      	ldr	r6, [r4, #32]
 800382a:	4333      	orrs	r3, r6
 800382c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800382e:	4333      	orrs	r3, r6
 8003830:	f405 7600 	and.w	r6, r5, #512	; 0x200
 8003834:	4333      	orrs	r3, r6
 8003836:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800383a:	431a      	orrs	r2, r3
 800383c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800383e:	0c2d      	lsrs	r5, r5, #16
 8003840:	431a      	orrs	r2, r3
 8003842:	f005 0504 	and.w	r5, r5, #4
 8003846:	432a      	orrs	r2, r5
 8003848:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 800384a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800384c:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800384e:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003850:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003852:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8003856:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003858:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800385c:	e7d0      	b.n	8003800 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 800385e:	2001      	movs	r0, #1
}
 8003860:	bd70      	pop	{r4, r5, r6, pc}

08003862 <HAL_TIM_OC_DelayElapsedCallback>:
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_IC_CaptureCallback>:
 8003864:	4770      	bx	lr

08003866 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_TriggerCallback>:
 8003868:	4770      	bx	lr

0800386a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800386a:	6803      	ldr	r3, [r0, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	0791      	lsls	r1, r2, #30
{
 8003870:	b510      	push	{r4, lr}
 8003872:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003874:	d50f      	bpl.n	8003896 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	0792      	lsls	r2, r2, #30
 800387a:	d50c      	bpl.n	8003896 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800387c:	f06f 0202 	mvn.w	r2, #2
 8003880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003882:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003884:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003886:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003888:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800388a:	f000 8085 	beq.w	8003998 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800388e:	f7ff ffe9 	bl	8003864 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003892:	2300      	movs	r3, #0
 8003894:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	0752      	lsls	r2, r2, #29
 800389c:	d510      	bpl.n	80038c0 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	0750      	lsls	r0, r2, #29
 80038a2:	d50d      	bpl.n	80038c0 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038a4:	f06f 0204 	mvn.w	r2, #4
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038aa:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ac:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038ae:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038b2:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b6:	d075      	beq.n	80039a4 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80038b8:	f7ff ffd4 	bl	8003864 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038bc:	2300      	movs	r3, #0
 80038be:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	0711      	lsls	r1, r2, #28
 80038c6:	d50f      	bpl.n	80038e8 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	0712      	lsls	r2, r2, #28
 80038cc:	d50c      	bpl.n	80038e8 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038ce:	f06f 0208 	mvn.w	r2, #8
 80038d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038d4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038d6:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038d8:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038da:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038dc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038de:	d067      	beq.n	80039b0 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80038e0:	f7ff ffc0 	bl	8003864 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e4:	2300      	movs	r3, #0
 80038e6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	06d0      	lsls	r0, r2, #27
 80038ee:	d510      	bpl.n	8003912 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	06d1      	lsls	r1, r2, #27
 80038f4:	d50d      	bpl.n	8003912 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038f6:	f06f 0210 	mvn.w	r2, #16
 80038fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038fc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038fe:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003900:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003904:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003906:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003908:	d058      	beq.n	80039bc <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800390a:	f7ff ffab 	bl	8003864 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390e:	2300      	movs	r3, #0
 8003910:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	07d2      	lsls	r2, r2, #31
 8003918:	d508      	bpl.n	800392c <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	07d0      	lsls	r0, r2, #31
 800391e:	d505      	bpl.n	800392c <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003920:	f06f 0201 	mvn.w	r2, #1
 8003924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003926:	4620      	mov	r0, r4
 8003928:	f001 fb4a 	bl	8004fc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	0611      	lsls	r1, r2, #24
 8003932:	d508      	bpl.n	8003946 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	0612      	lsls	r2, r2, #24
 8003938:	d505      	bpl.n	8003946 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800393a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800393e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003940:	4620      	mov	r0, r4
 8003942:	f000 f8f0 	bl	8003b26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	05d0      	lsls	r0, r2, #23
 800394c:	d508      	bpl.n	8003960 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	0611      	lsls	r1, r2, #24
 8003952:	d505      	bpl.n	8003960 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003954:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800395a:	4620      	mov	r0, r4
 800395c:	f000 f8e4 	bl	8003b28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	0652      	lsls	r2, r2, #25
 8003966:	d508      	bpl.n	800397a <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	0650      	lsls	r0, r2, #25
 800396c:	d505      	bpl.n	800397a <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800396e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003974:	4620      	mov	r0, r4
 8003976:	f7ff ff77 	bl	8003868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	0691      	lsls	r1, r2, #26
 8003980:	d522      	bpl.n	80039c8 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	0692      	lsls	r2, r2, #26
 8003986:	d51f      	bpl.n	80039c8 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003988:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 800398c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800398e:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8003994:	f000 b8c6 	b.w	8003b24 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003998:	f7ff ff63 	bl	8003862 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	4620      	mov	r0, r4
 800399e:	f7ff ff62 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
 80039a2:	e776      	b.n	8003892 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a4:	f7ff ff5d 	bl	8003862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	4620      	mov	r0, r4
 80039aa:	f7ff ff5c 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
 80039ae:	e785      	b.n	80038bc <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b0:	f7ff ff57 	bl	8003862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b4:	4620      	mov	r0, r4
 80039b6:	f7ff ff56 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
 80039ba:	e793      	b.n	80038e4 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039bc:	f7ff ff51 	bl	8003862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c0:	4620      	mov	r0, r4
 80039c2:	f7ff ff50 	bl	8003866 <HAL_TIM_PWM_PulseFinishedCallback>
 80039c6:	e7a2      	b.n	800390e <HAL_TIM_IRQHandler+0xa4>
 80039c8:	bd10      	pop	{r4, pc}
	...

080039cc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039cc:	4a30      	ldr	r2, [pc, #192]	; (8003a90 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80039ce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039d0:	4290      	cmp	r0, r2
 80039d2:	d012      	beq.n	80039fa <TIM_Base_SetConfig+0x2e>
 80039d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80039d8:	d00f      	beq.n	80039fa <TIM_Base_SetConfig+0x2e>
 80039da:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80039de:	4290      	cmp	r0, r2
 80039e0:	d00b      	beq.n	80039fa <TIM_Base_SetConfig+0x2e>
 80039e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039e6:	4290      	cmp	r0, r2
 80039e8:	d007      	beq.n	80039fa <TIM_Base_SetConfig+0x2e>
 80039ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039ee:	4290      	cmp	r0, r2
 80039f0:	d003      	beq.n	80039fa <TIM_Base_SetConfig+0x2e>
 80039f2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80039f6:	4290      	cmp	r0, r2
 80039f8:	d119      	bne.n	8003a2e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80039fa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a00:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a02:	4a23      	ldr	r2, [pc, #140]	; (8003a90 <TIM_Base_SetConfig+0xc4>)
 8003a04:	4290      	cmp	r0, r2
 8003a06:	d01d      	beq.n	8003a44 <TIM_Base_SetConfig+0x78>
 8003a08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003a0c:	d01a      	beq.n	8003a44 <TIM_Base_SetConfig+0x78>
 8003a0e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003a12:	4290      	cmp	r0, r2
 8003a14:	d016      	beq.n	8003a44 <TIM_Base_SetConfig+0x78>
 8003a16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a1a:	4290      	cmp	r0, r2
 8003a1c:	d012      	beq.n	8003a44 <TIM_Base_SetConfig+0x78>
 8003a1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a22:	4290      	cmp	r0, r2
 8003a24:	d00e      	beq.n	8003a44 <TIM_Base_SetConfig+0x78>
 8003a26:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003a2a:	4290      	cmp	r0, r2
 8003a2c:	d00a      	beq.n	8003a44 <TIM_Base_SetConfig+0x78>
 8003a2e:	4a19      	ldr	r2, [pc, #100]	; (8003a94 <TIM_Base_SetConfig+0xc8>)
 8003a30:	4290      	cmp	r0, r2
 8003a32:	d007      	beq.n	8003a44 <TIM_Base_SetConfig+0x78>
 8003a34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a38:	4290      	cmp	r0, r2
 8003a3a:	d003      	beq.n	8003a44 <TIM_Base_SetConfig+0x78>
 8003a3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a40:	4290      	cmp	r0, r2
 8003a42:	d103      	bne.n	8003a4c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a44:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a4a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a4c:	694a      	ldr	r2, [r1, #20]
 8003a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a52:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003a54:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a56:	688b      	ldr	r3, [r1, #8]
 8003a58:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a5a:	680b      	ldr	r3, [r1, #0]
 8003a5c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <TIM_Base_SetConfig+0xc4>)
 8003a60:	4298      	cmp	r0, r3
 8003a62:	d00f      	beq.n	8003a84 <TIM_Base_SetConfig+0xb8>
 8003a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a68:	4298      	cmp	r0, r3
 8003a6a:	d00b      	beq.n	8003a84 <TIM_Base_SetConfig+0xb8>
 8003a6c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003a70:	4298      	cmp	r0, r3
 8003a72:	d007      	beq.n	8003a84 <TIM_Base_SetConfig+0xb8>
 8003a74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a78:	4298      	cmp	r0, r3
 8003a7a:	d003      	beq.n	8003a84 <TIM_Base_SetConfig+0xb8>
 8003a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a80:	4298      	cmp	r0, r3
 8003a82:	d101      	bne.n	8003a88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a84:	690b      	ldr	r3, [r1, #16]
 8003a86:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	6143      	str	r3, [r0, #20]
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40012c00 	.word	0x40012c00
 8003a94:	40014000 	.word	0x40014000

08003a98 <HAL_TIM_Base_Init>:
{
 8003a98:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003a9a:	4604      	mov	r4, r0
 8003a9c:	b1a0      	cbz	r0, 8003ac8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003a9e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003aa2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003aa6:	b91b      	cbnz	r3, 8003ab0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003aa8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003aac:	f001 fb8c 	bl	80051c8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab6:	6820      	ldr	r0, [r4, #0]
 8003ab8:	1d21      	adds	r1, r4, #4
 8003aba:	f7ff ff87 	bl	80039cc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003ac8:	2001      	movs	r0, #1
}
 8003aca:	bd10      	pop	{r4, pc}

08003acc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003acc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ad0:	2b01      	cmp	r3, #1
{
 8003ad2:	b530      	push	{r4, r5, lr}
 8003ad4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003ad8:	d01f      	beq.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ada:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003adc:	4d10      	ldr	r5, [pc, #64]	; (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003ade:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ae2:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8003ae4:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003ae6:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8003aea:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003aee:	42aa      	cmp	r2, r5
 8003af0:	d103      	bne.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003af2:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003af4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003af8:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003afa:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003afc:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b02:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003b04:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b08:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b0a:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b0c:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8003b0e:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003b10:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b14:	2300      	movs	r3, #0
 8003b16:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003b1a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003b1c:	bd30      	pop	{r4, r5, pc}
 8003b1e:	bf00      	nop
 8003b20:	40012c00 	.word	0x40012c00

08003b24 <HAL_TIMEx_CommutationCallback>:
 8003b24:	4770      	bx	lr

08003b26 <HAL_TIMEx_BreakCallback>:
 8003b26:	4770      	bx	lr

08003b28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b28:	4770      	bx	lr

08003b2a <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b2a:	6803      	ldr	r3, [r0, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b32:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	609a      	str	r2, [r3, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	2320      	movs	r3, #32
 8003b3e:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	6603      	str	r3, [r0, #96]	; 0x60
 8003b46:	4770      	bx	lr

08003b48 <HAL_UART_TxCpltCallback>:
 8003b48:	4770      	bx	lr

08003b4a <HAL_UART_ErrorCallback>:
 8003b4a:	4770      	bx	lr

08003b4c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b4c:	6803      	ldr	r3, [r0, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b50:	6819      	ldr	r1, [r3, #0]
{
 8003b52:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8003b54:	0716      	lsls	r6, r2, #28
{
 8003b56:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b58:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8003b5a:	d10a      	bne.n	8003b72 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 8003b5c:	0696      	lsls	r6, r2, #26
 8003b5e:	d564      	bpl.n	8003c2a <HAL_UART_IRQHandler+0xde>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b60:	068e      	lsls	r6, r1, #26
 8003b62:	d562      	bpl.n	8003c2a <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 8003b64:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8083 	beq.w	8003c72 <HAL_UART_IRQHandler+0x126>
}
 8003b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8003b70:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != RESET)
 8003b72:	f015 0001 	ands.w	r0, r5, #1
 8003b76:	d102      	bne.n	8003b7e <HAL_UART_IRQHandler+0x32>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b78:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003b7c:	d055      	beq.n	8003c2a <HAL_UART_IRQHandler+0xde>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b7e:	07d5      	lsls	r5, r2, #31
 8003b80:	d507      	bpl.n	8003b92 <HAL_UART_IRQHandler+0x46>
 8003b82:	05ce      	lsls	r6, r1, #23
 8003b84:	d505      	bpl.n	8003b92 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b86:	2501      	movs	r5, #1
 8003b88:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b8a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8003b8c:	f045 0501 	orr.w	r5, r5, #1
 8003b90:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b92:	0795      	lsls	r5, r2, #30
 8003b94:	d506      	bpl.n	8003ba4 <HAL_UART_IRQHandler+0x58>
 8003b96:	b128      	cbz	r0, 8003ba4 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b98:	2502      	movs	r5, #2
 8003b9a:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b9c:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8003b9e:	f045 0504 	orr.w	r5, r5, #4
 8003ba2:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ba4:	0756      	lsls	r6, r2, #29
 8003ba6:	d506      	bpl.n	8003bb6 <HAL_UART_IRQHandler+0x6a>
 8003ba8:	b128      	cbz	r0, 8003bb6 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003baa:	2504      	movs	r5, #4
 8003bac:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bae:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8003bb0:	f045 0502 	orr.w	r5, r5, #2
 8003bb4:	6765      	str	r5, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 8003bb6:	0715      	lsls	r5, r2, #28
 8003bb8:	d507      	bpl.n	8003bca <HAL_UART_IRQHandler+0x7e>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8003bba:	068e      	lsls	r6, r1, #26
 8003bbc:	d400      	bmi.n	8003bc0 <HAL_UART_IRQHandler+0x74>
 8003bbe:	b120      	cbz	r0, 8003bca <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bc0:	2008      	movs	r0, #8
 8003bc2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bc4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003bc6:	4303      	orrs	r3, r0
 8003bc8:	6763      	str	r3, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bca:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d050      	beq.n	8003c72 <HAL_UART_IRQHandler+0x126>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8003bd0:	0695      	lsls	r5, r2, #26
 8003bd2:	d505      	bpl.n	8003be0 <HAL_UART_IRQHandler+0x94>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bd4:	0688      	lsls	r0, r1, #26
 8003bd6:	d503      	bpl.n	8003be0 <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL)
 8003bd8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003bda:	b10b      	cbz	r3, 8003be0 <HAL_UART_IRQHandler+0x94>
          huart->RxISR(huart);
 8003bdc:	4620      	mov	r0, r4
 8003bde:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003be0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003be2:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 8003be4:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003be6:	d404      	bmi.n	8003bf2 <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003bec:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003bf0:	d017      	beq.n	8003c22 <HAL_UART_IRQHandler+0xd6>
        UART_EndRxTransfer(huart);
 8003bf2:	f7ff ff9a 	bl	8003b2a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	0652      	lsls	r2, r2, #25
 8003bfc:	d50d      	bpl.n	8003c1a <HAL_UART_IRQHandler+0xce>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bfe:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003c00:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c06:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003c08:	b138      	cbz	r0, 8003c1a <HAL_UART_IRQHandler+0xce>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c0a:	4b1a      	ldr	r3, [pc, #104]	; (8003c74 <HAL_UART_IRQHandler+0x128>)
 8003c0c:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c0e:	f7fd ff7b 	bl	8001b08 <HAL_DMA_Abort_IT>
 8003c12:	b370      	cbz	r0, 8003c72 <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c14:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003c16:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003c18:	e7a8      	b.n	8003b6c <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7ff ff95 	bl	8003b4a <HAL_UART_ErrorCallback>
 8003c20:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003c22:	f7ff ff92 	bl	8003b4a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c26:	6765      	str	r5, [r4, #116]	; 0x74
 8003c28:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003c2a:	02d6      	lsls	r6, r2, #11
 8003c2c:	d509      	bpl.n	8003c42 <HAL_UART_IRQHandler+0xf6>
 8003c2e:	0268      	lsls	r0, r5, #9
 8003c30:	d507      	bpl.n	8003c42 <HAL_UART_IRQHandler+0xf6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8003c36:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c38:	621a      	str	r2, [r3, #32]
}
 8003c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003c3e:	f000 bb6c 	b.w	800431a <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != RESET)
 8003c42:	0616      	lsls	r6, r2, #24
 8003c44:	d505      	bpl.n	8003c52 <HAL_UART_IRQHandler+0x106>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c46:	060d      	lsls	r5, r1, #24
 8003c48:	d503      	bpl.n	8003c52 <HAL_UART_IRQHandler+0x106>
    if (huart->TxISR != NULL)
 8003c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c4c:	b18b      	cbz	r3, 8003c72 <HAL_UART_IRQHandler+0x126>
      huart->TxISR(huart);
 8003c4e:	4620      	mov	r0, r4
 8003c50:	e78c      	b.n	8003b6c <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c52:	0650      	lsls	r0, r2, #25
 8003c54:	d50d      	bpl.n	8003c72 <HAL_UART_IRQHandler+0x126>
 8003c56:	064a      	lsls	r2, r1, #25
 8003c58:	d50b      	bpl.n	8003c72 <HAL_UART_IRQHandler+0x126>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c60:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c62:	2320      	movs	r3, #32
 8003c64:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f7ff ff6b 	bl	8003b48 <HAL_UART_TxCpltCallback>
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	08003c79 	.word	0x08003c79

08003c78 <UART_DMAAbortOnError>:
{
 8003c78:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c7a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003c82:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8003c86:	f7ff ff60 	bl	8003b4a <HAL_UART_ErrorCallback>
 8003c8a:	bd08      	pop	{r3, pc}

08003c8c <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c8c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c8e:	69c1      	ldr	r1, [r0, #28]
{
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c94:	6883      	ldr	r3, [r0, #8]
 8003c96:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c98:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c9a:	4303      	orrs	r3, r0
 8003c9c:	6960      	ldr	r0, [r4, #20]
 8003c9e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ca0:	48ba      	ldr	r0, [pc, #744]	; (8003f8c <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ca2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ca4:	4028      	ands	r0, r5
 8003ca6:	4303      	orrs	r3, r0
 8003ca8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003caa:	6853      	ldr	r3, [r2, #4]
 8003cac:	68e0      	ldr	r0, [r4, #12]
 8003cae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cb2:	4303      	orrs	r3, r0
 8003cb4:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cb6:	4bb6      	ldr	r3, [pc, #728]	; (8003f90 <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cb8:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cba:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8003cbc:	bf1c      	itt	ne
 8003cbe:	6a23      	ldrne	r3, [r4, #32]
 8003cc0:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cc2:	6893      	ldr	r3, [r2, #8]
 8003cc4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003cc8:	4303      	orrs	r3, r0
 8003cca:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ccc:	4bb1      	ldr	r3, [pc, #708]	; (8003f94 <UART_SetConfig+0x308>)
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d119      	bne.n	8003d06 <UART_SetConfig+0x7a>
 8003cd2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003cd6:	4ab0      	ldr	r2, [pc, #704]	; (8003f98 <UART_SetConfig+0x30c>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cdc:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003ce4:	5cd3      	ldrb	r3, [r2, r3]
 8003ce6:	f040 8138 	bne.w	8003f5a <UART_SetConfig+0x2ce>
    switch (clocksource)
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	f200 808f 	bhi.w	8003e0e <UART_SetConfig+0x182>
 8003cf0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003cf4:	00ca011a 	.word	0x00ca011a
 8003cf8:	008d00f9 	.word	0x008d00f9
 8003cfc:	008d0114 	.word	0x008d0114
 8003d00:	008d008d 	.word	0x008d008d
 8003d04:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d06:	4ba5      	ldr	r3, [pc, #660]	; (8003f9c <UART_SetConfig+0x310>)
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d107      	bne.n	8003d1c <UART_SetConfig+0x90>
 8003d0c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003d10:	4aa3      	ldr	r2, [pc, #652]	; (8003fa0 <UART_SetConfig+0x314>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	e7e1      	b.n	8003ce0 <UART_SetConfig+0x54>
 8003d1c:	4ba1      	ldr	r3, [pc, #644]	; (8003fa4 <UART_SetConfig+0x318>)
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d123      	bne.n	8003d6a <UART_SetConfig+0xde>
 8003d22:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d2e:	2b10      	cmp	r3, #16
 8003d30:	f000 80f1 	beq.w	8003f16 <UART_SetConfig+0x28a>
 8003d34:	d80b      	bhi.n	8003d4e <UART_SetConfig+0xc2>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80f3 	beq.w	8003f22 <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d3c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        ret = HAL_ERROR;
 8003d40:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003d44:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d48:	f000 80f8 	beq.w	8003f3c <UART_SetConfig+0x2b0>
 8003d4c:	e0a8      	b.n	8003ea0 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d4e:	2b20      	cmp	r3, #32
 8003d50:	f000 80c6 	beq.w	8003ee0 <UART_SetConfig+0x254>
 8003d54:	2b30      	cmp	r3, #48	; 0x30
 8003d56:	d1f1      	bne.n	8003d3c <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d58:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003d5c:	f040 80b8 	bne.w	8003ed0 <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003d60:	6860      	ldr	r0, [r4, #4]
 8003d62:	0843      	lsrs	r3, r0, #1
 8003d64:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003d68:	e0c3      	b.n	8003ef2 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d6a:	4b8f      	ldr	r3, [pc, #572]	; (8003fa8 <UART_SetConfig+0x31c>)
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d11e      	bne.n	8003dae <UART_SetConfig+0x122>
 8003d70:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	f000 80bb 	beq.w	8003ef8 <UART_SetConfig+0x26c>
 8003d82:	d80a      	bhi.n	8003d9a <UART_SetConfig+0x10e>
 8003d84:	b97b      	cbnz	r3, 8003da6 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d86:	4b82      	ldr	r3, [pc, #520]	; (8003f90 <UART_SetConfig+0x304>)
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	f040 80ca 	bne.w	8003f22 <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003d8e:	f7ff f9f7 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
        break;
 8003d92:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8003d94:	bbb0      	cbnz	r0, 8003e04 <UART_SetConfig+0x178>
 8003d96:	4602      	mov	r2, r0
 8003d98:	e03a      	b.n	8003e10 <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d9a:	2b80      	cmp	r3, #128	; 0x80
 8003d9c:	f000 809d 	beq.w	8003eda <UART_SetConfig+0x24e>
 8003da0:	2bc0      	cmp	r3, #192	; 0xc0
 8003da2:	f000 80b0 	beq.w	8003f06 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003da6:	4b7a      	ldr	r3, [pc, #488]	; (8003f90 <UART_SetConfig+0x304>)
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d1c7      	bne.n	8003d3c <UART_SetConfig+0xb0>
 8003dac:	e02f      	b.n	8003e0e <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dae:	4b7f      	ldr	r3, [pc, #508]	; (8003fac <UART_SetConfig+0x320>)
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d111      	bne.n	8003dd8 <UART_SetConfig+0x14c>
 8003db4:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc4:	f000 8098 	beq.w	8003ef8 <UART_SetConfig+0x26c>
 8003dc8:	d9dc      	bls.n	8003d84 <UART_SetConfig+0xf8>
 8003dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dce:	f000 8084 	beq.w	8003eda <UART_SetConfig+0x24e>
 8003dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dd6:	e7e4      	b.n	8003da2 <UART_SetConfig+0x116>
 8003dd8:	4b6d      	ldr	r3, [pc, #436]	; (8003f90 <UART_SetConfig+0x304>)
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d1ae      	bne.n	8003d3c <UART_SetConfig+0xb0>
 8003dde:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dee:	f000 8083 	beq.w	8003ef8 <UART_SetConfig+0x26c>
 8003df2:	d9c7      	bls.n	8003d84 <UART_SetConfig+0xf8>
 8003df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df8:	d06f      	beq.n	8003eda <UART_SetConfig+0x24e>
 8003dfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dfe:	e7d0      	b.n	8003da2 <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003e00:	486b      	ldr	r0, [pc, #428]	; (8003fb0 <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e02:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8003e04:	6862      	ldr	r2, [r4, #4]
 8003e06:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8003e0a:	4281      	cmp	r1, r0
 8003e0c:	d905      	bls.n	8003e1a <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8003e0e:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003e14:	6663      	str	r3, [r4, #100]	; 0x64
}
 8003e16:	4610      	mov	r0, r2
 8003e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8003e1a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003e1e:	d8f6      	bhi.n	8003e0e <UART_SetConfig+0x182>
        switch (clocksource)
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d82e      	bhi.n	8003e82 <UART_SetConfig+0x1f6>
 8003e24:	e8df f003 	tbb	[pc, r3]
 8003e28:	2d1c2d05 	.word	0x2d1c2d05
 8003e2c:	2d2d2d24 	.word	0x2d2d2d24
 8003e30:	27          	.byte	0x27
 8003e31:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e32:	f7ff f9a5 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e36:	6862      	ldr	r2, [r4, #4]
 8003e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e3c:	0856      	lsrs	r6, r2, #1
 8003e3e:	2700      	movs	r7, #0
 8003e40:	fbe1 6700 	umlal	r6, r7, r1, r0
 8003e44:	2300      	movs	r3, #0
 8003e46:	4630      	mov	r0, r6
 8003e48:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003e4a:	f7fc ff19 	bl	8000c80 <__aeabi_uldivmod>
            break;
 8003e4e:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e50:	4b58      	ldr	r3, [pc, #352]	; (8003fb4 <UART_SetConfig+0x328>)
 8003e52:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003e56:	4299      	cmp	r1, r3
 8003e58:	d8d9      	bhi.n	8003e0e <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	60d8      	str	r0, [r3, #12]
 8003e5e:	e7d7      	b.n	8003e10 <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003e60:	4855      	ldr	r0, [pc, #340]	; (8003fb8 <UART_SetConfig+0x32c>)
 8003e62:	0855      	lsrs	r5, r2, #1
 8003e64:	2300      	movs	r3, #0
 8003e66:	2100      	movs	r1, #0
 8003e68:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003e6a:	f141 0100 	adc.w	r1, r1, #0
 8003e6e:	e7ec      	b.n	8003e4a <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e70:	f7fe fe7a 	bl	8002b68 <HAL_RCC_GetSysClockFreq>
 8003e74:	e7df      	b.n	8003e36 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003e76:	0850      	lsrs	r0, r2, #1
 8003e78:	2100      	movs	r1, #0
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8003e80:	e7f3      	b.n	8003e6a <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8003e82:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003e84:	2000      	movs	r0, #0
 8003e86:	e7e3      	b.n	8003e50 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e88:	f7ff f98c 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8003e8c:	e04e      	b.n	8003f2c <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e8e:	f7ff f977 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e92:	6862      	ldr	r2, [r4, #4]
 8003e94:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e9c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e9e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea0:	f1a3 0010 	sub.w	r0, r3, #16
 8003ea4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003ea8:	4288      	cmp	r0, r1
 8003eaa:	d8b0      	bhi.n	8003e0e <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8003eac:	6821      	ldr	r1, [r4, #0]
 8003eae:	60cb      	str	r3, [r1, #12]
 8003eb0:	e7ae      	b.n	8003e10 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003eb2:	f7ff f977 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8003eb6:	e7ec      	b.n	8003e92 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003eb8:	6860      	ldr	r0, [r4, #4]
 8003eba:	0843      	lsrs	r3, r0, #1
 8003ebc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003ec0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ec4:	fbb3 f3f0 	udiv	r3, r3, r0
 8003ec8:	e7e8      	b.n	8003e9c <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003eca:	f7fe fe4d 	bl	8002b68 <HAL_RCC_GetSysClockFreq>
 8003ece:	e7e0      	b.n	8003e92 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ed0:	6860      	ldr	r0, [r4, #4]
 8003ed2:	0843      	lsrs	r3, r0, #1
 8003ed4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003ed8:	e7f4      	b.n	8003ec4 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003eda:	4b2d      	ldr	r3, [pc, #180]	; (8003f90 <UART_SetConfig+0x304>)
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d08f      	beq.n	8003e00 <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003ee4:	d1e8      	bne.n	8003eb8 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003ee6:	6860      	ldr	r0, [r4, #4]
 8003ee8:	0843      	lsrs	r3, r0, #1
 8003eea:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003eee:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003ef2:	fbb3 f3f0 	udiv	r3, r3, r0
 8003ef6:	e01f      	b.n	8003f38 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ef8:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <UART_SetConfig+0x304>)
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d10b      	bne.n	8003f16 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003efe:	f7fe fe33 	bl	8002b68 <HAL_RCC_GetSysClockFreq>
        break;
 8003f02:	2304      	movs	r3, #4
 8003f04:	e746      	b.n	8003d94 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f06:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <UART_SetConfig+0x304>)
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	f47f af25 	bne.w	8003d58 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003f0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f12:	2308      	movs	r3, #8
 8003f14:	e776      	b.n	8003e04 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f16:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003f1a:	d1d6      	bne.n	8003eca <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f1c:	f7fe fe24 	bl	8002b68 <HAL_RCC_GetSysClockFreq>
 8003f20:	e004      	b.n	8003f2c <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f22:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003f26:	d1b2      	bne.n	8003e8e <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003f28:	f7ff f92a 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f2c:	6861      	ldr	r1, [r4, #4]
 8003f2e:	084a      	lsrs	r2, r1, #1
 8003f30:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003f34:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f38:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f3a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f3c:	f1a3 0010 	sub.w	r0, r3, #16
 8003f40:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003f44:	4288      	cmp	r0, r1
 8003f46:	f63f af62 	bhi.w	8003e0e <UART_SetConfig+0x182>
      brrtemp = usartdiv & 0xFFF0U;
 8003f4a:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8003f4e:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f50:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003f54:	430b      	orrs	r3, r1
 8003f56:	60c3      	str	r3, [r0, #12]
 8003f58:	e75a      	b.n	8003e10 <UART_SetConfig+0x184>
    switch (clocksource)
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	f63f af57 	bhi.w	8003e0e <UART_SetConfig+0x182>
 8003f60:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <UART_SetConfig+0x2dc>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003e8f 	.word	0x08003e8f
 8003f6c:	08003eb3 	.word	0x08003eb3
 8003f70:	08003eb9 	.word	0x08003eb9
 8003f74:	08003e0f 	.word	0x08003e0f
 8003f78:	08003ecb 	.word	0x08003ecb
 8003f7c:	08003e0f 	.word	0x08003e0f
 8003f80:	08003e0f 	.word	0x08003e0f
 8003f84:	08003e0f 	.word	0x08003e0f
 8003f88:	08003ed1 	.word	0x08003ed1
 8003f8c:	efff69f3 	.word	0xefff69f3
 8003f90:	40008000 	.word	0x40008000
 8003f94:	40013800 	.word	0x40013800
 8003f98:	0800abb8 	.word	0x0800abb8
 8003f9c:	40004400 	.word	0x40004400
 8003fa0:	0800abbc 	.word	0x0800abbc
 8003fa4:	40004800 	.word	0x40004800
 8003fa8:	40004c00 	.word	0x40004c00
 8003fac:	40005000 	.word	0x40005000
 8003fb0:	00f42400 	.word	0x00f42400
 8003fb4:	000ffcff 	.word	0x000ffcff
 8003fb8:	f4240000 	.word	0xf4240000

08003fbc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fbe:	07da      	lsls	r2, r3, #31
{
 8003fc0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fc2:	d506      	bpl.n	8003fd2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fc4:	6801      	ldr	r1, [r0, #0]
 8003fc6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003fc8:	684a      	ldr	r2, [r1, #4]
 8003fca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003fce:	4322      	orrs	r2, r4
 8003fd0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fd2:	079c      	lsls	r4, r3, #30
 8003fd4:	d506      	bpl.n	8003fe4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd6:	6801      	ldr	r1, [r0, #0]
 8003fd8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003fda:	684a      	ldr	r2, [r1, #4]
 8003fdc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fe0:	4322      	orrs	r2, r4
 8003fe2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fe4:	0759      	lsls	r1, r3, #29
 8003fe6:	d506      	bpl.n	8003ff6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fe8:	6801      	ldr	r1, [r0, #0]
 8003fea:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003fec:	684a      	ldr	r2, [r1, #4]
 8003fee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ff2:	4322      	orrs	r2, r4
 8003ff4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ff6:	071a      	lsls	r2, r3, #28
 8003ff8:	d506      	bpl.n	8004008 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ffa:	6801      	ldr	r1, [r0, #0]
 8003ffc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003ffe:	684a      	ldr	r2, [r1, #4]
 8004000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004004:	4322      	orrs	r2, r4
 8004006:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004008:	06dc      	lsls	r4, r3, #27
 800400a:	d506      	bpl.n	800401a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800400c:	6801      	ldr	r1, [r0, #0]
 800400e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004010:	688a      	ldr	r2, [r1, #8]
 8004012:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004016:	4322      	orrs	r2, r4
 8004018:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800401a:	0699      	lsls	r1, r3, #26
 800401c:	d506      	bpl.n	800402c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800401e:	6801      	ldr	r1, [r0, #0]
 8004020:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004022:	688a      	ldr	r2, [r1, #8]
 8004024:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004028:	4322      	orrs	r2, r4
 800402a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800402c:	065a      	lsls	r2, r3, #25
 800402e:	d50f      	bpl.n	8004050 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004030:	6801      	ldr	r1, [r0, #0]
 8004032:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004034:	684a      	ldr	r2, [r1, #4]
 8004036:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800403a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800403c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004040:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004042:	d105      	bne.n	8004050 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004044:	684a      	ldr	r2, [r1, #4]
 8004046:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004048:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800404c:	4322      	orrs	r2, r4
 800404e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	d506      	bpl.n	8004062 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004054:	6802      	ldr	r2, [r0, #0]
 8004056:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004058:	6853      	ldr	r3, [r2, #4]
 800405a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800405e:	430b      	orrs	r3, r1
 8004060:	6053      	str	r3, [r2, #4]
 8004062:	bd10      	pop	{r4, pc}

08004064 <UART_WaitOnFlagUntilTimeout>:
{
 8004064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004068:	9d06      	ldr	r5, [sp, #24]
 800406a:	4604      	mov	r4, r0
 800406c:	460f      	mov	r7, r1
 800406e:	4616      	mov	r6, r2
 8004070:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004072:	6821      	ldr	r1, [r4, #0]
 8004074:	69ca      	ldr	r2, [r1, #28]
 8004076:	ea37 0302 	bics.w	r3, r7, r2
 800407a:	bf0c      	ite	eq
 800407c:	2201      	moveq	r2, #1
 800407e:	2200      	movne	r2, #0
 8004080:	42b2      	cmp	r2, r6
 8004082:	d002      	beq.n	800408a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8004084:	2000      	movs	r0, #0
}
 8004086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800408a:	1c6b      	adds	r3, r5, #1
 800408c:	d0f2      	beq.n	8004074 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800408e:	b99d      	cbnz	r5, 80040b8 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004098:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80040a2:	2320      	movs	r3, #32
 80040a4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80040a8:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80040ac:	2300      	movs	r3, #0
 80040ae:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80040b2:	2003      	movs	r0, #3
 80040b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040b8:	f7fd fc0a 	bl	80018d0 <HAL_GetTick>
 80040bc:	eba0 0008 	sub.w	r0, r0, r8
 80040c0:	4285      	cmp	r5, r0
 80040c2:	d2d6      	bcs.n	8004072 <UART_WaitOnFlagUntilTimeout+0xe>
 80040c4:	e7e4      	b.n	8004090 <UART_WaitOnFlagUntilTimeout+0x2c>

080040c6 <HAL_UART_Transmit>:
{
 80040c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80040ca:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80040cc:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80040d0:	2b20      	cmp	r3, #32
{
 80040d2:	4604      	mov	r4, r0
 80040d4:	460d      	mov	r5, r1
 80040d6:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80040d8:	d14a      	bne.n	8004170 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 80040da:	2900      	cmp	r1, #0
 80040dc:	d046      	beq.n	800416c <HAL_UART_Transmit+0xa6>
 80040de:	2a00      	cmp	r2, #0
 80040e0:	d044      	beq.n	800416c <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80040e2:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d042      	beq.n	8004170 <HAL_UART_Transmit+0xaa>
 80040ea:	2301      	movs	r3, #1
 80040ec:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040f4:	2321      	movs	r3, #33	; 0x21
 80040f6:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 80040fa:	f7fd fbe9 	bl	80018d0 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80040fe:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8004102:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8004104:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004108:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800410c:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 800410e:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004110:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8004112:	b952      	cbnz	r2, 800412a <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004114:	2140      	movs	r1, #64	; 0x40
 8004116:	4620      	mov	r0, r4
 8004118:	f7ff ffa4 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 800411c:	b958      	cbnz	r0, 8004136 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 800411e:	2320      	movs	r3, #32
 8004120:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8004124:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8004128:	e006      	b.n	8004138 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800412a:	2200      	movs	r2, #0
 800412c:	2180      	movs	r1, #128	; 0x80
 800412e:	4620      	mov	r0, r4
 8004130:	f7ff ff98 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 8004134:	b118      	cbz	r0, 800413e <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8004136:	2003      	movs	r0, #3
}
 8004138:	b002      	add	sp, #8
 800413a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800413e:	68a3      	ldr	r3, [r4, #8]
 8004140:	6822      	ldr	r2, [r4, #0]
 8004142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004146:	d10d      	bne.n	8004164 <HAL_UART_Transmit+0x9e>
 8004148:	6923      	ldr	r3, [r4, #16]
 800414a:	b95b      	cbnz	r3, 8004164 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800414c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004154:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004156:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800415a:	3b01      	subs	r3, #1
 800415c:	b29b      	uxth	r3, r3
 800415e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8004162:	e7d1      	b.n	8004108 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8004164:	782b      	ldrb	r3, [r5, #0]
 8004166:	8513      	strh	r3, [r2, #40]	; 0x28
 8004168:	3501      	adds	r5, #1
 800416a:	e7f4      	b.n	8004156 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800416c:	2001      	movs	r0, #1
 800416e:	e7e3      	b.n	8004138 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8004170:	2002      	movs	r0, #2
 8004172:	e7e1      	b.n	8004138 <HAL_UART_Transmit+0x72>

08004174 <HAL_UART_Receive>:
{
 8004174:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004178:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800417a:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800417e:	2b20      	cmp	r3, #32
{
 8004180:	4604      	mov	r4, r0
 8004182:	460d      	mov	r5, r1
 8004184:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004186:	d160      	bne.n	800424a <HAL_UART_Receive+0xd6>
    if ((pData == NULL) || (Size == 0U))
 8004188:	2900      	cmp	r1, #0
 800418a:	d05c      	beq.n	8004246 <HAL_UART_Receive+0xd2>
 800418c:	2a00      	cmp	r2, #0
 800418e:	d05a      	beq.n	8004246 <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 8004190:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8004194:	2b01      	cmp	r3, #1
 8004196:	d058      	beq.n	800424a <HAL_UART_Receive+0xd6>
 8004198:	2301      	movs	r3, #1
 800419a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419e:	2300      	movs	r3, #0
 80041a0:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041a2:	2322      	movs	r3, #34	; 0x22
 80041a4:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    tickstart = HAL_GetTick();
 80041a8:	f7fd fb92 	bl	80018d0 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80041ac:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 80041ae:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80041b6:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 80041b8:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80041bc:	d115      	bne.n	80041ea <HAL_UART_Receive+0x76>
 80041be:	6923      	ldr	r3, [r4, #16]
 80041c0:	b98b      	cbnz	r3, 80041e6 <HAL_UART_Receive+0x72>
 80041c2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80041c6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 80041ca:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while (huart->RxXferCount > 0U)
 80041ce:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 80041d2:	b280      	uxth	r0, r0
 80041d4:	b9b8      	cbnz	r0, 8004206 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 80041d6:	2320      	movs	r3, #32
 80041d8:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    __HAL_UNLOCK(huart);
 80041dc:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80041e0:	b002      	add	sp, #8
 80041e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 80041e6:	23ff      	movs	r3, #255	; 0xff
 80041e8:	e7ed      	b.n	80041c6 <HAL_UART_Receive+0x52>
 80041ea:	b923      	cbnz	r3, 80041f6 <HAL_UART_Receive+0x82>
 80041ec:	6923      	ldr	r3, [r4, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f9      	beq.n	80041e6 <HAL_UART_Receive+0x72>
 80041f2:	237f      	movs	r3, #127	; 0x7f
 80041f4:	e7e7      	b.n	80041c6 <HAL_UART_Receive+0x52>
 80041f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041fa:	d1e6      	bne.n	80041ca <HAL_UART_Receive+0x56>
 80041fc:	6923      	ldr	r3, [r4, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f7      	beq.n	80041f2 <HAL_UART_Receive+0x7e>
 8004202:	233f      	movs	r3, #63	; 0x3f
 8004204:	e7df      	b.n	80041c6 <HAL_UART_Receive+0x52>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004206:	f8cd 8000 	str.w	r8, [sp]
 800420a:	463b      	mov	r3, r7
 800420c:	2200      	movs	r2, #0
 800420e:	2120      	movs	r1, #32
 8004210:	4620      	mov	r0, r4
 8004212:	f7ff ff27 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 8004216:	b9d0      	cbnz	r0, 800424e <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004218:	68a3      	ldr	r3, [r4, #8]
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	d10c      	bne.n	800423c <HAL_UART_Receive+0xc8>
 8004222:	6922      	ldr	r2, [r4, #16]
 8004224:	b952      	cbnz	r2, 800423c <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8004226:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004228:	4033      	ands	r3, r6
 800422a:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 800422e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8004232:	3b01      	subs	r3, #1
 8004234:	b29b      	uxth	r3, r3
 8004236:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 800423a:	e7c8      	b.n	80041ce <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800423c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800423e:	4033      	ands	r3, r6
 8004240:	702b      	strb	r3, [r5, #0]
 8004242:	3501      	adds	r5, #1
 8004244:	e7f3      	b.n	800422e <HAL_UART_Receive+0xba>
      return  HAL_ERROR;
 8004246:	2001      	movs	r0, #1
 8004248:	e7ca      	b.n	80041e0 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 800424a:	2002      	movs	r0, #2
 800424c:	e7c8      	b.n	80041e0 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 800424e:	2003      	movs	r0, #3
 8004250:	e7c6      	b.n	80041e0 <HAL_UART_Receive+0x6c>

08004252 <UART_CheckIdleState>:
{
 8004252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004254:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004256:	2600      	movs	r6, #0
 8004258:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800425a:	f7fd fb39 	bl	80018d0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8004264:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004266:	d417      	bmi.n	8004298 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	075b      	lsls	r3, r3, #29
 800426e:	d50a      	bpl.n	8004286 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	462b      	mov	r3, r5
 800427a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800427e:	4620      	mov	r0, r4
 8004280:	f7ff fef0 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 8004284:	b9a0      	cbnz	r0, 80042b0 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8004286:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004288:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800428a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800428e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8004292:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8004296:	e00c      	b.n	80042b2 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	4632      	mov	r2, r6
 80042a0:	4603      	mov	r3, r0
 80042a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042a6:	4620      	mov	r0, r4
 80042a8:	f7ff fedc 	bl	8004064 <UART_WaitOnFlagUntilTimeout>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d0db      	beq.n	8004268 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80042b0:	2003      	movs	r0, #3
}
 80042b2:	b002      	add	sp, #8
 80042b4:	bd70      	pop	{r4, r5, r6, pc}

080042b6 <HAL_UART_Init>:
{
 80042b6:	b510      	push	{r4, lr}
  if (huart == NULL)
 80042b8:	4604      	mov	r4, r0
 80042ba:	b360      	cbz	r0, 8004316 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80042bc:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80042c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042c4:	b91b      	cbnz	r3, 80042ce <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80042c6:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80042ca:	f000 ff9b 	bl	8005204 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80042ce:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80042d0:	2324      	movs	r3, #36	; 0x24
 80042d2:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 80042d6:	6813      	ldr	r3, [r2, #0]
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042de:	4620      	mov	r0, r4
 80042e0:	f7ff fcd4 	bl	8003c8c <UART_SetConfig>
 80042e4:	2801      	cmp	r0, #1
 80042e6:	d016      	beq.n	8004316 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042ea:	b113      	cbz	r3, 80042f2 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80042ec:	4620      	mov	r0, r4
 80042ee:	f7ff fe65 	bl	8003fbc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004302:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800430a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800430c:	601a      	str	r2, [r3, #0]
}
 800430e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004312:	f7ff bf9e 	b.w	8004252 <UART_CheckIdleState>
}
 8004316:	2001      	movs	r0, #1
 8004318:	bd10      	pop	{r4, pc}

0800431a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800431a:	4770      	bx	lr

0800431c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800431c:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800431e:	3b01      	subs	r3, #1
 8004320:	d101      	bne.n	8004326 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8004322:	2003      	movs	r0, #3
 8004324:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004326:	6902      	ldr	r2, [r0, #16]
 8004328:	2a00      	cmp	r2, #0
 800432a:	daf8      	bge.n	800431e <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800432c:	6903      	ldr	r3, [r0, #16]
 800432e:	4a06      	ldr	r2, [pc, #24]	; (8004348 <USB_CoreReset+0x2c>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8004336:	3a01      	subs	r2, #1
 8004338:	d0f3      	beq.n	8004322 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800433a:	6903      	ldr	r3, [r0, #16]
 800433c:	f013 0301 	ands.w	r3, r3, #1
 8004340:	d1f9      	bne.n	8004336 <USB_CoreReset+0x1a>

  return HAL_OK;
 8004342:	4618      	mov	r0, r3
}
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	00030d41 	.word	0x00030d41

0800434c <USB_CoreInit>:
{
 800434c:	b084      	sub	sp, #16
 800434e:	b538      	push	{r3, r4, r5, lr}
 8004350:	ad05      	add	r5, sp, #20
 8004352:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004358:	2b01      	cmp	r3, #1
{
 800435a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800435c:	d11b      	bne.n	8004396 <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800435e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004364:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004366:	68c3      	ldr	r3, [r0, #12]
 8004368:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800436c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004370:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004372:	68c3      	ldr	r3, [r0, #12]
 8004374:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004378:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800437a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800437c:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800437e:	bf02      	ittt	eq
 8004380:	68c3      	ldreq	r3, [r0, #12]
 8004382:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8004386:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8004388:	f7ff ffc8 	bl	800431c <USB_CoreReset>
}
 800438c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004390:	2000      	movs	r0, #0
 8004392:	b004      	add	sp, #16
 8004394:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004396:	68c3      	ldr	r3, [r0, #12]
 8004398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800439c:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 800439e:	f7ff ffbd 	bl	800431c <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80043a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80043a8:	e7f0      	b.n	800438c <USB_CoreInit+0x40>

080043aa <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80043aa:	6883      	ldr	r3, [r0, #8]
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	6083      	str	r3, [r0, #8]
}
 80043b2:	2000      	movs	r0, #0
 80043b4:	4770      	bx	lr

080043b6 <USB_SetCurrentMode>:
{
 80043b6:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043b8:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80043ba:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80043c0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80043c2:	d108      	bne.n	80043d6 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043c4:	68c3      	ldr	r3, [r0, #12]
 80043c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043ca:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80043cc:	2032      	movs	r0, #50	; 0x32
 80043ce:	f7fd fa85 	bl	80018dc <HAL_Delay>
  return HAL_OK;
 80043d2:	2000      	movs	r0, #0
 80043d4:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80043d6:	b919      	cbnz	r1, 80043e0 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043d8:	68c3      	ldr	r3, [r0, #12]
 80043da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043de:	e7f4      	b.n	80043ca <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80043e0:	2001      	movs	r0, #1
}
 80043e2:	bd08      	pop	{r3, pc}

080043e4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043e4:	0189      	lsls	r1, r1, #6
 80043e6:	f041 0120 	orr.w	r1, r1, #32
 80043ea:	4a06      	ldr	r2, [pc, #24]	; (8004404 <USB_FlushTxFifo+0x20>)
 80043ec:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80043ee:	3a01      	subs	r2, #1
 80043f0:	d005      	beq.n	80043fe <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043f2:	6903      	ldr	r3, [r0, #16]
 80043f4:	f013 0320 	ands.w	r3, r3, #32
 80043f8:	d1f9      	bne.n	80043ee <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80043fa:	4618      	mov	r0, r3
 80043fc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80043fe:	2003      	movs	r0, #3
}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	00030d41 	.word	0x00030d41

08004408 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004408:	2310      	movs	r3, #16
 800440a:	4a06      	ldr	r2, [pc, #24]	; (8004424 <USB_FlushRxFifo+0x1c>)
 800440c:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800440e:	3a01      	subs	r2, #1
 8004410:	d005      	beq.n	800441e <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004412:	6903      	ldr	r3, [r0, #16]
 8004414:	f013 0310 	ands.w	r3, r3, #16
 8004418:	d1f9      	bne.n	800440e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800441a:	4618      	mov	r0, r3
 800441c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800441e:	2003      	movs	r0, #3
}
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	00030d41 	.word	0x00030d41

08004428 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004428:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800442c:	4319      	orrs	r1, r3
 800442e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8004432:	2000      	movs	r0, #0
 8004434:	4770      	bx	lr
	...

08004438 <USB_DevInit>:
{
 8004438:	b084      	sub	sp, #16
 800443a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800443e:	4604      	mov	r4, r0
 8004440:	a807      	add	r0, sp, #28
 8004442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8004446:	2300      	movs	r3, #0
 8004448:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800444a:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 800444c:	4619      	mov	r1, r3
 800444e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004452:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8004456:	3301      	adds	r3, #1
 8004458:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800445a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800445c:	d1f7      	bne.n	800444e <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800445e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004460:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004464:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8004466:	b95f      	cbnz	r7, 8004480 <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004468:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800446a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800446e:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004476:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447e:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8004480:	2500      	movs	r5, #0
 8004482:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004486:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800448a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800448e:	2103      	movs	r1, #3
 8004490:	4620      	mov	r0, r4
 8004492:	f7ff ffc9 	bl	8004428 <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004496:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800449a:	2110      	movs	r1, #16
 800449c:	4620      	mov	r0, r4
 800449e:	f7ff ffa1 	bl	80043e4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80044a2:	4620      	mov	r0, r4
 80044a4:	f7ff ffb0 	bl	8004408 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 80044a8:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044aa:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 80044ac:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 80044ae:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 80044b0:	61f5      	str	r5, [r6, #28]
 80044b2:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044ba:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044be:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c2:	4543      	cmp	r3, r8
 80044c4:	d12f      	bne.n	8004526 <USB_DevInit+0xee>
 80044c6:	2100      	movs	r1, #0
 80044c8:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044cc:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044ce:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044d2:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044d6:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044da:	428b      	cmp	r3, r1
 80044dc:	d134      	bne.n	8004548 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044de:	6933      	ldr	r3, [r6, #16]
 80044e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e4:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044ea:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80044ee:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044f0:	69a3      	ldr	r3, [r4, #24]
 80044f2:	f043 0310 	orr.w	r3, r3, #16
 80044f6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044f8:	69a2      	ldr	r2, [r4, #24]
 80044fa:	4b1c      	ldr	r3, [pc, #112]	; (800456c <USB_DevInit+0x134>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004502:	b11b      	cbz	r3, 800450c <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004504:	69a3      	ldr	r3, [r4, #24]
 8004506:	f043 0308 	orr.w	r3, r3, #8
 800450a:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800450c:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800450e:	bf01      	itttt	eq
 8004510:	69a3      	ldreq	r3, [r4, #24]
 8004512:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8004516:	f043 0304 	orreq.w	r3, r3, #4
 800451a:	61a3      	streq	r3, [r4, #24]
}
 800451c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004520:	2000      	movs	r0, #0
 8004522:	b004      	add	sp, #16
 8004524:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004526:	f8d2 c000 	ldr.w	ip, [r2]
 800452a:	f1bc 0f00 	cmp.w	ip, #0
 800452e:	da09      	bge.n	8004544 <USB_DevInit+0x10c>
      if (i == 0U)
 8004530:	b933      	cbnz	r3, 8004540 <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004532:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004534:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004536:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004538:	f8c2 e008 	str.w	lr, [r2, #8]
 800453c:	3220      	adds	r2, #32
 800453e:	e7c0      	b.n	80044c2 <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004540:	6010      	str	r0, [r2, #0]
 8004542:	e7f7      	b.n	8004534 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004544:	6011      	str	r1, [r2, #0]
 8004546:	e7f5      	b.n	8004534 <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004548:	f8d2 8000 	ldr.w	r8, [r2]
 800454c:	f1b8 0f00 	cmp.w	r8, #0
 8004550:	da0a      	bge.n	8004568 <USB_DevInit+0x130>
      if (i == 0U)
 8004552:	b939      	cbnz	r1, 8004564 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004554:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004558:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800455a:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800455c:	f8c2 c008 	str.w	ip, [r2, #8]
 8004560:	3220      	adds	r2, #32
 8004562:	e7ba      	b.n	80044da <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004564:	6015      	str	r5, [r2, #0]
 8004566:	e7f7      	b.n	8004558 <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004568:	6010      	str	r0, [r2, #0]
 800456a:	e7f5      	b.n	8004558 <USB_DevInit+0x120>
 800456c:	803c3800 	.word	0x803c3800

08004570 <USB_DevDisconnect>:
{
 8004570:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004572:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004576:	f043 0302 	orr.w	r3, r3, #2
 800457a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800457e:	2003      	movs	r0, #3
 8004580:	f7fd f9ac 	bl	80018dc <HAL_Delay>
}
 8004584:	2000      	movs	r0, #0
 8004586:	bd08      	pop	{r3, pc}

08004588 <convertToDegree.constprop.0>:
	}

	/* USER CODE END 3 */
}

static float convertToDegree(int16_t* magValue) {
 8004588:	b513      	push	{r0, r1, r4, lr}
	float degs = atan2(-magValue[1], -magValue[0]) * 180 / PI;
 800458a:	4c19      	ldr	r4, [pc, #100]	; (80045f0 <convertToDegree.constprop.0+0x68>)
 800458c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8004590:	4240      	negs	r0, r0
 8004592:	f7fb ffc7 	bl	8000524 <__aeabi_i2d>
 8004596:	e9cd 0100 	strd	r0, r1, [sp]
 800459a:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 800459e:	4240      	negs	r0, r0
 80045a0:	f7fb ffc0 	bl	8000524 <__aeabi_i2d>
 80045a4:	ed9d 1b00 	vldr	d1, [sp]
 80045a8:	ec41 0b10 	vmov	d0, r0, r1
 80045ac:	f005 fff4 	bl	800a598 <atan2>
 80045b0:	2200      	movs	r2, #0
 80045b2:	ec51 0b10 	vmov	r0, r1, d0
 80045b6:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <convertToDegree.constprop.0+0x6c>)
 80045b8:	f7fc f81a 	bl	80005f0 <__aeabi_dmul>
 80045bc:	a30a      	add	r3, pc, #40	; (adr r3, 80045e8 <convertToDegree.constprop.0+0x60>)
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	f7fc f93f 	bl	8000844 <__aeabi_ddiv>
 80045c6:	f7fc fb0b 	bl	8000be0 <__aeabi_d2f>
 80045ca:	ee00 0a10 	vmov	s0, r0
	if (degs < 0)
 80045ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80045d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		degs += 360;
 80045d6:	bf44      	itt	mi
 80045d8:	eddf 7a07 	vldrmi	s15, [pc, #28]	; 80045f8 <convertToDegree.constprop.0+0x70>
 80045dc:	ee30 0a27 	vaddmi.f32	s0, s0, s15
	return degs;
}
 80045e0:	b002      	add	sp, #8
 80045e2:	bd10      	pop	{r4, pc}
 80045e4:	f3af 8000 	nop.w
 80045e8:	9ba5e354 	.word	0x9ba5e354
 80045ec:	400920c4 	.word	0x400920c4
 80045f0:	2000074c 	.word	0x2000074c
 80045f4:	40668000 	.word	0x40668000
 80045f8:	43b40000 	.word	0x43b40000

080045fc <sendToTerminal.constprop.1>:

}

void sendToTerminal(uint8_t *Data_DAT, uint8_t len_DAT) {

	if (HAL_UART_Transmit(&huart1, (uint8_t*) sendCheck, len_DAT, 5000)
 80045fc:	4602      	mov	r2, r0
 80045fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8004602:	4902      	ldr	r1, [pc, #8]	; (800460c <sendToTerminal.constprop.1+0x10>)
 8004604:	4802      	ldr	r0, [pc, #8]	; (8004610 <sendToTerminal.constprop.1+0x14>)
 8004606:	f7ff bd5e 	b.w	80040c6 <HAL_UART_Transmit>
 800460a:	bf00      	nop
 800460c:	20000de0 	.word	0x20000de0
 8004610:	20000e24 	.word	0x20000e24

08004614 <SystemClock_Config>:
void SystemClock_Config(void) {
 8004614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004616:	b0b9      	sub	sp, #228	; 0xe4
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004618:	2414      	movs	r4, #20
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800461a:	2244      	movs	r2, #68	; 0x44
 800461c:	2100      	movs	r1, #0
 800461e:	a805      	add	r0, sp, #20
 8004620:	f003 fba3 	bl	8007d6a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004624:	4622      	mov	r2, r4
 8004626:	2100      	movs	r1, #0
 8004628:	4668      	mov	r0, sp
 800462a:	f003 fb9e 	bl	8007d6a <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800462e:	2100      	movs	r1, #0
 8004630:	2288      	movs	r2, #136	; 0x88
 8004632:	a816      	add	r0, sp, #88	; 0x58
 8004634:	f003 fb99 	bl	8007d6a <memset>
	HAL_PWR_EnableBkUpAccess();
 8004638:	f7fe f988 	bl	800294c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800463c:	4a22      	ldr	r2, [pc, #136]	; (80046c8 <SystemClock_Config+0xb4>)
 800463e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004642:	f023 0318 	bic.w	r3, r3, #24
 8004646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800464a:	2360      	movs	r3, #96	; 0x60
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800464c:	2501      	movs	r5, #1
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800464e:	2602      	movs	r6, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8004650:	9405      	str	r4, [sp, #20]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004652:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8004654:	2400      	movs	r4, #0
	RCC_OscInitStruct.PLL.PLLN = 40;
 8004656:	2328      	movs	r3, #40	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004658:	2707      	movs	r7, #7
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800465a:	a805      	add	r0, sp, #20
	RCC_OscInitStruct.PLL.PLLN = 40;
 800465c:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800465e:	9507      	str	r5, [sp, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004660:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8004662:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004664:	960f      	str	r6, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004666:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8004668:	9511      	str	r5, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800466a:	9713      	str	r7, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800466c:	9614      	str	r6, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800466e:	9615      	str	r6, [sp, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004670:	f7fe face 	bl	8002c10 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004674:	220f      	movs	r2, #15
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004676:	2104      	movs	r1, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004678:	2303      	movs	r3, #3
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800467a:	4668      	mov	r0, sp
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800467c:	e88d 000c 	stmia.w	sp, {r2, r3}
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004680:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004682:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004684:	9404      	str	r4, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004686:	f7fe fce9 	bl	800305c <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800468a:	4b10      	ldr	r3, [pc, #64]	; (80046cc <SystemClock_Config+0xb8>)
 800468c:	9316      	str	r3, [sp, #88]	; 0x58
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800468e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004692:	9331      	str	r3, [sp, #196]	; 0xc4
	PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8004694:	2318      	movs	r3, #24
 8004696:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8004698:	a816      	add	r0, sp, #88	; 0x58
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800469a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800469e:	931d      	str	r3, [sp, #116]	; 0x74
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80046a0:	9424      	str	r4, [sp, #144]	; 0x90
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80046a2:	9426      	str	r4, [sp, #152]	; 0x98
	PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80046a4:	9427      	str	r4, [sp, #156]	; 0x9c
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80046a6:	942b      	str	r4, [sp, #172]	; 0xac
	PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80046a8:	9436      	str	r4, [sp, #216]	; 0xd8
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80046aa:	9517      	str	r5, [sp, #92]	; 0x5c
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80046ac:	9518      	str	r5, [sp, #96]	; 0x60
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80046ae:	971a      	str	r7, [sp, #104]	; 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80046b0:	961b      	str	r6, [sp, #108]	; 0x6c
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80046b2:	961c      	str	r6, [sp, #112]	; 0x70
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80046b4:	f7fe fe94 	bl	80033e0 <HAL_RCCEx_PeriphCLKConfig>
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80046b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80046bc:	f7fe f956 	bl	800296c <HAL_PWREx_ControlVoltageScaling>
	HAL_RCCEx_EnableMSIPLLMode();
 80046c0:	f7ff f876 	bl	80037b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80046c4:	b039      	add	sp, #228	; 0xe4
 80046c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c8:	40021000 	.word	0x40021000
 80046cc:	0001208d 	.word	0x0001208d

080046d0 <Send_Data>:
	if (HAL_UART_Transmit(&huart4, (uint8_t*) sendBuff, len_DAT, 5000)
 80046d0:	460a      	mov	r2, r1
 80046d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80046d6:	4902      	ldr	r1, [pc, #8]	; (80046e0 <Send_Data+0x10>)
 80046d8:	4802      	ldr	r0, [pc, #8]	; (80046e4 <Send_Data+0x14>)
 80046da:	f7ff bcf4 	b.w	80040c6 <HAL_UART_Transmit>
 80046de:	bf00      	nop
 80046e0:	20000fa4 	.word	0x20000fa4
 80046e4:	20000ee0 	.word	0x20000ee0

080046e8 <getData>:
	if (HAL_UART_Receive(&huart4, (uint8_t*) isJoin, sizeof(isJoin), 5000)
 80046e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80046ec:	2240      	movs	r2, #64	; 0x40
 80046ee:	4902      	ldr	r1, [pc, #8]	; (80046f8 <getData+0x10>)
 80046f0:	4802      	ldr	r0, [pc, #8]	; (80046fc <getData+0x14>)
 80046f2:	f7ff bd3f 	b.w	8004174 <HAL_UART_Receive>
 80046f6:	bf00      	nop
 80046f8:	20000d3c 	.word	0x20000d3c
 80046fc:	20000ee0 	.word	0x20000ee0

08004700 <main>:
int main(void) {
 8004700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004704:	ed2d 8b02 	vpush	{d8}
 8004708:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	HAL_Init();
 800470c:	f7fd f8c8 	bl	80018a0 <HAL_Init>
	SystemClock_Config();
 8004710:	f7ff ff80 	bl	8004614 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004714:	2214      	movs	r2, #20
 8004716:	2100      	movs	r1, #0
 8004718:	a867      	add	r0, sp, #412	; 0x19c
 800471a:	f003 fb26 	bl	8007d6a <memset>
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800471e:	4bb3      	ldr	r3, [pc, #716]	; (80049ec <main+0x2ec>)
	HAL_GPIO_WritePin(GPIOE,
 8004720:	48b3      	ldr	r0, [pc, #716]	; (80049f0 <main+0x2f0>)
	__HAL_RCC_GPIOE_CLK_ENABLE()
 8004722:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004724:	f8df 9304 	ldr.w	r9, [pc, #772]	; 8004a2c <main+0x32c>
	__HAL_RCC_GPIOE_CLK_ENABLE()
 8004728:	f042 0210 	orr.w	r2, r2, #16
 800472c:	64da      	str	r2, [r3, #76]	; 0x4c
 800472e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004730:	f002 0210 	and.w	r2, r2, #16
 8004734:	9262      	str	r2, [sp, #392]	; 0x188
 8004736:	9a62      	ldr	r2, [sp, #392]	; 0x188
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8004738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800473a:	f042 0204 	orr.w	r2, r2, #4
 800473e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004740:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004742:	f002 0204 	and.w	r2, r2, #4
 8004746:	9263      	str	r2, [sp, #396]	; 0x18c
 8004748:	9a63      	ldr	r2, [sp, #396]	; 0x18c
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800474a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800474c:	f042 0201 	orr.w	r2, r2, #1
 8004750:	64da      	str	r2, [r3, #76]	; 0x4c
 8004752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004754:	f002 0201 	and.w	r2, r2, #1
 8004758:	9264      	str	r2, [sp, #400]	; 0x190
 800475a:	9a64      	ldr	r2, [sp, #400]	; 0x190
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800475c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800475e:	f042 0202 	orr.w	r2, r2, #2
 8004762:	64da      	str	r2, [r3, #76]	; 0x4c
 8004764:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004766:	f002 0202 	and.w	r2, r2, #2
 800476a:	9265      	str	r2, [sp, #404]	; 0x194
 800476c:	9a65      	ldr	r2, [sp, #404]	; 0x194
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800476e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004770:	f042 0208 	orr.w	r2, r2, #8
 8004774:	64da      	str	r2, [r3, #76]	; 0x4c
 8004776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	9366      	str	r3, [sp, #408]	; 0x198
	HAL_GPIO_WritePin(GPIOE,
 800477e:	2200      	movs	r2, #0
 8004780:	f240 1115 	movw	r1, #277	; 0x115
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8004784:	9b66      	ldr	r3, [sp, #408]	; 0x198
	HAL_GPIO_WritePin(GPIOE,
 8004786:	f7fd fb5b 	bl	8001e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin,
 800478a:	2200      	movs	r2, #0
 800478c:	f248 1104 	movw	r1, #33028	; 0x8104
 8004790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004794:	f7fd fb54 	bl	8001e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,
 8004798:	2200      	movs	r2, #0
 800479a:	f24f 0134 	movw	r1, #61492	; 0xf034
 800479e:	4895      	ldr	r0, [pc, #596]	; (80049f4 <main+0x2f4>)
 80047a0:	f7fd fb4e 	bl	8001e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,
 80047a4:	2200      	movs	r2, #0
 80047a6:	f243 0181 	movw	r1, #12417	; 0x3081
 80047aa:	4893      	ldr	r0, [pc, #588]	; (80049f8 <main+0x2f8>)
 80047ac:	f7fd fb48 	bl	8001e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin,
 80047b0:	2200      	movs	r2, #0
 80047b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80047b6:	4891      	ldr	r0, [pc, #580]	; (80049fc <main+0x2fc>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b8:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin,
 80047ba:	f7fd fb41 	bl	8001e40 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047be:	2501      	movs	r5, #1
	GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin
 80047c0:	f240 1315 	movw	r3, #277	; 0x115
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047c4:	a967      	add	r1, sp, #412	; 0x19c
 80047c6:	488a      	ldr	r0, [pc, #552]	; (80049f0 <main+0x2f0>)
	GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin | M24SR64_Y_GPO_Pin
 80047c8:	9367      	str	r3, [sp, #412]	; 0x19c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ca:	9469      	str	r4, [sp, #420]	; 0x1a4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047cc:	946a      	str	r4, [sp, #424]	; 0x1a8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047ce:	9568      	str	r5, [sp, #416]	; 0x1a0
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047d0:	f7fd f9c0 	bl	8001b54 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin
 80047d4:	236a      	movs	r3, #106	; 0x6a
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047d6:	a967      	add	r1, sp, #412	; 0x19c
 80047d8:	4885      	ldr	r0, [pc, #532]	; (80049f0 <main+0x2f0>)
	GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin
 80047da:	9367      	str	r3, [sp, #412]	; 0x19c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047dc:	f8cd 91a0 	str.w	r9, [sp, #416]	; 0x1a0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e0:	9469      	str	r4, [sp, #420]	; 0x1a4
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047e2:	f7fd f9b7 	bl	8001b54 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80047e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047ea:	9367      	str	r3, [sp, #412]	; 0x19c
	HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80047ec:	a967      	add	r1, sp, #412	; 0x19c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80047ee:	4b84      	ldr	r3, [pc, #528]	; (8004a00 <main+0x300>)
	HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80047f0:	4882      	ldr	r0, [pc, #520]	; (80049fc <main+0x2fc>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80047f2:	9368      	str	r3, [sp, #416]	; 0x1a0
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80047f4:	f04f 0a0b 	mov.w	sl, #11
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f8:	9469      	str	r4, [sp, #420]	; 0x1a4
	HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80047fa:	f7fd f9ab 	bl	8001b54 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = ARD_A5_Pin | ARD_A4_Pin | ARD_A3_Pin | ARD_A2_Pin
 80047fe:	233f      	movs	r3, #63	; 0x3f
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004800:	a967      	add	r1, sp, #412	; 0x19c
 8004802:	487e      	ldr	r0, [pc, #504]	; (80049fc <main+0x2fc>)
	GPIO_InitStruct.Pin = ARD_A5_Pin | ARD_A4_Pin | ARD_A3_Pin | ARD_A2_Pin
 8004804:	9367      	str	r3, [sp, #412]	; 0x19c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004806:	f8cd a1a0 	str.w	sl, [sp, #416]	; 0x1a0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480a:	9469      	str	r4, [sp, #420]	; 0x1a4
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800480c:	f7fd f9a2 	bl	8001b54 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin;
 8004810:	f248 1304 	movw	r3, #33028	; 0x8104
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004814:	a967      	add	r1, sp, #412	; 0x19c
 8004816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800481a:	f04f 0802 	mov.w	r8, #2
	GPIO_InitStruct.Pin = ARD_D10_Pin | SPBTLE_RF_RST_Pin | ARD_D9_Pin;
 800481e:	9367      	str	r3, [sp, #412]	; 0x19c
	GPIO_InitStruct.Pin = ARD_D4_Pin;
 8004820:	2708      	movs	r7, #8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004822:	9469      	str	r4, [sp, #420]	; 0x1a4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004824:	946a      	str	r4, [sp, #424]	; 0x1a8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004826:	9568      	str	r5, [sp, #416]	; 0x1a0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004828:	f7fd f994 	bl	8001b54 <HAL_GPIO_Init>
	HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800482c:	a967      	add	r1, sp, #412	; 0x19c
 800482e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = ARD_D4_Pin;
 8004832:	9767      	str	r7, [sp, #412]	; 0x19c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004834:	9469      	str	r4, [sp, #420]	; 0x1a4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004836:	946a      	str	r4, [sp, #424]	; 0x1a8
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004838:	f8cd 81a0 	str.w	r8, [sp, #416]	; 0x1a0
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800483c:	956b      	str	r5, [sp, #428]	; 0x1ac
	HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800483e:	f7fd f989 	bl	8001b54 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = ARD_D7_Pin;
 8004842:	2310      	movs	r3, #16
	HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8004844:	a967      	add	r1, sp, #412	; 0x19c
 8004846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800484a:	2603      	movs	r6, #3
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800484c:	f04f 0b05 	mov.w	fp, #5
	GPIO_InitStruct.Pin = ARD_D7_Pin;
 8004850:	9367      	str	r3, [sp, #412]	; 0x19c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004852:	f8cd a1a0 	str.w	sl, [sp, #416]	; 0x1a0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004856:	9469      	str	r4, [sp, #420]	; 0x1a4
	HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8004858:	f7fd f97c 	bl	8001b54 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = ARD_D13_Pin | ARD_D12_Pin | ARD_D11_Pin;
 800485c:	23e0      	movs	r3, #224	; 0xe0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800485e:	a967      	add	r1, sp, #412	; 0x19c
 8004860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = ARD_D13_Pin | ARD_D12_Pin | ARD_D11_Pin;
 8004864:	9367      	str	r3, [sp, #412]	; 0x19c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004866:	9469      	str	r4, [sp, #420]	; 0x1a4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004868:	966a      	str	r6, [sp, #424]	; 0x1a8
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800486a:	f8cd b1ac 	str.w	fp, [sp, #428]	; 0x1ac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486e:	f8cd 81a0 	str.w	r8, [sp, #416]	; 0x1a0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004872:	f7fd f96f 	bl	8001b54 <HAL_GPIO_Init>
	HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8004876:	a967      	add	r1, sp, #412	; 0x19c
 8004878:	485e      	ldr	r0, [pc, #376]	; (80049f4 <main+0x2f4>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800487a:	f8cd 91a0 	str.w	r9, [sp, #416]	; 0x1a0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487e:	9469      	str	r4, [sp, #420]	; 0x1a4
	GPIO_InitStruct.Pin = ARD_D3_Pin;
 8004880:	9567      	str	r5, [sp, #412]	; 0x19c
	HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8004882:	f7fd f967 	bl	8001b54 <HAL_GPIO_Init>
	HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8004886:	a967      	add	r1, sp, #412	; 0x19c
 8004888:	485a      	ldr	r0, [pc, #360]	; (80049f4 <main+0x2f4>)
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800488a:	f8cd a1a0 	str.w	sl, [sp, #416]	; 0x1a0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	9469      	str	r4, [sp, #420]	; 0x1a4
	GPIO_InitStruct.Pin = ARD_D6_Pin;
 8004890:	f8cd 819c 	str.w	r8, [sp, #412]	; 0x19c
	HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8004894:	f7fd f95e 	bl	8001b54 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin
 8004898:	f24f 0334 	movw	r3, #61492	; 0xf034
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800489c:	a967      	add	r1, sp, #412	; 0x19c
 800489e:	4855      	ldr	r0, [pc, #340]	; (80049f4 <main+0x2f4>)
	GPIO_InitStruct.Pin = ARD_D8_Pin | ISM43362_BOOT0_Pin | ISM43362_WAKEUP_Pin
 80048a0:	9367      	str	r3, [sp, #412]	; 0x19c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a2:	9469      	str	r4, [sp, #420]	; 0x1a4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a4:	946a      	str	r4, [sp, #424]	; 0x1a8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048a6:	9568      	str	r5, [sp, #416]	; 0x1a0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048a8:	f7fd f954 	bl	8001b54 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin | LSM6DSL_INT1_EXTI11_Pin
 80048ac:	f64c 4304 	movw	r3, #52228	; 0xcc04
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048b0:	a967      	add	r1, sp, #412	; 0x19c
 80048b2:	4851      	ldr	r0, [pc, #324]	; (80049f8 <main+0x2f8>)
	GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin | LSM6DSL_INT1_EXTI11_Pin
 80048b4:	9367      	str	r3, [sp, #412]	; 0x19c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048b6:	f8cd 91a0 	str.w	r9, [sp, #416]	; 0x1a0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ba:	9469      	str	r4, [sp, #420]	; 0x1a4
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048bc:	f7fd f94a 	bl	8001b54 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | SPBTLE_RF_SPI3_CSN_Pin
 80048c0:	f243 0381 	movw	r3, #12417	; 0x3081
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048c4:	a967      	add	r1, sp, #412	; 0x19c
 80048c6:	484c      	ldr	r0, [pc, #304]	; (80049f8 <main+0x2f8>)
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin | SPBTLE_RF_SPI3_CSN_Pin
 80048c8:	9367      	str	r3, [sp, #412]	; 0x19c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ca:	9469      	str	r4, [sp, #420]	; 0x1a4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048cc:	946a      	str	r4, [sp, #424]	; 0x1a8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ce:	9568      	str	r5, [sp, #416]	; 0x1a0
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048d0:	f7fd f940 	bl	8001b54 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin;
 80048d4:	f44f 7310 	mov.w	r3, #576	; 0x240
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048d8:	a967      	add	r1, sp, #412	; 0x19c
 80048da:	4848      	ldr	r0, [pc, #288]	; (80049fc <main+0x2fc>)
	GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin | LED3_WIFI__LED4_BLE_Pin;
 80048dc:	9367      	str	r3, [sp, #412]	; 0x19c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048de:	9469      	str	r4, [sp, #420]	; 0x1a4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e0:	946a      	str	r4, [sp, #424]	; 0x1a8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048e2:	9568      	str	r5, [sp, #416]	; 0x1a0
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048e4:	f7fd f936 	bl	8001b54 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin | LSM3MDL_DRDY_EXTI8_Pin;
 80048e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048ec:	a967      	add	r1, sp, #412	; 0x19c
 80048ee:	4843      	ldr	r0, [pc, #268]	; (80049fc <main+0x2fc>)
	GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin | LSM3MDL_DRDY_EXTI8_Pin;
 80048f0:	9367      	str	r3, [sp, #412]	; 0x19c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048f2:	f8cd 91a0 	str.w	r9, [sp, #416]	; 0x1a0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f6:	9469      	str	r4, [sp, #420]	; 0x1a4
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048f8:	f7fd f92c 	bl	8001b54 <HAL_GPIO_Init>
	HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80048fc:	a967      	add	r1, sp, #412	; 0x19c
 80048fe:	483e      	ldr	r0, [pc, #248]	; (80049f8 <main+0x2f8>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004900:	9469      	str	r4, [sp, #420]	; 0x1a4
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004902:	f04f 0907 	mov.w	r9, #7
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004906:	966a      	str	r6, [sp, #424]	; 0x1a8
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004908:	f8cd b1ac 	str.w	fp, [sp, #428]	; 0x1ac
	GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800490c:	f8cd 819c 	str.w	r8, [sp, #412]	; 0x19c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004910:	f8cd 81a0 	str.w	r8, [sp, #416]	; 0x1a0
	HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8004914:	f7fd f91e 	bl	8001b54 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin | PMOD_UART2_RTS_Pin
 8004918:	2378      	movs	r3, #120	; 0x78
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800491a:	a967      	add	r1, sp, #412	; 0x19c
 800491c:	4836      	ldr	r0, [pc, #216]	; (80049f8 <main+0x2f8>)
	GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin | PMOD_UART2_RTS_Pin
 800491e:	9367      	str	r3, [sp, #412]	; 0x19c
	GPIO_InitStruct.Pin = ARD_D15_Pin | ARD_D14_Pin;
 8004920:	f44f 7a40 	mov.w	sl, #768	; 0x300
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004924:	9469      	str	r4, [sp, #420]	; 0x1a4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004926:	966a      	str	r6, [sp, #424]	; 0x1a8
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004928:	f8cd 91ac 	str.w	r9, [sp, #428]	; 0x1ac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800492c:	f8cd 81a0 	str.w	r8, [sp, #416]	; 0x1a0
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004930:	f7fd f910 	bl	8001b54 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004934:	2312      	movs	r3, #18
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004936:	966a      	str	r6, [sp, #424]	; 0x1a8
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004938:	a967      	add	r1, sp, #412	; 0x19c
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800493a:	2604      	movs	r6, #4
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800493c:	482d      	ldr	r0, [pc, #180]	; (80049f4 <main+0x2f4>)
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800493e:	9368      	str	r3, [sp, #416]	; 0x1a0
	GPIO_InitStruct.Pin = ARD_D15_Pin | ARD_D14_Pin;
 8004940:	f8cd a19c 	str.w	sl, [sp, #412]	; 0x19c
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004944:	966b      	str	r6, [sp, #428]	; 0x1ac
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004946:	9569      	str	r5, [sp, #420]	; 0x1a4
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004948:	f7fd f904 	bl	8001b54 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800494c:	4622      	mov	r2, r4
 800494e:	4621      	mov	r1, r4
 8004950:	2017      	movs	r0, #23
 8004952:	f7fc ffe3 	bl	800191c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004956:	2017      	movs	r0, #23
 8004958:	f7fd f814 	bl	8001984 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800495c:	4621      	mov	r1, r4
 800495e:	4622      	mov	r2, r4
 8004960:	2028      	movs	r0, #40	; 0x28
 8004962:	f7fc ffdb 	bl	800191c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004966:	2028      	movs	r0, #40	; 0x28
 8004968:	f7fd f80c 	bl	8001984 <HAL_NVIC_EnableIRQ>
	hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800496c:	4825      	ldr	r0, [pc, #148]	; (8004a04 <main+0x304>)
 800496e:	4b26      	ldr	r3, [pc, #152]	; (8004a08 <main+0x308>)
 8004970:	6003      	str	r3, [r0, #0]
	hdfsdm1_channel1.Init.SerialInterface.SpiClock =
 8004972:	6206      	str	r6, [r0, #32]
	hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8004974:	f44f 7380 	mov.w	r3, #256	; 0x100
	hi2c2.Instance = I2C2;
 8004978:	4e24      	ldr	r6, [pc, #144]	; (8004a0c <main+0x30c>)
	hdfsdm1_channel1.Init.OutputClock.Selection =
 800497a:	6084      	str	r4, [r0, #8]
	hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800497c:	6104      	str	r4, [r0, #16]
	hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800497e:	6144      	str	r4, [r0, #20]
	hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8004980:	6183      	str	r3, [r0, #24]
	hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8004982:	61c4      	str	r4, [r0, #28]
	hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8004984:	6244      	str	r4, [r0, #36]	; 0x24
	hdfsdm1_channel1.Init.Offset = 0;
 8004986:	62c4      	str	r4, [r0, #44]	; 0x2c
	hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8004988:	6304      	str	r4, [r0, #48]	; 0x30
	hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800498a:	7105      	strb	r5, [r0, #4]
	hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800498c:	f8c0 800c 	str.w	r8, [r0, #12]
	hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8004990:	6285      	str	r5, [r0, #40]	; 0x28
	if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK) {
 8004992:	f7fd f845 	bl	8001a20 <HAL_DFSDM_ChannelInit>
	hi2c2.Init.Timing = 0x10909CEC;
 8004996:	4a1e      	ldr	r2, [pc, #120]	; (8004a10 <main+0x310>)
 8004998:	4b1e      	ldr	r3, [pc, #120]	; (8004a14 <main+0x314>)
	hi2c2.Init.OwnAddress1 = 0;
 800499a:	60b4      	str	r4, [r6, #8]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800499c:	4630      	mov	r0, r6
	hi2c2.Init.Timing = 0x10909CEC;
 800499e:	e886 000c 	stmia.w	r6, {r2, r3}
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049a2:	6134      	str	r4, [r6, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80049a4:	6174      	str	r4, [r6, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80049a6:	61b4      	str	r4, [r6, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049a8:	61f4      	str	r4, [r6, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049aa:	6234      	str	r4, [r6, #32]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049ac:	60f5      	str	r5, [r6, #12]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80049ae:	f7fd fbdd 	bl	800216c <HAL_I2C_Init>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 80049b2:	4621      	mov	r1, r4
 80049b4:	4630      	mov	r0, r6
 80049b6:	f7fd fee3 	bl	8002780 <HAL_I2CEx_ConfigAnalogFilter>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80049ba:	4621      	mov	r1, r4
 80049bc:	4630      	mov	r0, r6
 80049be:	f7fd ff05 	bl	80027cc <HAL_I2CEx_ConfigDigitalFilter>
	hqspi.Init.ClockPrescaler = 255;
 80049c2:	4915      	ldr	r1, [pc, #84]	; (8004a18 <main+0x318>)
	hqspi.Instance = QUADSPI;
 80049c4:	4815      	ldr	r0, [pc, #84]	; (8004a1c <main+0x31c>)
	hqspi.Init.ClockPrescaler = 255;
 80049c6:	23ff      	movs	r3, #255	; 0xff
 80049c8:	e880 000a 	stmia.w	r0, {r1, r3}
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80049cc:	60c4      	str	r4, [r0, #12]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80049ce:	6144      	str	r4, [r0, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80049d0:	6184      	str	r4, [r0, #24]
	hqspi.Init.FifoThreshold = 1;
 80049d2:	6085      	str	r5, [r0, #8]
	hqspi.Init.FlashSize = 1;
 80049d4:	6105      	str	r5, [r0, #16]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK) {
 80049d6:	f7fe f82d 	bl	8002a34 <HAL_QSPI_Init>
	hspi3.Instance = SPI3;
 80049da:	4811      	ldr	r0, [pc, #68]	; (8004a20 <main+0x320>)
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80049dc:	4b11      	ldr	r3, [pc, #68]	; (8004a24 <main+0x324>)
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80049de:	6347      	str	r7, [r0, #52]	; 0x34
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80049e0:	f44f 7682 	mov.w	r6, #260	; 0x104
	huart1.Instance = USART1;
 80049e4:	4f10      	ldr	r7, [pc, #64]	; (8004a28 <main+0x328>)
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80049e6:	6084      	str	r4, [r0, #8]
 80049e8:	e022      	b.n	8004a30 <main+0x330>
 80049ea:	bf00      	nop
 80049ec:	40021000 	.word	0x40021000
 80049f0:	48001000 	.word	0x48001000
 80049f4:	48000400 	.word	0x48000400
 80049f8:	48000c00 	.word	0x48000c00
 80049fc:	48000800 	.word	0x48000800
 8004a00:	10210000 	.word	0x10210000
 8004a04:	20000830 	.word	0x20000830
 8004a08:	40016020 	.word	0x40016020
 8004a0c:	20000cec 	.word	0x20000cec
 8004a10:	40005800 	.word	0x40005800
 8004a14:	10909cec 	.word	0x10909cec
 8004a18:	a0001000 	.word	0xa0001000
 8004a1c:	20000f60 	.word	0x20000f60
 8004a20:	20000d7c 	.word	0x20000d7c
 8004a24:	40003c00 	.word	0x40003c00
 8004a28:	20000e24 	.word	0x20000e24
 8004a2c:	10110000 	.word	0x10110000
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8004a30:	e880 0048 	stmia.w	r0, {r3, r6}
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8004a34:	f44f 7300 	mov.w	r3, #512	; 0x200
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8004a38:	f8c0 a00c 	str.w	sl, [r0, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a3c:	6104      	str	r4, [r0, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a3e:	6144      	str	r4, [r0, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8004a40:	6183      	str	r3, [r0, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a42:	61c4      	str	r4, [r0, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a44:	6204      	str	r4, [r0, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a46:	6244      	str	r4, [r0, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a48:	6284      	str	r4, [r0, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 7;
 8004a4a:	f8c0 902c 	str.w	r9, [r0, #44]	; 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004a4e:	6304      	str	r4, [r0, #48]	; 0x30
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8004a50:	f7fe feb6 	bl	80037c0 <HAL_SPI_Init>
	huart1.Init.BaudRate = 9600;
 8004a54:	4bcd      	ldr	r3, [pc, #820]	; (8004d8c <main+0x68c>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a56:	60bc      	str	r4, [r7, #8]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004a58:	f04f 0a0c 	mov.w	sl, #12
	huart1.Init.BaudRate = 9600;
 8004a5c:	f44f 5b16 	mov.w	fp, #9600	; 0x2580
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8004a60:	4638      	mov	r0, r7
	huart1.Init.BaudRate = 9600;
 8004a62:	e887 0808 	stmia.w	r7, {r3, fp}
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004a66:	60fc      	str	r4, [r7, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004a68:	613c      	str	r4, [r7, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004a6a:	f8c7 a014 	str.w	sl, [r7, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a6e:	61bc      	str	r4, [r7, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a70:	61fc      	str	r4, [r7, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a72:	623c      	str	r4, [r7, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a74:	627c      	str	r4, [r7, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8004a76:	f7ff fc1e 	bl	80042b6 <HAL_UART_Init>
	huart3.Instance = USART3;
 8004a7a:	48c5      	ldr	r0, [pc, #788]	; (8004d90 <main+0x690>)
	huart3.Init.BaudRate = 115200;
 8004a7c:	4bc5      	ldr	r3, [pc, #788]	; (8004d94 <main+0x694>)
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a7e:	6084      	str	r4, [r0, #8]
	huart3.Init.BaudRate = 115200;
 8004a80:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8004a84:	e880 4008 	stmia.w	r0, {r3, lr}
	huart3.Init.StopBits = UART_STOPBITS_1;
 8004a88:	60c4      	str	r4, [r0, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8004a8a:	6104      	str	r4, [r0, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8004a8c:	f8c0 a014 	str.w	sl, [r0, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a90:	6184      	str	r4, [r0, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a92:	61c4      	str	r4, [r0, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a94:	6204      	str	r4, [r0, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a96:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8004a98:	f7ff fc0d 	bl	80042b6 <HAL_UART_Init>
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004a9c:	48be      	ldr	r0, [pc, #760]	; (8004d98 <main+0x698>)
	htim6.Instance = TIM6;
 8004a9e:	f8df 9354 	ldr.w	r9, [pc, #852]	; 8004df4 <main+0x6f4>
	hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8004aa2:	6144      	str	r4, [r0, #20]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004aa4:	f04f 0c06 	mov.w	ip, #6
 8004aa8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004aac:	e880 1008 	stmia.w	r0, {r3, ip}
	hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004ab0:	61c4      	str	r4, [r0, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004ab2:	6204      	str	r4, [r0, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004ab4:	6244      	str	r4, [r0, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8004ab6:	6284      	str	r4, [r0, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004ab8:	6304      	str	r4, [r0, #48]	; 0x30
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004aba:	62c4      	str	r4, [r0, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004abc:	f8c0 800c 	str.w	r8, [r0, #12]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004ac0:	f8c0 8018 	str.w	r8, [r0, #24]
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8004ac4:	f7fd fea7 	bl	8002816 <HAL_PCD_Init>
	htim6.Init.Prescaler = 999;
 8004ac8:	4ab4      	ldr	r2, [pc, #720]	; (8004d9c <main+0x69c>)
	huart4.Instance = UART4;
 8004aca:	4eb5      	ldr	r6, [pc, #724]	; (8004da0 <main+0x6a0>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004acc:	9467      	str	r4, [sp, #412]	; 0x19c
	htim6.Init.Prescaler = 999;
 8004ace:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004ad2:	e889 000c 	stmia.w	r9, {r2, r3}
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8004ad6:	4648      	mov	r0, r9
	htim6.Init.Period = 40000;
 8004ad8:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004adc:	f8c9 300c 	str.w	r3, [r9, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004ae0:	9468      	str	r4, [sp, #416]	; 0x1a0
 8004ae2:	9469      	str	r4, [sp, #420]	; 0x1a4
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ae4:	f8c9 4008 	str.w	r4, [r9, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ae8:	f8c9 4018 	str.w	r4, [r9, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8004aec:	f7fe ffd4 	bl	8003a98 <HAL_TIM_Base_Init>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8004af0:	a967      	add	r1, sp, #412	; 0x19c
 8004af2:	4648      	mov	r0, r9
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004af4:	9467      	str	r4, [sp, #412]	; 0x19c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004af6:	9469      	str	r4, [sp, #420]	; 0x1a4
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8004af8:	f7fe ffe8 	bl	8003acc <HAL_TIMEx_MasterConfigSynchronization>
	huart4.Instance = UART4;
 8004afc:	4ba9      	ldr	r3, [pc, #676]	; (8004da4 <main+0x6a4>)
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004afe:	60b4      	str	r4, [r6, #8]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8004b00:	4630      	mov	r0, r6
	huart4.Init.BaudRate = 9600;
 8004b02:	e886 0808 	stmia.w	r6, {r3, fp}
	huart4.Init.StopBits = UART_STOPBITS_1;
 8004b06:	60f4      	str	r4, [r6, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8004b08:	6134      	str	r4, [r6, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8004b0a:	f8c6 a014 	str.w	sl, [r6, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b0e:	61b4      	str	r4, [r6, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b10:	61f4      	str	r4, [r6, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b12:	6234      	str	r4, [r6, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b14:	6274      	str	r4, [r6, #36]	; 0x24
	GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 8004b16:	f04f 0a40 	mov.w	sl, #64	; 0x40
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8004b1a:	f7ff fbcc 	bl	80042b6 <HAL_UART_Init>
	BSP_PSENSOR_Init();
 8004b1e:	f7fc fb79 	bl	8001214 <BSP_PSENSOR_Init>
	BSP_TSENSOR_Init();
 8004b22:	f7fc fb93 	bl	800124c <BSP_TSENSOR_Init>
	BSP_GYRO_Init();
 8004b26:	f7fc fb0d 	bl	8001144 <BSP_GYRO_Init>
	BSP_ACCELERO_Init();
 8004b2a:	f7fc faed 	bl	8001108 <BSP_ACCELERO_Init>
	BSP_HSENSOR_Init();
 8004b2e:	f7fc fb27 	bl	8001180 <BSP_HSENSOR_Init>
	BSP_MAGNETO_Init();
 8004b32:	f7fc fb41 	bl	80011b8 <BSP_MAGNETO_Init>
	uint16_t vl53l0x_id = 0;
 8004b36:	f8ad 4186 	strh.w	r4, [sp, #390]	; 0x186
	SENSOR_IO_Init();
 8004b3a:	f7fc fa93 	bl	8001064 <SENSOR_IO_Init>
	HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8004b3e:	a967      	add	r1, sp, #412	; 0x19c
 8004b40:	4899      	ldr	r0, [pc, #612]	; (8004da8 <main+0x6a8>)
	GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 8004b42:	f8cd a19c 	str.w	sl, [sp, #412]	; 0x19c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b46:	9568      	str	r5, [sp, #416]	; 0x1a0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b48:	9569      	str	r5, [sp, #420]	; 0x1a4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b4a:	f8cd 81a8 	str.w	r8, [sp, #424]	; 0x1a8
	HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8004b4e:	f7fd f801 	bl	8001b54 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 8004b52:	462a      	mov	r2, r5
 8004b54:	4651      	mov	r1, sl
 8004b56:	4894      	ldr	r0, [pc, #592]	; (8004da8 <main+0x6a8>)
 8004b58:	f7fd f972 	bl	8001e40 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8004b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b60:	f7fc febc 	bl	80018dc <HAL_Delay>
	memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8004b64:	4621      	mov	r1, r4
			== VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo)) {
 8004b66:	4c91      	ldr	r4, [pc, #580]	; (8004dac <main+0x6ac>)
	memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8004b68:	2263      	movs	r2, #99	; 0x63
 8004b6a:	a867      	add	r0, sp, #412	; 0x19c
 8004b6c:	f003 f8fd 	bl	8007d6a <memset>
			== VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo)) {
 8004b70:	a967      	add	r1, sp, #412	; 0x19c
 8004b72:	4620      	mov	r0, r4
 8004b74:	f000 fca6 	bl	80054c4 <VL53L0X_GetDeviceInfo>
	if (VL53L0X_ERROR_NONE
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	f040 817c 	bne.w	8004e76 <main+0x776>
				== VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8004b7e:	f50d 72c3 	add.w	r2, sp, #390	; 0x186
 8004b82:	21c0      	movs	r1, #192	; 0xc0
 8004b84:	4620      	mov	r0, r4
 8004b86:	f002 ff8f 	bl	8007aa8 <VL53L0X_RdWord>
		if (VL53L0X_ERROR_NONE
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	f040 8171 	bne.w	8004e72 <main+0x772>
			if (vl53l0x_id == VL53L0X_ID) {
 8004b90:	f8bd 2186 	ldrh.w	r2, [sp, #390]	; 0x186
 8004b94:	f64e 63aa 	movw	r3, #61098	; 0xeeaa
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d112      	bne.n	8004bc2 <main+0x4c2>
				if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev)) {
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f000 fe71 	bl	8005884 <VL53L0X_DataInit>
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	f040 8161 	bne.w	8004e6a <main+0x76a>
					SetupSingleShot(Dev);
 8004ba8:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8004bac:	f104 0110 	add.w	r1, r4, #16
 8004bb0:	4668      	mov	r0, sp
					Dev.Present = 1;
 8004bb2:	f8c4 5164 	str.w	r5, [r4, #356]	; 0x164
					SetupSingleShot(Dev);
 8004bb6:	f003 f8cd 	bl	8007d54 <memcpy>
 8004bba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004bbe:	f002 fff7 	bl	8007bb0 <SetupSingleShot>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8004bc2:	683a      	ldr	r2, [r7, #0]
	len = sprintf(sendCheck, "Hi\n");
 8004bc4:	497a      	ldr	r1, [pc, #488]	; (8004db0 <main+0x6b0>)
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8004bc6:	6813      	ldr	r3, [r2, #0]
	len = sprintf(sendCheck, "Hi\n");
 8004bc8:	4c7a      	ldr	r4, [pc, #488]	; (8004db4 <main+0x6b4>)
 8004bca:	487b      	ldr	r0, [pc, #492]	; (8004db8 <main+0x6b8>)
		len = sprintf(sendBuff, "AT+NJS=?\n");
 8004bcc:	4f7b      	ldr	r7, [pc, #492]	; (8004dbc <main+0x6bc>)
 8004bce:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8004dc4 <main+0x6c4>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8004bd2:	f043 0320 	orr.w	r3, r3, #32
 8004bd6:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(&huart4, UART_IT_RXNE);
 8004bd8:	6832      	ldr	r2, [r6, #0]
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	f043 0320 	orr.w	r3, r3, #32
 8004be0:	6013      	str	r3, [r2, #0]
	__HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 8004be2:	f8d9 2000 	ldr.w	r2, [r9]
 8004be6:	68d3      	ldr	r3, [r2, #12]
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	60d3      	str	r3, [r2, #12]
	len = sprintf(sendCheck, "Hi\n");
 8004bee:	2503      	movs	r5, #3
 8004bf0:	f003 fdb8 	bl	8008764 <strcpy>
	sendToTerminal(sendCheck, len);
 8004bf4:	4628      	mov	r0, r5
	len = sprintf(sendCheck, "Hi\n");
 8004bf6:	7025      	strb	r5, [r4, #0]
	sendToTerminal(sendCheck, len);
 8004bf8:	f7ff fd00 	bl	80045fc <sendToTerminal.constprop.1>
	len = sprintf(sendBuff, "AT\n");
 8004bfc:	4970      	ldr	r1, [pc, #448]	; (8004dc0 <main+0x6c0>)
 8004bfe:	4871      	ldr	r0, [pc, #452]	; (8004dc4 <main+0x6c4>)
 8004c00:	f003 fdb0 	bl	8008764 <strcpy>
	Send_Data(sendBuff, len);
 8004c04:	4629      	mov	r1, r5
 8004c06:	486f      	ldr	r0, [pc, #444]	; (8004dc4 <main+0x6c4>)
	len = sprintf(sendBuff, "AT\n");
 8004c08:	7025      	strb	r5, [r4, #0]
	Send_Data(sendBuff, len);
 8004c0a:	f7ff fd61 	bl	80046d0 <Send_Data>
	HAL_Delay(time);
 8004c0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c12:	f7fc fe63 	bl	80018dc <HAL_Delay>
	len = sprintf(sendBuff, "AT+JOIN\n");
 8004c16:	496c      	ldr	r1, [pc, #432]	; (8004dc8 <main+0x6c8>)
 8004c18:	486a      	ldr	r0, [pc, #424]	; (8004dc4 <main+0x6c4>)
		len = sprintf(sendCheck, "AT+NJS=?\n");
 8004c1a:	4d67      	ldr	r5, [pc, #412]	; (8004db8 <main+0x6b8>)
	len = sprintf(sendBuff, "AT+JOIN\n");
 8004c1c:	f003 fda2 	bl	8008764 <strcpy>
 8004c20:	2108      	movs	r1, #8
	Send_Data(sendBuff, len);
 8004c22:	4868      	ldr	r0, [pc, #416]	; (8004dc4 <main+0x6c4>)
	len = sprintf(sendBuff, "AT+JOIN\n");
 8004c24:	7021      	strb	r1, [r4, #0]
	Send_Data(sendBuff, len);
 8004c26:	f7ff fd53 	bl	80046d0 <Send_Data>
	HAL_Delay(time);
 8004c2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004c2e:	f7fc fe55 	bl	80018dc <HAL_Delay>
		len = sprintf(sendBuff, "AT+NJS=?\n");
 8004c32:	2609      	movs	r6, #9
 8004c34:	4639      	mov	r1, r7
 8004c36:	4640      	mov	r0, r8
 8004c38:	f003 fd94 	bl	8008764 <strcpy>
 8004c3c:	7026      	strb	r6, [r4, #0]
		getData();
 8004c3e:	f7ff fd53 	bl	80046e8 <getData>
		Send_Data(sendBuff, len);
 8004c42:	7821      	ldrb	r1, [r4, #0]
 8004c44:	4640      	mov	r0, r8
 8004c46:	f7ff fd43 	bl	80046d0 <Send_Data>
		len = sprintf(sendCheck, "AT+NJS=?\n");
 8004c4a:	4639      	mov	r1, r7
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f003 fd89 	bl	8008764 <strcpy>
		sendToTerminal(sendCheck, len);
 8004c52:	4630      	mov	r0, r6
		len = sprintf(sendCheck, "AT+NJS=?\n");
 8004c54:	7026      	strb	r6, [r4, #0]
		sendToTerminal(sendCheck, len);
 8004c56:	f7ff fcd1 	bl	80045fc <sendToTerminal.constprop.1>
		len = sprintf(sendCheck, "Status:%s\n\n\n", (char*) isJoin);
 8004c5a:	4e5c      	ldr	r6, [pc, #368]	; (8004dcc <main+0x6cc>)
		len = sprintf(sendCheck, "waiting\n");
 8004c5c:	495c      	ldr	r1, [pc, #368]	; (8004dd0 <main+0x6d0>)
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f003 fd80 	bl	8008764 <strcpy>
 8004c64:	2008      	movs	r0, #8
 8004c66:	7020      	strb	r0, [r4, #0]
		sendToTerminal(sendCheck, len);
 8004c68:	f7ff fcc8 	bl	80045fc <sendToTerminal.constprop.1>
		len = sprintf(sendCheck, "Status:%s\n\n\n", (char*) isJoin);
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	4959      	ldr	r1, [pc, #356]	; (8004dd4 <main+0x6d4>)
 8004c70:	4628      	mov	r0, r5
 8004c72:	f003 fd53 	bl	800871c <siprintf>
 8004c76:	b2c0      	uxtb	r0, r0
 8004c78:	7020      	strb	r0, [r4, #0]
		sendToTerminal(sendCheck, len);
 8004c7a:	f7ff fcbf 	bl	80045fc <sendToTerminal.constprop.1>
		isConnect = isJoin[0];
 8004c7e:	7836      	ldrb	r6, [r6, #0]
	HAL_Delay(time);
 8004c80:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004c84:	f7fc fe2a 	bl	80018dc <HAL_Delay>
	while (isConnect != '1') {
 8004c88:	2e31      	cmp	r6, #49	; 0x31
 8004c8a:	d1d2      	bne.n	8004c32 <main+0x532>
	len = sprintf(sendCheck, "Cennected to lora !\n");
 8004c8c:	4952      	ldr	r1, [pc, #328]	; (8004dd8 <main+0x6d8>)
 8004c8e:	484a      	ldr	r0, [pc, #296]	; (8004db8 <main+0x6b8>)
 8004c90:	eddf 8a52 	vldr	s17, [pc, #328]	; 8004ddc <main+0x6dc>
 8004c94:	f003 fd66 	bl	8008764 <strcpy>
 8004c98:	2014      	movs	r0, #20
 8004c9a:	7020      	strb	r0, [r4, #0]
	sendToTerminal(sendCheck, len);
 8004c9c:	f7ff fcae 	bl	80045fc <sendToTerminal.constprop.1>
	BSP_MAGNETO_GetXYZ(Mag_Value);
 8004ca0:	484f      	ldr	r0, [pc, #316]	; (8004de0 <main+0x6e0>)
 8004ca2:	f7fc faad 	bl	8001200 <BSP_MAGNETO_GetXYZ>
	float initMagDegs = convertToDegree(Mag_Value);
 8004ca6:	f7ff fc6f 	bl	8004588 <convertToDegree.constprop.0>
	len = sprintf(sendCheck, "Test");
 8004caa:	494e      	ldr	r1, [pc, #312]	; (8004de4 <main+0x6e4>)
 8004cac:	4842      	ldr	r0, [pc, #264]	; (8004db8 <main+0x6b8>)
	float initMagDegs = convertToDegree(Mag_Value);
 8004cae:	eeb0 8a40 	vmov.f32	s16, s0
	len = sprintf(sendCheck, "Test");
 8004cb2:	f003 fd57 	bl	8008764 <strcpy>
 8004cb6:	2004      	movs	r0, #4
 8004cb8:	7020      	strb	r0, [r4, #0]
	sendToTerminal(sendCheck, len);
 8004cba:	f7ff fc9f 	bl	80045fc <sendToTerminal.constprop.1>
	len = sprintf(sendCheck, "Degs: %f\n", initMagDegs);
 8004cbe:	ee18 0a10 	vmov	r0, s16
 8004cc2:	f7fb fc41 	bl	8000548 <__aeabi_f2d>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	483b      	ldr	r0, [pc, #236]	; (8004db8 <main+0x6b8>)
 8004ccc:	4946      	ldr	r1, [pc, #280]	; (8004de8 <main+0x6e8>)
 8004cce:	f003 fd25 	bl	800871c <siprintf>
 8004cd2:	b2c0      	uxtb	r0, r0
 8004cd4:	7020      	strb	r0, [r4, #0]
	sendToTerminal(sendCheck, len);
 8004cd6:	f7ff fc91 	bl	80045fc <sendToTerminal.constprop.1>
	if ((initMagDegs > 0.0) && (initMagDegs <= 90.0)) {
 8004cda:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce2:	dd05      	ble.n	8004cf0 <main+0x5f0>
 8004ce4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cec:	f240 80c5 	bls.w	8004e7a <main+0x77a>
	} else if ((initMagDegs > 90.0) && (initMagDegs <= 180.0)) {
 8004cf0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8004df8 <main+0x6f8>
 8004cfc:	dd05      	ble.n	8004d0a <main+0x60a>
 8004cfe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d06:	f240 80bb 	bls.w	8004e80 <main+0x780>
	} else if ((initMagDegs > 180.0) && (initMagDegs <= 270.0)) {
 8004d0a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d12:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8004dfc <main+0x6fc>
 8004d16:	dd05      	ble.n	8004d24 <main+0x624>
 8004d18:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d20:	f240 80b1 	bls.w	8004e86 <main+0x786>
	uint8_t currentQ = 0;
 8004d24:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2c:	bfcc      	ite	gt
 8004d2e:	f04f 0804 	movgt.w	r8, #4
 8004d32:	f04f 0800 	movle.w	r8, #0
		currentQ = 4;
 8004d36:	2500      	movs	r5, #0
		len = sprintf(sendCheck, "Current Degs: %f\n", currentMagDegs);
 8004d38:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8004db8 <main+0x6b8>
		currentQ = 4;
 8004d3c:	f04f 093c 	mov.w	r9, #60	; 0x3c
 8004d40:	462e      	mov	r6, r5
 8004d42:	462f      	mov	r7, r5
		BSP_MAGNETO_GetXYZ(Mag_Value);
 8004d44:	4826      	ldr	r0, [pc, #152]	; (8004de0 <main+0x6e0>)
 8004d46:	f7fc fa5b 	bl	8001200 <BSP_MAGNETO_GetXYZ>
		float currentMagDegs = convertToDegree(Mag_Value);
 8004d4a:	f7ff fc1d 	bl	8004588 <convertToDegree.constprop.0>
		len = sprintf(sendCheck, "Current Degs: %f\n", currentMagDegs);
 8004d4e:	ee10 0a10 	vmov	r0, s0
		float currentMagDegs = convertToDegree(Mag_Value);
 8004d52:	eeb0 8a40 	vmov.f32	s16, s0
		len = sprintf(sendCheck, "Current Degs: %f\n", currentMagDegs);
 8004d56:	f7fb fbf7 	bl	8000548 <__aeabi_f2d>
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	4923      	ldr	r1, [pc, #140]	; (8004dec <main+0x6ec>)
 8004d60:	4650      	mov	r0, sl
 8004d62:	f003 fcdb 	bl	800871c <siprintf>
 8004d66:	b2c0      	uxtb	r0, r0
 8004d68:	7020      	strb	r0, [r4, #0]
		sendToTerminal(sendCheck, len);
 8004d6a:	f7ff fc47 	bl	80045fc <sendToTerminal.constprop.1>
		len = sprintf(sendCheck, "Current Q: %u\n", currentQ);
 8004d6e:	4642      	mov	r2, r8
 8004d70:	491f      	ldr	r1, [pc, #124]	; (8004df0 <main+0x6f0>)
 8004d72:	4650      	mov	r0, sl
 8004d74:	f003 fcd2 	bl	800871c <siprintf>
 8004d78:	b2c0      	uxtb	r0, r0
 8004d7a:	7020      	strb	r0, [r4, #0]
		sendToTerminal(sendCheck, len);
 8004d7c:	f7ff fc3e 	bl	80045fc <sendToTerminal.constprop.1>
		if ((currentMagDegs > 0.0) && (currentMagDegs <= 90.0)) {
 8004d80:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d88:	dd3f      	ble.n	8004e0a <main+0x70a>
 8004d8a:	e039      	b.n	8004e00 <main+0x700>
 8004d8c:	40013800 	.word	0x40013800
 8004d90:	2000086c 	.word	0x2000086c
 8004d94:	40004800 	.word	0x40004800
 8004d98:	200008e4 	.word	0x200008e4
 8004d9c:	40001000 	.word	0x40001000
 8004da0:	20000ee0 	.word	0x20000ee0
 8004da4:	40004c00 	.word	0x40004c00
 8004da8:	48000800 	.word	0x48000800
 8004dac:	200000c8 	.word	0x200000c8
 8004db0:	0800ac50 	.word	0x0800ac50
 8004db4:	20000752 	.word	0x20000752
 8004db8:	20000de0 	.word	0x20000de0
 8004dbc:	0800ac61 	.word	0x0800ac61
 8004dc0:	0800ac54 	.word	0x0800ac54
 8004dc4:	20000fa4 	.word	0x20000fa4
 8004dc8:	0800ac58 	.word	0x0800ac58
 8004dcc:	20000d3c 	.word	0x20000d3c
 8004dd0:	0800ac6b 	.word	0x0800ac6b
 8004dd4:	0800ac74 	.word	0x0800ac74
 8004dd8:	0800ac81 	.word	0x0800ac81
 8004ddc:	42b40000 	.word	0x42b40000
 8004de0:	2000074c 	.word	0x2000074c
 8004de4:	0800ac96 	.word	0x0800ac96
 8004de8:	0800aca3 	.word	0x0800aca3
 8004dec:	0800ac9b 	.word	0x0800ac9b
 8004df0:	0800acad 	.word	0x0800acad
 8004df4:	20000e9c 	.word	0x20000e9c
 8004df8:	43340000 	.word	0x43340000
 8004dfc:	43870000 	.word	0x43870000
 8004e00:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e08:	d940      	bls.n	8004e8c <main+0x78c>
		} else if ((currentMagDegs > 90.0) && (currentMagDegs <= 180.0)) {
 8004e0a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e12:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 8004df8 <main+0x6f8>
 8004e16:	dd04      	ble.n	8004e22 <main+0x722>
 8004e18:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e20:	d936      	bls.n	8004e90 <main+0x790>
		} else if ((currentMagDegs > 180.0) && (currentMagDegs <= 270.0)) {
 8004e22:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2a:	ed5f 7a0c 	vldr	s15, [pc, #-48]	; 8004dfc <main+0x6fc>
 8004e2e:	dd04      	ble.n	8004e3a <main+0x73a>
 8004e30:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e38:	d92c      	bls.n	8004e94 <main+0x794>
			nextQ = 4;
 8004e3a:	eeb4 8a67 	vcmp.f32	s16, s15
 8004e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e42:	bfc8      	it	gt
 8004e44:	2504      	movgt	r5, #4
		len = sprintf(sendCheck, "next Q: %u\n", nextQ);
 8004e46:	462a      	mov	r2, r5
 8004e48:	494d      	ldr	r1, [pc, #308]	; (8004f80 <main+0x880>)
 8004e4a:	4650      	mov	r0, sl
 8004e4c:	f003 fc66 	bl	800871c <siprintf>
 8004e50:	b2c0      	uxtb	r0, r0
 8004e52:	7020      	strb	r0, [r4, #0]
		sendToTerminal(sendCheck, len);
 8004e54:	f7ff fbd2 	bl	80045fc <sendToTerminal.constprop.1>
		if (currentQ == 4 && nextQ == 1) {
 8004e58:	f1b8 0f04 	cmp.w	r8, #4
 8004e5c:	d11c      	bne.n	8004e98 <main+0x798>
 8004e5e:	2d01      	cmp	r5, #1
 8004e60:	d122      	bne.n	8004ea8 <main+0x7a8>
			pIn++;
 8004e62:	3701      	adds	r7, #1
 8004e64:	b2ff      	uxtb	r7, r7
			pOut++;
 8004e66:	46a8      	mov	r8, r5
 8004e68:	e021      	b.n	8004eae <main+0x7ae>
					printf("VL53L0X Time of Flight Failed to send its ID!\n");
 8004e6a:	4846      	ldr	r0, [pc, #280]	; (8004f84 <main+0x884>)
		printf("VL53L0X Time of Flight Failed to get infos!\n");
 8004e6c:	f003 fc4e 	bl	800870c <puts>
 8004e70:	e6a7      	b.n	8004bc2 <main+0x4c2>
			printf("VL53L0X Time of Flight Failed to Initialize!\n");
 8004e72:	4845      	ldr	r0, [pc, #276]	; (8004f88 <main+0x888>)
 8004e74:	e7fa      	b.n	8004e6c <main+0x76c>
		printf("VL53L0X Time of Flight Failed to get infos!\n");
 8004e76:	4845      	ldr	r0, [pc, #276]	; (8004f8c <main+0x88c>)
 8004e78:	e7f8      	b.n	8004e6c <main+0x76c>
		currentQ = 1;
 8004e7a:	f04f 0801 	mov.w	r8, #1
 8004e7e:	e75a      	b.n	8004d36 <main+0x636>
		currentQ = 2;
 8004e80:	f04f 0802 	mov.w	r8, #2
 8004e84:	e757      	b.n	8004d36 <main+0x636>
		currentQ = 3;
 8004e86:	f04f 0803 	mov.w	r8, #3
 8004e8a:	e754      	b.n	8004d36 <main+0x636>
			nextQ = 1;
 8004e8c:	2501      	movs	r5, #1
 8004e8e:	e7da      	b.n	8004e46 <main+0x746>
			nextQ = 2;
 8004e90:	2502      	movs	r5, #2
 8004e92:	e7d8      	b.n	8004e46 <main+0x746>
			nextQ = 3;
 8004e94:	2503      	movs	r5, #3
 8004e96:	e7d6      	b.n	8004e46 <main+0x746>
		} else if (currentQ == 1 && nextQ == 4) {
 8004e98:	f1b8 0f01 	cmp.w	r8, #1
 8004e9c:	d104      	bne.n	8004ea8 <main+0x7a8>
 8004e9e:	2d04      	cmp	r5, #4
 8004ea0:	d102      	bne.n	8004ea8 <main+0x7a8>
			pOut++;
 8004ea2:	3601      	adds	r6, #1
 8004ea4:	b2f6      	uxtb	r6, r6
 8004ea6:	e7de      	b.n	8004e66 <main+0x766>
		} else if (nextQ < currentQ) {
 8004ea8:	45a8      	cmp	r8, r5
 8004eaa:	d8da      	bhi.n	8004e62 <main+0x762>
		} else if (nextQ > currentQ) {
 8004eac:	d3f9      	bcc.n	8004ea2 <main+0x7a2>
		len = sprintf(sendCheck, "current P in: %u\n", pIn);
 8004eae:	463a      	mov	r2, r7
 8004eb0:	4937      	ldr	r1, [pc, #220]	; (8004f90 <main+0x890>)
 8004eb2:	4650      	mov	r0, sl
 8004eb4:	f003 fc32 	bl	800871c <siprintf>
 8004eb8:	b2c0      	uxtb	r0, r0
 8004eba:	7020      	strb	r0, [r4, #0]
		sendToTerminal(sendCheck, len);
 8004ebc:	f7ff fb9e 	bl	80045fc <sendToTerminal.constprop.1>
		len = sprintf(sendCheck, "Current P out: %u\n\n", pOut);
 8004ec0:	4632      	mov	r2, r6
 8004ec2:	4934      	ldr	r1, [pc, #208]	; (8004f94 <main+0x894>)
 8004ec4:	4650      	mov	r0, sl
 8004ec6:	f003 fc29 	bl	800871c <siprintf>
		if (--timeCount <= 0) {
 8004eca:	f109 39ff 	add.w	r9, r9, #4294967295
		len = sprintf(sendCheck, "Current P out: %u\n\n", pOut);
 8004ece:	b2c0      	uxtb	r0, r0
 8004ed0:	7020      	strb	r0, [r4, #0]
		sendToTerminal(sendCheck, len);
 8004ed2:	f7ff fb93 	bl	80045fc <sendToTerminal.constprop.1>
		if (--timeCount <= 0) {
 8004ed6:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8004eda:	d14c      	bne.n	8004f76 <main+0x876>
			Pressure_Value = BSP_PSENSOR_ReadPressure();
 8004edc:	f7fc f9ae 	bl	800123c <BSP_PSENSOR_ReadPressure>
 8004ee0:	4b2d      	ldr	r3, [pc, #180]	; (8004f98 <main+0x898>)
			Hum_Value = BSP_HSENSOR_ReadHumidity();
 8004ee2:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8004fbc <main+0x8bc>
			Pressure_Value = BSP_PSENSOR_ReadPressure();
 8004ee6:	ed83 0a00 	vstr	s0, [r3]
			Temp_Value = BSP_TSENSOR_ReadTemp();
 8004eea:	f7fc f9c1 	bl	8001270 <BSP_TSENSOR_ReadTemp>
 8004eee:	4b2b      	ldr	r3, [pc, #172]	; (8004f9c <main+0x89c>)
 8004ef0:	935f      	str	r3, [sp, #380]	; 0x17c
 8004ef2:	ed83 0a00 	vstr	s0, [r3]
			Hum_Value = BSP_HSENSOR_ReadHumidity();
 8004ef6:	f7fc f957 	bl	80011a8 <BSP_HSENSOR_ReadHumidity>
			BSP_ACCELERO_AccGetXYZ(Acc_Value);
 8004efa:	4829      	ldr	r0, [pc, #164]	; (8004fa0 <main+0x8a0>)
			Hum_Value = BSP_HSENSOR_ReadHumidity();
 8004efc:	ed8b 0a00 	vstr	s0, [fp]
			BSP_ACCELERO_AccGetXYZ(Acc_Value);
 8004f00:	f7fc f916 	bl	8001130 <BSP_ACCELERO_AccGetXYZ>
			BSP_GYRO_GetXYZ(Gyro_Value);
 8004f04:	4827      	ldr	r0, [pc, #156]	; (8004fa4 <main+0x8a4>)
 8004f06:	f7fc f931 	bl	800116c <BSP_GYRO_GetXYZ>
	VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 8004f0a:	a967      	add	r1, sp, #412	; 0x19c
 8004f0c:	4826      	ldr	r0, [pc, #152]	; (8004fa8 <main+0x8a8>)
 8004f0e:	f000 fece 	bl	8005cae <VL53L0X_PerformSingleRangingMeasurement>
			uint16_t tempValue = (uint16_t) (Temp_Value * 10 + 0.5);
 8004f12:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
			Prox_Value = VL53L0X_PROXIMITY_GetDistance();
 8004f14:	4a25      	ldr	r2, [pc, #148]	; (8004fac <main+0x8ac>)
			uint16_t tempValue = (uint16_t) (Temp_Value * 10 + 0.5);
 8004f16:	ed93 7a00 	vldr	s14, [r3]
	return RangingMeasurementData.RangeMilliMeter;
 8004f1a:	f8bd 11a4 	ldrh.w	r1, [sp, #420]	; 0x1a4
			Prox_Value = VL53L0X_PROXIMITY_GetDistance();
 8004f1e:	8011      	strh	r1, [r2, #0]
			uint16_t tempValue = (uint16_t) (Temp_Value * 10 + 0.5);
 8004f20:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8004f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f28:	ee17 0a90 	vmov	r0, s15
 8004f2c:	f7fb fb0c 	bl	8000548 <__aeabi_f2d>
 8004f30:	2200      	movs	r2, #0
 8004f32:	4b1f      	ldr	r3, [pc, #124]	; (8004fb0 <main+0x8b0>)
 8004f34:	f7fb f9aa 	bl	800028c <__adddf3>
 8004f38:	f7fb fe32 	bl	8000ba0 <__aeabi_d2uiz>
			len = sprintf(sendBuff,
 8004f3c:	9602      	str	r6, [sp, #8]
 8004f3e:	9701      	str	r7, [sp, #4]
			uint16_t humidity = (uint16_t) (Hum_Value * 2);
 8004f40:	eddb 7a00 	vldr	s15, [fp]
			len = sprintf(sendBuff,
 8004f44:	491b      	ldr	r1, [pc, #108]	; (8004fb4 <main+0x8b4>)
			uint16_t humidity = (uint16_t) (Hum_Value * 2);
 8004f46:	ee77 7aa7 	vadd.f32	s15, s15, s15
			uint16_t tempValue = (uint16_t) (Temp_Value * 10 + 0.5);
 8004f4a:	b282      	uxth	r2, r0
			uint16_t humidity = (uint16_t) (Hum_Value * 2);
 8004f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
			len = sprintf(sendBuff,
 8004f50:	4819      	ldr	r0, [pc, #100]	; (8004fb8 <main+0x8b8>)
			uint16_t humidity = (uint16_t) (Hum_Value * 2);
 8004f52:	edcd 7a5f 	vstr	s15, [sp, #380]	; 0x17c
			len = sprintf(sendBuff,
 8004f56:	f89d 317c 	ldrb.w	r3, [sp, #380]	; 0x17c
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	b2d3      	uxtb	r3, r2
 8004f5e:	0a12      	lsrs	r2, r2, #8
 8004f60:	f003 fbdc 	bl	800871c <siprintf>
 8004f64:	b2c1      	uxtb	r1, r0
			Send_Data(sendBuff, len);
 8004f66:	4814      	ldr	r0, [pc, #80]	; (8004fb8 <main+0x8b8>)
			len = sprintf(sendBuff,
 8004f68:	7021      	strb	r1, [r4, #0]
			Send_Data(sendBuff, len);
 8004f6a:	f7ff fbb1 	bl	80046d0 <Send_Data>
			pOut = 0;
 8004f6e:	464e      	mov	r6, r9
			pIn = 0;
 8004f70:	464f      	mov	r7, r9
			timeCount = 60;
 8004f72:	f04f 093c 	mov.w	r9, #60	; 0x3c
	HAL_Delay(time);
 8004f76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f7a:	f7fc fcaf 	bl	80018dc <HAL_Delay>
 8004f7e:	e6e1      	b.n	8004d44 <main+0x644>
 8004f80:	0800acbc 	.word	0x0800acbc
 8004f84:	0800abc9 	.word	0x0800abc9
 8004f88:	0800abf7 	.word	0x0800abf7
 8004f8c:	0800ac24 	.word	0x0800ac24
 8004f90:	0800acc8 	.word	0x0800acc8
 8004f94:	0800acda 	.word	0x0800acda
 8004f98:	20000868 	.word	0x20000868
 8004f9c:	20000f58 	.word	0x20000f58
 8004fa0:	20000738 	.word	0x20000738
 8004fa4:	20000740 	.word	0x20000740
 8004fa8:	200000c8 	.word	0x200000c8
 8004fac:	2000082c 	.word	0x2000082c
 8004fb0:	3fe00000 	.word	0x3fe00000
 8004fb4:	0800acee 	.word	0x0800acee
 8004fb8:	20000fa4 	.word	0x20000fa4
 8004fbc:	20000d38 	.word	0x20000d38

08004fc0 <HAL_TIM_PeriodElapsedCallback>:
//	}

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	BSP_LED_Toggle(LED2);
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	f7fc b845 	b.w	8001050 <BSP_LED_Toggle>
	...

08004fc8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <HAL_MspInit+0x2c>)
 8004fca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004fcc:	f042 0201 	orr.w	r2, r2, #1
 8004fd0:	661a      	str	r2, [r3, #96]	; 0x60
 8004fd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8004fd4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fd6:	f002 0201 	and.w	r2, r2, #1
 8004fda:	9200      	str	r2, [sp, #0]
 8004fdc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004fe0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004fe4:	659a      	str	r2, [r3, #88]	; 0x58
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ff0:	b002      	add	sp, #8
 8004ff2:	4770      	bx	lr
 8004ff4:	40021000 	.word	0x40021000

08004ff8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8004ff8:	b500      	push	{lr}
 8004ffa:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ffc:	2214      	movs	r2, #20
 8004ffe:	2100      	movs	r1, #0
 8005000:	a803      	add	r0, sp, #12
 8005002:	f002 feb2 	bl	8007d6a <memset>
  if(DFSDM1_Init == 0)
 8005006:	4b13      	ldr	r3, [pc, #76]	; (8005054 <HAL_DFSDM_ChannelMspInit+0x5c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	bb03      	cbnz	r3, 800504e <HAL_DFSDM_ChannelMspInit+0x56>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800500c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005010:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005014:	a903      	add	r1, sp, #12
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8005016:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005018:	480f      	ldr	r0, [pc, #60]	; (8005058 <HAL_DFSDM_ChannelMspInit+0x60>)
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800501a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800501e:	661a      	str	r2, [r3, #96]	; 0x60
 8005020:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005022:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8005026:	9201      	str	r2, [sp, #4]
 8005028:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800502a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800502c:	f042 0210 	orr.w	r2, r2, #16
 8005030:	64da      	str	r2, [r3, #76]	; 0x4c
 8005032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005034:	f003 0310 	and.w	r3, r3, #16
 8005038:	9302      	str	r3, [sp, #8]
 800503a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800503c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8005040:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005042:	2302      	movs	r3, #2
 8005044:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8005046:	2306      	movs	r3, #6
 8005048:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800504a:	f7fc fd83 	bl	8001b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 800504e:	b009      	add	sp, #36	; 0x24
 8005050:	f85d fb04 	ldr.w	pc, [sp], #4
 8005054:	20000754 	.word	0x20000754
 8005058:	48001000 	.word	0x48001000

0800505c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800505c:	b510      	push	{r4, lr}
 800505e:	4604      	mov	r4, r0
 8005060:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005062:	2214      	movs	r2, #20
 8005064:	2100      	movs	r1, #0
 8005066:	a803      	add	r0, sp, #12
 8005068:	f002 fe7f 	bl	8007d6a <memset>
  if(hi2c->Instance==I2C2)
 800506c:	6822      	ldr	r2, [r4, #0]
 800506e:	4b13      	ldr	r3, [pc, #76]	; (80050bc <HAL_I2C_MspInit+0x60>)
 8005070:	429a      	cmp	r2, r3
 8005072:	d121      	bne.n	80050b8 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005074:	4c12      	ldr	r4, [pc, #72]	; (80050c0 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005076:	4813      	ldr	r0, [pc, #76]	; (80050c4 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005078:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800507a:	f043 0302 	orr.w	r3, r3, #2
 800507e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005080:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800508a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800508e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005090:	2312      	movs	r3, #18
 8005092:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005094:	2301      	movs	r3, #1
 8005096:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005098:	2303      	movs	r3, #3
 800509a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800509c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800509e:	2304      	movs	r3, #4
 80050a0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050a2:	f7fc fd57 	bl	8001b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80050a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80050ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b4:	9302      	str	r3, [sp, #8]
 80050b6:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80050b8:	b008      	add	sp, #32
 80050ba:	bd10      	pop	{r4, pc}
 80050bc:	40005800 	.word	0x40005800
 80050c0:	40021000 	.word	0x40021000
 80050c4:	48000400 	.word	0x48000400

080050c8 <HAL_I2C_MspDeInit>:
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{

  if(hi2c->Instance==I2C2)
 80050c8:	6802      	ldr	r2, [r0, #0]
 80050ca:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <HAL_I2C_MspDeInit+0x20>)
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d109      	bne.n	80050e4 <HAL_I2C_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80050d0:	4a06      	ldr	r2, [pc, #24]	; (80050ec <HAL_I2C_MspDeInit+0x24>)
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 80050d2:	4807      	ldr	r0, [pc, #28]	; (80050f0 <HAL_I2C_MspDeInit+0x28>)
    __HAL_RCC_I2C2_CLK_DISABLE();
 80050d4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80050d6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80050da:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 80050dc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80050e0:	f7fc be14 	b.w	8001d0c <HAL_GPIO_DeInit>
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40005800 	.word	0x40005800
 80050ec:	40021000 	.word	0x40021000
 80050f0:	48000400 	.word	0x48000400

080050f4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80050f4:	b510      	push	{r4, lr}
 80050f6:	4604      	mov	r4, r0
 80050f8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050fa:	2214      	movs	r2, #20
 80050fc:	2100      	movs	r1, #0
 80050fe:	a803      	add	r0, sp, #12
 8005100:	f002 fe33 	bl	8007d6a <memset>
  if(hqspi->Instance==QUADSPI)
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	4b14      	ldr	r3, [pc, #80]	; (8005158 <HAL_QSPI_MspInit+0x64>)
 8005108:	429a      	cmp	r2, r3
 800510a:	d122      	bne.n	8005152 <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800510c:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8005110:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005114:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005116:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005118:	4810      	ldr	r0, [pc, #64]	; (800515c <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800511a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800511e:	651a      	str	r2, [r3, #80]	; 0x50
 8005120:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005122:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8005126:	9201      	str	r2, [sp, #4]
 8005128:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800512a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800512c:	f042 0210 	orr.w	r2, r2, #16
 8005130:	64da      	str	r2, [r3, #76]	; 0x4c
 8005132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	9302      	str	r3, [sp, #8]
 800513a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 800513c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8005140:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005142:	2302      	movs	r3, #2
 8005144:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005146:	2303      	movs	r3, #3
 8005148:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800514a:	230a      	movs	r3, #10
 800514c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800514e:	f7fc fd01 	bl	8001b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8005152:	b008      	add	sp, #32
 8005154:	bd10      	pop	{r4, pc}
 8005156:	bf00      	nop
 8005158:	a0001000 	.word	0xa0001000
 800515c:	48001000 	.word	0x48001000

08005160 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005160:	b510      	push	{r4, lr}
 8005162:	4604      	mov	r4, r0
 8005164:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005166:	2214      	movs	r2, #20
 8005168:	2100      	movs	r1, #0
 800516a:	a803      	add	r0, sp, #12
 800516c:	f002 fdfd 	bl	8007d6a <memset>
  if(hspi->Instance==SPI3)
 8005170:	6822      	ldr	r2, [r4, #0]
 8005172:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <HAL_SPI_MspInit+0x60>)
 8005174:	429a      	cmp	r2, r3
 8005176:	d120      	bne.n	80051ba <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005178:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800517c:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI3_CLK_ENABLE();
 800517e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005180:	4810      	ldr	r0, [pc, #64]	; (80051c4 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005186:	659a      	str	r2, [r3, #88]	; 0x58
 8005188:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800518a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800518e:	9201      	str	r2, [sp, #4]
 8005190:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005194:	f042 0204 	orr.w	r2, r2, #4
 8005198:	64da      	str	r2, [r3, #76]	; 0x4c
 800519a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	9302      	str	r3, [sp, #8]
 80051a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80051a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80051a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051aa:	2302      	movs	r3, #2
 80051ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ae:	2303      	movs	r3, #3
 80051b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80051b2:	2306      	movs	r3, #6
 80051b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051b6:	f7fc fccd 	bl	8001b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80051ba:	b008      	add	sp, #32
 80051bc:	bd10      	pop	{r4, pc}
 80051be:	bf00      	nop
 80051c0:	40003c00 	.word	0x40003c00
 80051c4:	48000800 	.word	0x48000800

080051c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051c8:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 80051ca:	4b0d      	ldr	r3, [pc, #52]	; (8005200 <HAL_TIM_Base_MspInit+0x38>)
 80051cc:	6802      	ldr	r2, [r0, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d112      	bne.n	80051f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80051d2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80051d6:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80051d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051da:	f042 0210 	orr.w	r2, r2, #16
 80051de:	659a      	str	r2, [r3, #88]	; 0x58
 80051e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80051e8:	2200      	movs	r2, #0
 80051ea:	2101      	movs	r1, #1
    __HAL_RCC_TIM6_CLK_ENABLE();
 80051ec:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80051ee:	f7fc fb95 	bl	800191c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80051f2:	2036      	movs	r0, #54	; 0x36
 80051f4:	f7fc fbc6 	bl	8001984 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80051f8:	b003      	add	sp, #12
 80051fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80051fe:	bf00      	nop
 8005200:	40001000 	.word	0x40001000

08005204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005204:	b510      	push	{r4, lr}
 8005206:	4604      	mov	r4, r0
 8005208:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800520a:	2214      	movs	r2, #20
 800520c:	2100      	movs	r1, #0
 800520e:	a807      	add	r0, sp, #28
 8005210:	f002 fdab 	bl	8007d6a <memset>
  if(huart->Instance==UART4)
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	4a3c      	ldr	r2, [pc, #240]	; (8005308 <HAL_UART_MspInit+0x104>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d128      	bne.n	800526e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800521c:	4b3b      	ldr	r3, [pc, #236]	; (800530c <HAL_UART_MspInit+0x108>)
 800521e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005220:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005224:	659a      	str	r2, [r3, #88]	; 0x58
 8005226:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005228:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800522c:	9201      	str	r2, [sp, #4]
 800522e:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005230:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005232:	f042 0201 	orr.w	r2, r2, #1
 8005236:	64da      	str	r2, [r3, #76]	; 0x4c
 8005238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	9302      	str	r3, [sp, #8]
 8005240:	9b02      	ldr	r3, [sp, #8]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005242:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8005244:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005246:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005248:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800524a:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800524c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005250:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8005252:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005254:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005256:	f7fc fc7d 	bl	8001b54 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 3, 0);
 800525a:	2034      	movs	r0, #52	; 0x34
 800525c:	2200      	movs	r2, #0
 800525e:	4621      	mov	r1, r4
 8005260:	f7fc fb5c 	bl	800191c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005264:	2034      	movs	r0, #52	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005266:	f7fc fb8d 	bl	8001984 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800526a:	b00c      	add	sp, #48	; 0x30
 800526c:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART1)
 800526e:	4a28      	ldr	r2, [pc, #160]	; (8005310 <HAL_UART_MspInit+0x10c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d125      	bne.n	80052c0 <HAL_UART_MspInit+0xbc>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005274:	4b25      	ldr	r3, [pc, #148]	; (800530c <HAL_UART_MspInit+0x108>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005276:	4827      	ldr	r0, [pc, #156]	; (8005314 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005278:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800527a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800527e:	661a      	str	r2, [r3, #96]	; 0x60
 8005280:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005282:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005286:	9203      	str	r2, [sp, #12]
 8005288:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800528a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800528c:	f042 0202 	orr.w	r2, r2, #2
 8005290:	64da      	str	r2, [r3, #76]	; 0x4c
 8005292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	9304      	str	r3, [sp, #16]
 800529a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800529c:	23c0      	movs	r3, #192	; 0xc0
 800529e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052a0:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a2:	2402      	movs	r4, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052a4:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052a6:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052a8:	2307      	movs	r3, #7
 80052aa:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ac:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052ae:	f7fc fc51 	bl	8001b54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80052b2:	2025      	movs	r0, #37	; 0x25
 80052b4:	2200      	movs	r2, #0
 80052b6:	4621      	mov	r1, r4
 80052b8:	f7fc fb30 	bl	800191c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80052bc:	2025      	movs	r0, #37	; 0x25
 80052be:	e7d2      	b.n	8005266 <HAL_UART_MspInit+0x62>
  else if(huart->Instance==USART3)
 80052c0:	4a15      	ldr	r2, [pc, #84]	; (8005318 <HAL_UART_MspInit+0x114>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d1d1      	bne.n	800526a <HAL_UART_MspInit+0x66>
    __HAL_RCC_USART3_CLK_ENABLE();
 80052c6:	4b11      	ldr	r3, [pc, #68]	; (800530c <HAL_UART_MspInit+0x108>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052c8:	4814      	ldr	r0, [pc, #80]	; (800531c <HAL_UART_MspInit+0x118>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80052ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80052d0:	659a      	str	r2, [r3, #88]	; 0x58
 80052d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052d4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80052d8:	9205      	str	r2, [sp, #20]
 80052da:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052de:	f042 0208 	orr.w	r2, r2, #8
 80052e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80052e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	9306      	str	r3, [sp, #24]
 80052ec:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80052ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80052f2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f4:	2302      	movs	r3, #2
 80052f6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052f8:	2303      	movs	r3, #3
 80052fa:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052fc:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80052fe:	2307      	movs	r3, #7
 8005300:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005302:	f7fc fc27 	bl	8001b54 <HAL_GPIO_Init>
}
 8005306:	e7b0      	b.n	800526a <HAL_UART_MspInit+0x66>
 8005308:	40004c00 	.word	0x40004c00
 800530c:	40021000 	.word	0x40021000
 8005310:	40013800 	.word	0x40013800
 8005314:	48000400 	.word	0x48000400
 8005318:	40004800 	.word	0x40004800
 800531c:	48000c00 	.word	0x48000c00

08005320 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005320:	b510      	push	{r4, lr}
 8005322:	4604      	mov	r4, r0
 8005324:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005326:	2214      	movs	r2, #20
 8005328:	2100      	movs	r1, #0
 800532a:	a803      	add	r0, sp, #12
 800532c:	f002 fd1d 	bl	8007d6a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005336:	d13c      	bne.n	80053b2 <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005338:	4c20      	ldr	r4, [pc, #128]	; (80053bc <HAL_PCD_MspInit+0x9c>)
 800533a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005342:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	9b00      	ldr	r3, [sp, #0]
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800534c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800534e:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8005356:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005358:	f7fc fbfc 	bl	8001b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800535c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005360:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005362:	2302      	movs	r3, #2
 8005364:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005366:	2300      	movs	r3, #0
 8005368:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800536a:	2303      	movs	r3, #3
 800536c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800536e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005370:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005376:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005378:	f7fc fbec 	bl	8001b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800537c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800537e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005382:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005384:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800538e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	d410      	bmi.n	80053b6 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005394:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539a:	65a3      	str	r3, [r4, #88]	; 0x58
 800539c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800539e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a2:	9302      	str	r3, [sp, #8]
 80053a4:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 80053a6:	f7fd fb17 	bl	80029d8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80053aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053b0:	65a3      	str	r3, [r4, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80053b2:	b008      	add	sp, #32
 80053b4:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 80053b6:	f7fd fb0f 	bl	80029d8 <HAL_PWREx_EnableVddUSB>
}
 80053ba:	e7fa      	b.n	80053b2 <HAL_PCD_MspInit+0x92>
 80053bc:	40021000 	.word	0x40021000

080053c0 <NMI_Handler>:
 80053c0:	4770      	bx	lr

080053c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053c2:	e7fe      	b.n	80053c2 <HardFault_Handler>

080053c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053c4:	e7fe      	b.n	80053c4 <MemManage_Handler>

080053c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053c6:	e7fe      	b.n	80053c6 <BusFault_Handler>

080053c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053c8:	e7fe      	b.n	80053c8 <UsageFault_Handler>

080053ca <SVC_Handler>:
 80053ca:	4770      	bx	lr

080053cc <DebugMon_Handler>:
 80053cc:	4770      	bx	lr

080053ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053ce:	4770      	bx	lr

080053d0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053d0:	f7fc ba76 	b.w	80018c0 <HAL_IncTick>

080053d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80053d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80053d6:	2020      	movs	r0, #32
 80053d8:	f7fc fd3c 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80053dc:	2040      	movs	r0, #64	; 0x40
 80053de:	f7fc fd39 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80053e2:	2080      	movs	r0, #128	; 0x80
 80053e4:	f7fc fd36 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80053e8:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80053ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80053f0:	f7fc bd30 	b.w	8001e54 <HAL_GPIO_EXTI_IRQHandler>

080053f4 <USART1_IRQHandler>:
#if 0
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
#endif
  RX_BUFF[0]=USART1->RDR;
 80053f4:	4b03      	ldr	r3, [pc, #12]	; (8005404 <USART1_IRQHandler+0x10>)
 80053f6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80053f8:	4b03      	ldr	r3, [pc, #12]	; (8005408 <USART1_IRQHandler+0x14>)
 80053fa:	701a      	strb	r2, [r3, #0]
  SERIAL_ACTIVE=1;
 80053fc:	4b03      	ldr	r3, [pc, #12]	; (800540c <USART1_IRQHandler+0x18>)
 80053fe:	2201      	movs	r2, #1
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	4770      	bx	lr
 8005404:	40013800 	.word	0x40013800
 8005408:	20000fe4 	.word	0x20000fe4
 800540c:	20001024 	.word	0x20001024

08005410 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005410:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005412:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005416:	f7fc fd1d 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800541a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800541e:	f7fc fd19 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005422:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005426:	f7fc fd15 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800542a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800542e:	f7fc fd11 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005432:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800543a:	f7fc bd0b 	b.w	8001e54 <HAL_GPIO_EXTI_IRQHandler>
	...

08005440 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005440:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005442:	4807      	ldr	r0, [pc, #28]	; (8005460 <UART4_IRQHandler+0x20>)
 8005444:	f7fe fb82 	bl	8003b4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  RX_BUFF[RX_COUNT] = UART4->RDR;
 8005448:	4a06      	ldr	r2, [pc, #24]	; (8005464 <UART4_IRQHandler+0x24>)
 800544a:	4907      	ldr	r1, [pc, #28]	; (8005468 <UART4_IRQHandler+0x28>)
 800544c:	7813      	ldrb	r3, [r2, #0]
 800544e:	8c88      	ldrh	r0, [r1, #36]	; 0x24
 8005450:	4906      	ldr	r1, [pc, #24]	; (800546c <UART4_IRQHandler+0x2c>)
  if(RX_COUNT < 16) RX_COUNT++;
 8005452:	2b0f      	cmp	r3, #15
  RX_BUFF[RX_COUNT] = UART4->RDR;
 8005454:	54c8      	strb	r0, [r1, r3]
  if(RX_COUNT < 16) RX_COUNT++;
 8005456:	bf94      	ite	ls
 8005458:	3301      	addls	r3, #1
  else RX_COUNT = 0;
 800545a:	2300      	movhi	r3, #0
 800545c:	7013      	strb	r3, [r2, #0]
 800545e:	bd08      	pop	{r3, pc}
 8005460:	20000ee0 	.word	0x20000ee0
 8005464:	20001025 	.word	0x20001025
 8005468:	40004c00 	.word	0x40004c00
 800546c:	20000fe4 	.word	0x20000fe4

08005470 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005470:	4801      	ldr	r0, [pc, #4]	; (8005478 <TIM6_DAC_IRQHandler+0x8>)
 8005472:	f7fe b9fa 	b.w	800386a <HAL_TIM_IRQHandler>
 8005476:	bf00      	nop
 8005478:	20000e9c 	.word	0x20000e9c

0800547c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800547c:	490f      	ldr	r1, [pc, #60]	; (80054bc <SystemInit+0x40>)
 800547e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005482:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800548a:	4b0d      	ldr	r3, [pc, #52]	; (80054c0 <SystemInit+0x44>)
 800548c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800548e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8005490:	f042 0201 	orr.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8005496:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800549e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80054a2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80054a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054b0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80054b2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80054b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054b8:	608b      	str	r3, [r1, #8]
 80054ba:	4770      	bx	lr
 80054bc:	e000ed00 	.word	0xe000ed00
 80054c0:	40021000 	.word	0x40021000

080054c4 <VL53L0X_GetDeviceInfo>:
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 80054c4:	f002 ba46 	b.w	8007954 <VL53L0X_get_device_info>

080054c8 <VL53L0X_SetDeviceMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80054c8:	2915      	cmp	r1, #21
 80054ca:	d807      	bhi.n	80054dc <VL53L0X_SetDeviceMode+0x14>
 80054cc:	2201      	movs	r2, #1
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <VL53L0X_SetDeviceMode+0x1c>)
 80054d0:	408a      	lsls	r2, r1
 80054d2:	4013      	ands	r3, r2
 80054d4:	b113      	cbz	r3, 80054dc <VL53L0X_SetDeviceMode+0x14>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80054d6:	7401      	strb	r1, [r0, #16]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054d8:	2000      	movs	r0, #0
		break;
 80054da:	4770      	bx	lr
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80054dc:	f06f 0007 	mvn.w	r0, #7
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	0030000b 	.word	0x0030000b

080054e8 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80054e8:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80054ea:	460a      	mov	r2, r1
{
 80054ec:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80054ee:	2109      	movs	r1, #9
 80054f0:	f002 fa91 	bl	8007a16 <VL53L0X_RdByte>

	if (Status == VL53L0X_ERROR_NONE)
 80054f4:	b918      	cbnz	r0, 80054fe <VL53L0X_GetFractionEnable+0x16>
		*pEnabled = (*pEnabled & 1);
 80054f6:	7823      	ldrb	r3, [r4, #0]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 80054fe:	bd10      	pop	{r4, pc}

08005500 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005500:	f001 be7a 	b.w	80071f8 <VL53L0X_set_measurement_timing_budget_micro_seconds>

08005504 <VL53L0X_SetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8005504:	f001 bd54 	b.w	8006fb0 <VL53L0X_set_vcsel_pulse_period>

08005508 <VL53L0X_GetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005508:	f001 be5d 	b.w	80071c6 <VL53L0X_get_vcsel_pulse_period>

0800550c <VL53L0X_SetSequenceStepEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800550c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800550e:	4617      	mov	r7, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 8005510:	aa02      	add	r2, sp, #8
 8005512:	2300      	movs	r3, #0
{
 8005514:	460c      	mov	r4, r1
	uint8_t SequenceConfig = 0;
 8005516:	f802 3d01 	strb.w	r3, [r2, #-1]!
	uint8_t SequenceConfigNew = 0;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800551a:	2101      	movs	r1, #1
{
 800551c:	4606      	mov	r6, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800551e:	f002 fa7a 	bl	8007a16 <VL53L0X_RdByte>
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;

	if (Status == VL53L0X_ERROR_NONE) {
 8005522:	4605      	mov	r5, r0
 8005524:	b9d8      	cbnz	r0, 800555e <VL53L0X_SetSequenceStepEnable+0x52>
		if (SequenceStepEnabled == 1) {
 8005526:	2f01      	cmp	r7, #1
	SequenceConfigNew = SequenceConfig;
 8005528:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (SequenceStepEnabled == 1) {
 800552c:	d126      	bne.n	800557c <VL53L0X_SetSequenceStepEnable+0x70>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800552e:	2c04      	cmp	r4, #4
 8005530:	d83a      	bhi.n	80055a8 <VL53L0X_SetSequenceStepEnable+0x9c>
 8005532:	e8df f004 	tbb	[pc, r4]
 8005536:	1703      	.short	0x1703
 8005538:	1d1a      	.short	0x1d1a
 800553a:	20          	.byte	0x20
 800553b:	00          	.byte	0x00
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800553c:	f043 0410 	orr.w	r4, r3, #16
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8005540:	42a3      	cmp	r3, r4
 8005542:	d00c      	beq.n	800555e <VL53L0X_SetSequenceStepEnable+0x52>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 8005544:	4622      	mov	r2, r4
 8005546:	2101      	movs	r1, #1
 8005548:	4630      	mov	r0, r6
 800554a:	f002 faf3 	bl	8007b34 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800554e:	4605      	mov	r5, r0
 8005550:	b928      	cbnz	r0, 800555e <VL53L0X_SetSequenceStepEnable+0x52>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8005552:	f886 4130 	strb.w	r4, [r6, #304]	; 0x130
		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_GETPARAMETERFIELD(Dev,
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005556:	6971      	ldr	r1, [r6, #20]
 8005558:	4630      	mov	r0, r6
 800555a:	f7ff ffd1 	bl	8005500 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 800555e:	4628      	mov	r0, r5
 8005560:	b003      	add	sp, #12
 8005562:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SequenceConfigNew |= 0x28;
 8005564:	f043 0428 	orr.w	r4, r3, #40	; 0x28
				break;
 8005568:	e7ea      	b.n	8005540 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x04;
 800556a:	f043 0404 	orr.w	r4, r3, #4
				break;
 800556e:	e7e7      	b.n	8005540 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x40;
 8005570:	f043 0440 	orr.w	r4, r3, #64	; 0x40
				break;
 8005574:	e7e4      	b.n	8005540 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x80;
 8005576:	f043 0480 	orr.w	r4, r3, #128	; 0x80
				break;
 800557a:	e7e1      	b.n	8005540 <VL53L0X_SetSequenceStepEnable+0x34>
			switch (SequenceStepId) {
 800557c:	2c04      	cmp	r4, #4
 800557e:	d813      	bhi.n	80055a8 <VL53L0X_SetSequenceStepEnable+0x9c>
 8005580:	e8df f004 	tbb	[pc, r4]
 8005584:	0c090603 	.word	0x0c090603
 8005588:	0f          	.byte	0x0f
 8005589:	00          	.byte	0x00
				SequenceConfigNew &= 0xef;
 800558a:	f003 04ef 	and.w	r4, r3, #239	; 0xef
				break;
 800558e:	e7d7      	b.n	8005540 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xd7;
 8005590:	f003 04d7 	and.w	r4, r3, #215	; 0xd7
				break;
 8005594:	e7d4      	b.n	8005540 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xfb;
 8005596:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
				break;
 800559a:	e7d1      	b.n	8005540 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xbf;
 800559c:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
				break;
 80055a0:	e7ce      	b.n	8005540 <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0x7f;
 80055a2:	f003 047f 	and.w	r4, r3, #127	; 0x7f
				break;
 80055a6:	e7cb      	b.n	8005540 <VL53L0X_SetSequenceStepEnable+0x34>
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80055a8:	f06f 0503 	mvn.w	r5, #3
 80055ac:	e7d7      	b.n	800555e <VL53L0X_SetSequenceStepEnable+0x52>

080055ae <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80055ae:	b513      	push	{r0, r1, r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 80055b0:	aa02      	add	r2, sp, #8
 80055b2:	2300      	movs	r3, #0
{
 80055b4:	460c      	mov	r4, r1
	uint8_t SequenceConfig = 0;
 80055b6:	f802 3d01 	strb.w	r3, [r2, #-1]!
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80055ba:	2101      	movs	r1, #1
 80055bc:	f002 fa2b 	bl	8007a16 <VL53L0X_RdByte>
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80055c0:	b978      	cbnz	r0, 80055e2 <VL53L0X_GetSequenceStepEnables+0x34>
		Status = sequence_step_enabled(Dev,
 80055c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80055c6:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80055ca:	7022      	strb	r2, [r4, #0]
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80055cc:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 80055d0:	70a2      	strb	r2, [r4, #2]
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80055d2:	f3c3 0280 	ubfx	r2, r3, #2, #1
 80055d6:	7062      	strb	r2, [r4, #1]
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80055d8:	f3c3 1280 	ubfx	r2, r3, #6, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80055dc:	09db      	lsrs	r3, r3, #7
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80055de:	70e2      	strb	r2, [r4, #3]
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80055e0:	7123      	strb	r3, [r4, #4]
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80055e2:	b002      	add	sp, #8
 80055e4:	bd10      	pop	{r4, pc}

080055e6 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 80055e6:	b513      	push	{r0, r1, r4, lr}
 80055e8:	4614      	mov	r4, r2
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
	uint32_t Fraction_ms = 0;
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 80055ea:	aa01      	add	r2, sp, #4
 80055ec:	f001 fbd4 	bl	8006d98 <get_sequence_step_timeout>
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 80055f0:	b978      	cbnz	r0, 8005612 <VL53L0X_GetSequenceStepTimeout+0x2c>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 80055f2:	9b01      	ldr	r3, [sp, #4]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 80055f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80055fc:	fb02 3311 	mls	r3, r2, r1, r3
 8005600:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 8005604:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005608:	fbb3 f3f2 	udiv	r3, r3, r2
 800560c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8005610:	6023      	str	r3, [r4, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005612:	b002      	add	sp, #8
 8005614:	bd10      	pop	{r4, pc}

08005616 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005616:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005618:	460d      	mov	r5, r1
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800561a:	f10d 0202 	add.w	r2, sp, #2
 800561e:	21f8      	movs	r1, #248	; 0xf8
{
 8005620:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005622:	f002 fa41 	bl	8007aa8 <VL53L0X_RdWord>
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005626:	b970      	cbnz	r0, 8005646 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		Status = VL53L0X_RdDWord(Dev,
 8005628:	aa01      	add	r2, sp, #4
 800562a:	2104      	movs	r1, #4
 800562c:	4620      	mov	r0, r4
 800562e:	f002 fa5b 	bl	8007ae8 <VL53L0X_RdDWord>
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005632:	b940      	cbnz	r0, 8005646 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		if (osc_calibrate_val != 0) {
 8005634:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005638:	b11a      	cbz	r2, 8005642 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x2c>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800563a:	9b01      	ldr	r3, [sp, #4]
 800563c:	fbb3 f3f2 	udiv	r3, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005640:	602b      	str	r3, [r5, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005642:	682b      	ldr	r3, [r5, #0]
 8005644:	61a3      	str	r3, [r4, #24]
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005646:	b003      	add	sp, #12
 8005648:	bd30      	pop	{r4, r5, pc}

0800564a <VL53L0X_GetXTalkCompensationEnable>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800564a:	7f03      	ldrb	r3, [r0, #28]
	*pXTalkCompensationEnable = Temp8;
 800564c:	700b      	strb	r3, [r1, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 800564e:	2000      	movs	r0, #0
 8005650:	4770      	bx	lr

08005652 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005652:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005654:	460d      	mov	r5, r1
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005656:	f10d 0206 	add.w	r2, sp, #6
 800565a:	2120      	movs	r1, #32
{
 800565c:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev,
 800565e:	f002 fa23 	bl	8007aa8 <VL53L0X_RdWord>
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8005662:	b928      	cbnz	r0, 8005670 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>
		if (Value == 0) {
 8005664:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005668:	b923      	cbnz	r3, 8005674 <VL53L0X_GetXTalkCompensationRateMegaCps+0x22>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800566a:	6a23      	ldr	r3, [r4, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800566c:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800566e:	7720      	strb	r0, [r4, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005670:	b003      	add	sp, #12
 8005672:	bd30      	pop	{r4, r5, pc}
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005674:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005676:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005678:	6223      	str	r3, [r4, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800567a:	2301      	movs	r3, #1
 800567c:	7723      	strb	r3, [r4, #28]
 800567e:	e7f7      	b.n	8005670 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>

08005680 <VL53L0X_SetLimitCheckEnable>:
	uint8_t LimitCheckDisable = 0;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005680:	2905      	cmp	r1, #5
{
 8005682:	b570      	push	{r4, r5, r6, lr}
 8005684:	4604      	mov	r4, r0
 8005686:	460d      	mov	r5, r1
 8005688:	4616      	mov	r6, r2
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800568a:	d832      	bhi.n	80056f2 <VL53L0X_SetLimitCheckEnable+0x72>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else {
		if (LimitCheckEnable == 0) {
 800568c:	b3a2      	cbz	r2, 80056f8 <VL53L0X_SetLimitCheckEnable+0x78>
			TempFix1616 = 0;
			LimitCheckEnableInt = 0;
			LimitCheckDisable = 1;

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800568e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8005692:	2101      	movs	r1, #1
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
			LimitCheckDisable = 0;
 8005696:	2300      	movs	r3, #0
		}

		switch (LimitCheckId) {
 8005698:	1e68      	subs	r0, r5, #1
 800569a:	2804      	cmp	r0, #4
 800569c:	d804      	bhi.n	80056a8 <VL53L0X_SetLimitCheckEnable+0x28>
 800569e:	e8df f000 	tbb	[pc, r0]
 80056a2:	140b      	.short	0x140b
 80056a4:	1a17      	.short	0x1a17
 80056a6:	21          	.byte	0x21
 80056a7:	00          	.byte	0x00

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80056a8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 80056ac:	442c      	add	r4, r5
		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (LimitCheckEnable == 0) {
 80056ae:	b9e6      	cbnz	r6, 80056ea <VL53L0X_SetLimitCheckEnable+0x6a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80056b0:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80056b4:	2000      	movs	r0, #0
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
			Status = VL53L0X_WrWord(Dev,
 80056b8:	f3c2 224f 	ubfx	r2, r2, #9, #16
 80056bc:	2144      	movs	r1, #68	; 0x44
 80056be:	4620      	mov	r0, r4
 80056c0:	f002 fa48 	bl	8007b54 <VL53L0X_WrWord>
	if (Status == VL53L0X_ERROR_NONE) {
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d0f1      	beq.n	80056ac <VL53L0X_SetLimitCheckEnable+0x2c>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80056c8:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80056ca:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
			break;
 80056ce:	e7ed      	b.n	80056ac <VL53L0X_SetLimitCheckEnable+0x2c>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80056d0:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
			break;
 80056d4:	e7ea      	b.n	80056ac <VL53L0X_SetLimitCheckEnable+0x2c>
			Status = VL53L0X_UpdateByte(Dev,
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	22fe      	movs	r2, #254	; 0xfe
			Status = VL53L0X_UpdateByte(Dev,
 80056da:	2160      	movs	r1, #96	; 0x60
 80056dc:	4620      	mov	r0, r4
 80056de:	f002 fa4b 	bl	8007b78 <VL53L0X_UpdateByte>
			break;
 80056e2:	e7ef      	b.n	80056c4 <VL53L0X_SetLimitCheckEnable+0x44>
			Status = VL53L0X_UpdateByte(Dev,
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	22ef      	movs	r2, #239	; 0xef
 80056e8:	e7f7      	b.n	80056da <VL53L0X_SetLimitCheckEnable+0x5a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80056ea:	2301      	movs	r3, #1
 80056ec:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80056f0:	e7e0      	b.n	80056b4 <VL53L0X_SetLimitCheckEnable+0x34>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80056f2:	f06f 0003 	mvn.w	r0, #3
	return Status;
 80056f6:	bd70      	pop	{r4, r5, r6, pc}
			LimitCheckEnableInt = 0;
 80056f8:	4611      	mov	r1, r2
			LimitCheckDisable = 1;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e7cc      	b.n	8005698 <VL53L0X_SetLimitCheckEnable+0x18>

080056fe <VL53L0X_GetLimitCheckEnable>:
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80056fe:	2905      	cmp	r1, #5
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005700:	bf8c      	ite	hi
 8005702:	f06f 0003 	mvnhi.w	r0, #3
		*pLimitCheckEnable = 0;
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005706:	1840      	addls	r0, r0, r1
 8005708:	f04f 0300 	mov.w	r3, #0
 800570c:	bf97      	itett	ls
 800570e:	f890 1028 	ldrbls.w	r1, [r0, #40]	; 0x28
		*pLimitCheckEnable = 0;
 8005712:	7013      	strbhi	r3, [r2, #0]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005714:	7011      	strbls	r1, [r2, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005716:	4618      	movls	r0, r3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005718:	4770      	bx	lr

0800571a <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800571a:	b570      	push	{r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800571c:	1843      	adds	r3, r0, r1
{
 800571e:	4604      	mov	r4, r0
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005720:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
{
 8005724:	460e      	mov	r6, r1
 8005726:	4615      	mov	r5, r2
	if (Temp8 == 0) { /* disabled write only internal value */
 8005728:	b918      	cbnz	r0, 8005732 <VL53L0X_SetLimitCheckValue+0x18>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800572a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800572e:	6362      	str	r2, [r4, #52]	; 0x34
 8005730:	bd70      	pop	{r4, r5, r6, pc}
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8005732:	2905      	cmp	r1, #5
 8005734:	d81b      	bhi.n	800576e <VL53L0X_SetLimitCheckValue+0x54>
 8005736:	e8df f001 	tbb	[pc, r1]
 800573a:	0903      	.short	0x0903
 800573c:	16161412 	.word	0x16161412

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005740:	6362      	str	r2, [r4, #52]	; 0x34
			Status = VL53L0X_ERROR_INVALID_PARAMS;

		}

		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005742:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8005746:	2000      	movs	r0, #0
 8005748:	6365      	str	r5, [r4, #52]	; 0x34
 800574a:	bd70      	pop	{r4, r5, r6, pc}
			Status = VL53L0X_WrWord(Dev,
 800574c:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8005750:	2144      	movs	r1, #68	; 0x44
			Status = VL53L0X_WrWord(Dev,
 8005752:	4620      	mov	r0, r4
 8005754:	f002 f9fe 	bl	8007b54 <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
 8005758:	2800      	cmp	r0, #0
 800575a:	d0f2      	beq.n	8005742 <VL53L0X_SetLimitCheckValue+0x28>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800575c:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800575e:	63e2      	str	r2, [r4, #60]	; 0x3c
			break;
 8005760:	e7ef      	b.n	8005742 <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005762:	6422      	str	r2, [r4, #64]	; 0x40
			break;
 8005764:	e7ed      	b.n	8005742 <VL53L0X_SetLimitCheckValue+0x28>
			Status = VL53L0X_WrWord(Dev,
 8005766:	f3c2 224f 	ubfx	r2, r2, #9, #16
 800576a:	2164      	movs	r1, #100	; 0x64
 800576c:	e7f1      	b.n	8005752 <VL53L0X_SetLimitCheckValue+0x38>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800576e:	f06f 0003 	mvn.w	r0, #3
 8005772:	e7f3      	b.n	800575c <VL53L0X_SetLimitCheckValue+0x42>

08005774 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005776:	4604      	mov	r4, r0
 8005778:	4615      	mov	r5, r2
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800577a:	2905      	cmp	r1, #5
 800577c:	d82c      	bhi.n	80057d8 <VL53L0X_GetLimitCheckValue+0x64>
 800577e:	e8df f001 	tbb	[pc, r1]
 8005782:	0703      	.short	0x0703
 8005784:	1b1b1917 	.word	0x1b1b1917

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005788:	6b43      	ldr	r3, [r0, #52]	; 0x34
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800578a:	602b      	str	r3, [r5, #0]
 800578c:	2000      	movs	r0, #0
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800578e:	e021      	b.n	80057d4 <VL53L0X_GetLimitCheckValue+0x60>
		Status = VL53L0X_RdWord(Dev,
 8005790:	f10d 0206 	add.w	r2, sp, #6
 8005794:	2144      	movs	r1, #68	; 0x44
 8005796:	f002 f987 	bl	8007aa8 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 800579a:	b9d8      	cbnz	r0, 80057d4 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800579c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			if (TempFix1616 == 0) {
 80057a0:	0253      	lsls	r3, r2, #9
 80057a2:	b19a      	cbz	r2, 80057cc <VL53L0X_GetLimitCheckValue+0x58>
				*pLimitCheckValue = TempFix1616;
 80057a4:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80057a6:	63a3      	str	r3, [r4, #56]	; 0x38
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80057a8:	2301      	movs	r3, #1
 80057aa:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80057ae:	e011      	b.n	80057d4 <VL53L0X_GetLimitCheckValue+0x60>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80057b0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		break;
 80057b2:	e7ea      	b.n	800578a <VL53L0X_GetLimitCheckValue+0x16>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80057b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
		break;
 80057b6:	e7e8      	b.n	800578a <VL53L0X_GetLimitCheckValue+0x16>
		Status = VL53L0X_RdWord(Dev,
 80057b8:	f10d 0206 	add.w	r2, sp, #6
 80057bc:	2164      	movs	r1, #100	; 0x64
 80057be:	f002 f973 	bl	8007aa8 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 80057c2:	b938      	cbnz	r0, 80057d4 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80057c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80057c8:	025b      	lsls	r3, r3, #9
 80057ca:	e7de      	b.n	800578a <VL53L0X_GetLimitCheckValue+0x16>
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80057cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				*pLimitCheckValue = TempFix1616;
 80057ce:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80057d0:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29

}
 80057d4:	b003      	add	sp, #12
 80057d6:	bd30      	pop	{r4, r5, pc}
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80057d8:	f06f 0003 	mvn.w	r0, #3
 80057dc:	e7fa      	b.n	80057d4 <VL53L0X_GetLimitCheckValue+0x60>

080057de <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80057de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057e0:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80057e2:	f10d 0207 	add.w	r2, sp, #7
 80057e6:	2101      	movs	r1, #1
{
 80057e8:	4605      	mov	r5, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80057ea:	f002 f914 	bl	8007a16 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 80057ee:	b958      	cbnz	r0, 8005808 <VL53L0X_GetWrapAroundCheckEnable+0x2a>
		PALDevDataSet(Dev, SequenceConfig, data);
 80057f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80057f4:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		if (data & (0x01 << 7))
 80057f8:	061b      	lsls	r3, r3, #24
			*pWrapAroundCheckEnable = 0x01;
 80057fa:	bf46      	itte	mi
 80057fc:	2301      	movmi	r3, #1
 80057fe:	7023      	strbmi	r3, [r4, #0]
		else
			*pWrapAroundCheckEnable = 0x00;
 8005800:	7020      	strbpl	r0, [r4, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005802:	7823      	ldrb	r3, [r4, #0]
 8005804:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005808:	b003      	add	sp, #12
 800580a:	bd30      	pop	{r4, r5, pc}

0800580c <VL53L0X_GetDeviceParameters>:
{
 800580c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005810:	7c03      	ldrb	r3, [r0, #16]
{
 8005812:	460c      	mov	r4, r1
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005814:	f801 3b08 	strb.w	r3, [r1], #8
{
 8005818:	4605      	mov	r5, r0
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800581a:	f7ff fefc 	bl	8005616 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 800581e:	bb40      	cbnz	r0, 8005872 <VL53L0X_GetDeviceParameters+0x66>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005820:	7320      	strb	r0, [r4, #12]
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005822:	f104 0110 	add.w	r1, r4, #16
 8005826:	4628      	mov	r0, r5
 8005828:	f7ff ff13 	bl	8005652 <VL53L0X_GetXTalkCompensationRateMegaCps>
	if (Status == VL53L0X_ERROR_NONE)
 800582c:	bb08      	cbnz	r0, 8005872 <VL53L0X_GetDeviceParameters+0x66>
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800582e:	f104 0114 	add.w	r1, r4, #20
 8005832:	4628      	mov	r0, r5
 8005834:	f000 fc03 	bl	800603e <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
 8005838:	b9d8      	cbnz	r0, 8005872 <VL53L0X_GetDeviceParameters+0x66>
 800583a:	f104 0724 	add.w	r7, r4, #36	; 0x24
 800583e:	f105 0928 	add.w	r9, r5, #40	; 0x28
 8005842:	f104 0818 	add.w	r8, r4, #24
 8005846:	4606      	mov	r6, r0
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005848:	463a      	mov	r2, r7
 800584a:	b2b1      	uxth	r1, r6
 800584c:	4628      	mov	r0, r5
 800584e:	f7ff ff91 	bl	8005774 <VL53L0X_GetLimitCheckValue>
			if (Status == VL53L0X_ERROR_NONE) {
 8005852:	b970      	cbnz	r0, 8005872 <VL53L0X_GetDeviceParameters+0x66>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005854:	3601      	adds	r6, #1
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005856:	f819 3b01 	ldrb.w	r3, [r9], #1
		*pLimitCheckEnable = Temp8;
 800585a:	f808 3b01 	strb.w	r3, [r8], #1
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800585e:	2e06      	cmp	r6, #6
 8005860:	f107 0704 	add.w	r7, r7, #4
 8005864:	d1f0      	bne.n	8005848 <VL53L0X_GetDeviceParameters+0x3c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005866:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800586a:	4628      	mov	r0, r5
 800586c:	f7ff ffb7 	bl	80057de <VL53L0X_GetWrapAroundCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8005870:	b108      	cbz	r0, 8005876 <VL53L0X_GetDeviceParameters+0x6a>
}
 8005872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005876:	1d21      	adds	r1, r4, #4
 8005878:	4628      	mov	r0, r5
}
 800587a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800587e:	f001 bd1c 	b.w	80072ba <VL53L0X_get_measurement_timing_budget_micro_seconds>
	...

08005884 <VL53L0X_DataInit>:
{
 8005884:	b5f0      	push	{r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005886:	2200      	movs	r2, #0
{
 8005888:	4605      	mov	r5, r0
 800588a:	b091      	sub	sp, #68	; 0x44
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800588c:	2188      	movs	r1, #136	; 0x88
 800588e:	f002 f951 	bl	8007b34 <VL53L0X_WrByte>
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005892:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005896:	f8a5 214e 	strh.w	r2, [r5, #334]	; 0x14e
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800589a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800589e:	f8a5 2150 	strh.w	r2, [r5, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80058a2:	4a41      	ldr	r2, [pc, #260]	; (80059a8 <VL53L0X_DataInit+0x124>)
 80058a4:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80058a8:	2300      	movs	r3, #0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80058aa:	4a40      	ldr	r2, [pc, #256]	; (80059ac <VL53L0X_DataInit+0x128>)
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80058ac:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80058b0:	f8c5 20d4 	str.w	r2, [r5, #212]	; 0xd4
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80058b4:	622b      	str	r3, [r5, #32]
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80058b6:	4669      	mov	r1, sp
 80058b8:	4628      	mov	r0, r5
 80058ba:	f7ff ffa7 	bl	800580c <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 80058be:	4604      	mov	r4, r0
 80058c0:	b980      	cbnz	r0, 80058e4 <VL53L0X_DataInit+0x60>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80058c2:	f88d 0000 	strb.w	r0, [sp]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80058c6:	f88d 0001 	strb.w	r0, [sp, #1]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80058ca:	466e      	mov	r6, sp
 80058cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80058ce:	f105 0710 	add.w	r7, r5, #16
 80058d2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80058d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80058d6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80058d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80058da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80058dc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80058e0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80058e4:	2364      	movs	r3, #100	; 0x64
 80058e6:	f8a5 3134 	strh.w	r3, [r5, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80058ea:	f44f 7361 	mov.w	r3, #900	; 0x384
 80058ee:	f8a5 3136 	strh.w	r3, [r5, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80058f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80058f6:	f8a5 3138 	strh.w	r3, [r5, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80058fa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80058fe:	f8a5 313a 	strh.w	r3, [r5, #314]	; 0x13a
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005902:	2301      	movs	r3, #1
 8005904:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005908:	2600      	movs	r6, #0
		if (Status == VL53L0X_ERROR_NONE)
 800590a:	2c00      	cmp	r4, #0
 800590c:	d149      	bne.n	80059a2 <VL53L0X_DataInit+0x11e>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800590e:	b2b1      	uxth	r1, r6
 8005910:	2201      	movs	r2, #1
 8005912:	4628      	mov	r0, r5
 8005914:	f7ff feb4 	bl	8005680 <VL53L0X_SetLimitCheckEnable>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005918:	3601      	adds	r6, #1
 800591a:	2e06      	cmp	r6, #6
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800591c:	4604      	mov	r4, r0
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800591e:	d1f4      	bne.n	800590a <VL53L0X_DataInit+0x86>
	if (Status == VL53L0X_ERROR_NONE)
 8005920:	bbf8      	cbnz	r0, 80059a2 <VL53L0X_DataInit+0x11e>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005922:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005926:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800592a:	4602      	mov	r2, r0
 800592c:	2104      	movs	r1, #4
 800592e:	4628      	mov	r0, r5
 8005930:	f7ff fea6 	bl	8005680 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8005934:	4604      	mov	r4, r0
 8005936:	bba0      	cbnz	r0, 80059a2 <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005938:	4602      	mov	r2, r0
 800593a:	2105      	movs	r1, #5
 800593c:	4628      	mov	r0, r5
 800593e:	f7ff fe9f 	bl	8005680 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8005942:	4604      	mov	r4, r0
 8005944:	bb68      	cbnz	r0, 80059a2 <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005946:	4601      	mov	r1, r0
 8005948:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800594c:	4628      	mov	r0, r5
 800594e:	f7ff fee4 	bl	800571a <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8005952:	4604      	mov	r4, r0
 8005954:	bb28      	cbnz	r0, 80059a2 <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005956:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800595a:	2101      	movs	r1, #1
 800595c:	4628      	mov	r0, r5
 800595e:	f7ff fedc 	bl	800571a <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8005962:	4604      	mov	r4, r0
 8005964:	b9e8      	cbnz	r0, 80059a2 <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005966:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800596a:	2102      	movs	r1, #2
 800596c:	4628      	mov	r0, r5
 800596e:	f7ff fed4 	bl	800571a <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8005972:	4604      	mov	r4, r0
 8005974:	b9a8      	cbnz	r0, 80059a2 <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005976:	4602      	mov	r2, r0
 8005978:	2103      	movs	r1, #3
 800597a:	4628      	mov	r0, r5
 800597c:	f7ff fecd 	bl	800571a <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8005980:	4604      	mov	r4, r0
 8005982:	b970      	cbnz	r0, 80059a2 <VL53L0X_DataInit+0x11e>
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005984:	22ff      	movs	r2, #255	; 0xff
 8005986:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800598a:	2101      	movs	r1, #1
 800598c:	4628      	mov	r0, r5
 800598e:	f002 f8d1 	bl	8007b34 <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005992:	2301      	movs	r3, #1
 8005994:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	if (Status == VL53L0X_ERROR_NONE)
 8005998:	4604      	mov	r4, r0
 800599a:	b910      	cbnz	r0, 80059a2 <VL53L0X_DataInit+0x11e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800599c:	2300      	movs	r3, #0
 800599e:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
}
 80059a2:	4620      	mov	r0, r4
 80059a4:	b011      	add	sp, #68	; 0x44
 80059a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059a8:	00016b85 	.word	0x00016b85
 80059ac:	000970a4 	.word	0x000970a4

080059b0 <VL53L0X_PerformRefCalibration>:
	uint8_t *pPhaseCal)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80059b0:	2301      	movs	r3, #1
 80059b2:	f000 bd66 	b.w	8006482 <VL53L0X_perform_ref_calibration>

080059b6 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80059b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ba:	b08e      	sub	sp, #56	; 0x38
 80059bc:	460c      	mov	r4, r1
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80059be:	230c      	movs	r3, #12
 80059c0:	aa04      	add	r2, sp, #16
 80059c2:	2114      	movs	r1, #20
{
 80059c4:	4606      	mov	r6, r0
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80059c6:	f002 f859 	bl	8007a7c <VL53L0X_ReadMulti>
 80059ca:	4686      	mov	lr, r0

	if (Status == VL53L0X_ERROR_NONE) {
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d175      	bne.n	8005abc <VL53L0X_GetRangingMeasurementData+0x106>
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80059d0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80059d4:	f89d 2017 	ldrb.w	r2, [sp, #23]
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80059d8:	f89d 1018 	ldrb.w	r1, [sp, #24]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80059dc:	f89d 501a 	ldrb.w	r5, [sp, #26]
 80059e0:	f89d 701b 	ldrb.w	r7, [sp, #27]
		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80059e4:	75a0      	strb	r0, [r4, #22]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80059e6:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80059ea:	f89d 3019 	ldrb.w	r3, [sp, #25]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80059ee:	6020      	str	r0, [r4, #0]
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80059f0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	025b      	lsls	r3, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80059f8:	6123      	str	r3, [r4, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80059fa:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80059fe:	f89d 3013 	ldrb.w	r3, [sp, #19]
		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005a02:	6060      	str	r0, [r4, #4]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005a04:	eb07 2705 	add.w	r7, r7, r5, lsl #8
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005a08:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005a0c:	b292      	uxth	r2, r2
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005a0e:	f8b6 514e 	ldrh.w	r5, [r6, #334]	; 0x14e
		DeviceRangeStatus = localBuffer[0];
 8005a12:	f89d 1010 	ldrb.w	r1, [sp, #16]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005a16:	0252      	lsls	r2, r2, #9
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005a18:	b29b      	uxth	r3, r3
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005a1a:	60e2      	str	r2, [r4, #12]
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005a1c:	82a3      	strh	r3, [r4, #20]

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005a1e:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005a22:	b2bf      	uxth	r7, r7
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005a24:	f896 e131 	ldrb.w	lr, [r6, #305]	; 0x131
		if (LinearityCorrectiveGain != 1000) {
 8005a28:	d00c      	beq.n	8005a44 <VL53L0X_GetRangingMeasurementData+0x8e>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005a2a:	fb07 f005 	mul.w	r0, r7, r5
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005a2e:	7f37      	ldrb	r7, [r6, #28]
				* tmpuint16 + 500) / 1000);
 8005a30:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8005a34:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8005a38:	fb90 f0f5 	sdiv	r0, r0, r5
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005a3c:	6a35      	ldr	r5, [r6, #32]
			if (XTalkCompensationEnable) {
 8005a3e:	2f00      	cmp	r7, #0
 8005a40:	d140      	bne.n	8005ac4 <VL53L0X_GetRangingMeasurementData+0x10e>
						XtalkRangeMilliMeter = 8888;
					else
						XtalkRangeMilliMeter = 8888
							<< 2;
				} else {
					XtalkRangeMilliMeter =
 8005a42:	b287      	uxth	r7, r0
				tmpuint16 = XtalkRangeMilliMeter;
			}

		}

		if (RangeFractionalEnable) {
 8005a44:	f1be 0f00 	cmp.w	lr, #0
 8005a48:	d046      	beq.n	8005ad8 <VL53L0X_GetRangingMeasurementData+0x122>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005a4a:	08b8      	lsrs	r0, r7, #2
			pRangingMeasurementData->RangeMilliMeter =
 8005a4c:	8120      	strh	r0, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005a4e:	01b8      	lsls	r0, r7, #6
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005a50:	75e0      	strb	r0, [r4, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005a52:	f10d 000f 	add.w	r0, sp, #15
 8005a56:	9001      	str	r0, [sp, #4]
 8005a58:	9400      	str	r4, [sp, #0]
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f001 fe5c 	bl	8007718 <VL53L0X_get_pal_range_status>
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005a60:	4686      	mov	lr, r0
 8005a62:	bb58      	cbnz	r0, 8005abc <VL53L0X_GetRangingMeasurementData+0x106>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005a64:	f89d c00f 	ldrb.w	ip, [sp, #15]
 8005a68:	f884 c018 	strb.w	ip, [r4, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005a6c:	f106 0550 	add.w	r5, r6, #80	; 0x50
 8005a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a72:	af07      	add	r7, sp, #28
 8005a74:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005a76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005a7a:	f8b4 a008 	ldrh.w	sl, [r4, #8]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005a7e:	7de3      	ldrb	r3, [r4, #23]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005a80:	f8b4 900a 	ldrh.w	r9, [r4, #10]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005a84:	f8b4 8014 	ldrh.w	r8, [r4, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005a88:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005a8c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8005a90:	68e1      	ldr	r1, [r4, #12]
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005a92:	6922      	ldr	r2, [r4, #16]
		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005a94:	6860      	ldr	r0, [r4, #4]
 8005a96:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 8005a9a:	910a      	str	r1, [sp, #40]	; 0x28
 8005a9c:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a9e:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 8005aa2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8005aa6:	f88d c034 	strb.w	ip, [sp, #52]	; 0x34
 8005aaa:	ac07      	add	r4, sp, #28
 8005aac:	9008      	str	r0, [sp, #32]
 8005aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ab0:	3650      	adds	r6, #80	; 0x50
 8005ab2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005ab4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005ab8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005abc:	4670      	mov	r0, lr
 8005abe:	b00e      	add	sp, #56	; 0x38
 8005ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					* EffectiveSpadRtnCount) >> 8))
 8005ac4:	b2ad      	uxth	r5, r5
 8005ac6:	435d      	muls	r5, r3
 8005ac8:	122d      	asrs	r5, r5, #8
				if ((SignalRate
 8005aca:	42aa      	cmp	r2, r5
 8005acc:	d107      	bne.n	8005ade <VL53L0X_GetRangingMeasurementData+0x128>
					if (RangeFractionalEnable)
 8005ace:	f1be 0f00 	cmp.w	lr, #0
 8005ad2:	d10a      	bne.n	8005aea <VL53L0X_GetRangingMeasurementData+0x134>
						XtalkRangeMilliMeter = 8888
 8005ad4:	f648 27e0 	movw	r7, #35552	; 0x8ae0
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005ad8:	8127      	strh	r7, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005ada:	2000      	movs	r0, #0
 8005adc:	e7b8      	b.n	8005a50 <VL53L0X_GetRangingMeasurementData+0x9a>
					(tmpuint16 * SignalRate)
 8005ade:	b280      	uxth	r0, r0
 8005ae0:	4350      	muls	r0, r2
						- ((XTalkCompensationRateMegaCps
 8005ae2:	1b55      	subs	r5, r2, r5
						/ (SignalRate
 8005ae4:	fbb0 f0f5 	udiv	r0, r0, r5
 8005ae8:	e7ab      	b.n	8005a42 <VL53L0X_GetRangingMeasurementData+0x8c>
						XtalkRangeMilliMeter = 8888;
 8005aea:	f242 27b8 	movw	r7, #8888	; 0x22b8
 8005aee:	e7ac      	b.n	8005a4a <VL53L0X_GetRangingMeasurementData+0x94>

08005af0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005af2:	4617      	mov	r7, r2
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005af4:	210e      	movs	r1, #14
 8005af6:	f10d 0206 	add.w	r2, sp, #6
{
 8005afa:	461d      	mov	r5, r3
 8005afc:	4606      	mov	r6, r0
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005afe:	4c0b      	ldr	r4, [pc, #44]	; (8005b2c <VL53L0X_GetInterruptThresholds+0x3c>)
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005b00:	f001 ffd2 	bl	8007aa8 <VL53L0X_RdWord>
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005b04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005b08:	ea04 4343 	and.w	r3, r4, r3, lsl #17
 8005b0c:	603b      	str	r3, [r7, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005b0e:	b950      	cbnz	r0, 8005b26 <VL53L0X_GetInterruptThresholds+0x36>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005b10:	f10d 0206 	add.w	r2, sp, #6
 8005b14:	210c      	movs	r1, #12
 8005b16:	4630      	mov	r0, r6
 8005b18:	f001 ffc6 	bl	8007aa8 <VL53L0X_RdWord>
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005b1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005b20:	ea04 4443 	and.w	r4, r4, r3, lsl #17
		*pThresholdHigh =
 8005b24:	602c      	str	r4, [r5, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005b26:	b003      	add	sp, #12
 8005b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	1ffe0000 	.word	0x1ffe0000

08005b30 <VL53L0X_CheckAndLoadInterruptSettings>:
{
 8005b30:	b573      	push	{r0, r1, r4, r5, r6, lr}
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005b32:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
	if ((InterruptConfig ==
 8005b36:	3b01      	subs	r3, #1
 8005b38:	2b02      	cmp	r3, #2
{
 8005b3a:	4606      	mov	r6, r0
 8005b3c:	460c      	mov	r4, r1
	if ((InterruptConfig ==
 8005b3e:	d833      	bhi.n	8005ba8 <VL53L0X_CheckAndLoadInterruptSettings+0x78>
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005b40:	ab01      	add	r3, sp, #4
 8005b42:	466a      	mov	r2, sp
 8005b44:	2101      	movs	r1, #1
 8005b46:	f7ff ffd3 	bl	8005af0 <VL53L0X_GetInterruptThresholds>
		if (((ThresholdLow > 255*65536) ||
 8005b4a:	9b00      	ldr	r3, [sp, #0]
 8005b4c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005b50:	4605      	mov	r5, r0
		if (((ThresholdLow > 255*65536) ||
 8005b52:	d803      	bhi.n	8005b5c <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
 8005b54:	9b01      	ldr	r3, [sp, #4]
 8005b56:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005b5a:	d906      	bls.n	8005b6a <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			(ThresholdHigh > 255*65536)) &&
 8005b5c:	b92d      	cbnz	r5, 8005b6a <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			if (StartNotStopFlag != 0) {
 8005b5e:	b13c      	cbz	r4, 8005b70 <VL53L0X_CheckAndLoadInterruptSettings+0x40>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005b60:	4912      	ldr	r1, [pc, #72]	; (8005bac <VL53L0X_CheckAndLoadInterruptSettings+0x7c>)
 8005b62:	4630      	mov	r0, r6
 8005b64:	f001 fc0e 	bl	8007384 <VL53L0X_load_tuning_settings>
 8005b68:	4605      	mov	r5, r0
}
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	b002      	add	sp, #8
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005b70:	2204      	movs	r2, #4
 8005b72:	21ff      	movs	r1, #255	; 0xff
 8005b74:	4630      	mov	r0, r6
 8005b76:	f001 ffdd 	bl	8007b34 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005b7a:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005b7c:	4604      	mov	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005b7e:	2170      	movs	r1, #112	; 0x70
 8005b80:	4630      	mov	r0, r6
 8005b82:	f001 ffd7 	bl	8007b34 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b86:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005b88:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b8a:	21ff      	movs	r1, #255	; 0xff
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	f001 ffd1 	bl	8007b34 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005b92:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b94:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005b96:	462a      	mov	r2, r5
 8005b98:	2180      	movs	r1, #128	; 0x80
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	f001 ffca 	bl	8007b34 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005ba0:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005ba2:	4320      	orrs	r0, r4
 8005ba4:	b245      	sxtb	r5, r0
 8005ba6:	e7e0      	b.n	8005b6a <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ba8:	2500      	movs	r5, #0
 8005baa:	e7de      	b.n	8005b6a <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
 8005bac:	20000347 	.word	0x20000347

08005bb0 <VL53L0X_StartMeasurement>:
{
 8005bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	switch (DeviceMode) {
 8005bb2:	7c01      	ldrb	r1, [r0, #16]
 8005bb4:	2901      	cmp	r1, #1
{
 8005bb6:	4604      	mov	r4, r0
	switch (DeviceMode) {
 8005bb8:	d027      	beq.n	8005c0a <VL53L0X_StartMeasurement+0x5a>
 8005bba:	d304      	bcc.n	8005bc6 <VL53L0X_StartMeasurement+0x16>
 8005bbc:	2903      	cmp	r1, #3
 8005bbe:	d031      	beq.n	8005c24 <VL53L0X_StartMeasurement+0x74>
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005bc0:	f06f 0007 	mvn.w	r0, #7
 8005bc4:	e013      	b.n	8005bee <VL53L0X_StartMeasurement+0x3e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	2100      	movs	r1, #0
 8005bca:	f001 ffb3 	bl	8007b34 <VL53L0X_WrByte>
		Byte = StartStopByte;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f88d 3007 	strb.w	r3, [sp, #7]
		if (Status == VL53L0X_ERROR_NONE) {
 8005bd4:	b958      	cbnz	r0, 8005bee <VL53L0X_StartMeasurement+0x3e>
 8005bd6:	4605      	mov	r5, r0
			} while (((Byte & StartStopByte) == StartStopByte)
 8005bd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005bdc:	07db      	lsls	r3, r3, #31
				LoopNb = LoopNb + 1;
 8005bde:	f105 0501 	add.w	r5, r5, #1
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005be2:	d50d      	bpl.n	8005c00 <VL53L0X_StartMeasurement+0x50>
				&& (Status == VL53L0X_ERROR_NONE)
 8005be4:	b960      	cbnz	r0, 8005c00 <VL53L0X_StartMeasurement+0x50>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005be6:	2dc8      	cmp	r5, #200	; 0xc8
 8005be8:	d103      	bne.n	8005bf2 <VL53L0X_StartMeasurement+0x42>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005bea:	f06f 0006 	mvn.w	r0, #6
}
 8005bee:	b003      	add	sp, #12
 8005bf0:	bd30      	pop	{r4, r5, pc}
					Status = VL53L0X_RdByte(Dev,
 8005bf2:	4601      	mov	r1, r0
 8005bf4:	f10d 0207 	add.w	r2, sp, #7
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f001 ff0c 	bl	8007a16 <VL53L0X_RdByte>
 8005bfe:	e7eb      	b.n	8005bd8 <VL53L0X_StartMeasurement+0x28>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005c00:	2dc8      	cmp	r5, #200	; 0xc8
 8005c02:	bf08      	it	eq
 8005c04:	f06f 0006 	mvneq.w	r0, #6
 8005c08:	e7f1      	b.n	8005bee <VL53L0X_StartMeasurement+0x3e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005c0a:	f7ff ff91 	bl	8005b30 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8005c0e:	2202      	movs	r2, #2
		Status = VL53L0X_WrByte(Dev,
 8005c10:	2100      	movs	r1, #0
 8005c12:	4620      	mov	r0, r4
 8005c14:	f001 ff8e 	bl	8007b34 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d1e8      	bne.n	8005bee <VL53L0X_StartMeasurement+0x3e>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005c1c:	2304      	movs	r3, #4
 8005c1e:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8005c22:	e7e4      	b.n	8005bee <VL53L0X_StartMeasurement+0x3e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005c24:	2101      	movs	r1, #1
 8005c26:	f7ff ff83 	bl	8005b30 <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	e7f0      	b.n	8005c10 <VL53L0X_StartMeasurement+0x60>

08005c2e <VL53L0X_PerformSingleMeasurement>:
{
 8005c2e:	b538      	push	{r3, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005c30:	7c05      	ldrb	r5, [r0, #16]
{
 8005c32:	4604      	mov	r4, r0
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005c34:	b125      	cbz	r5, 8005c40 <VL53L0X_PerformSingleMeasurement+0x12>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005c36:	4620      	mov	r0, r4
 8005c38:	f000 fd76 	bl	8006728 <VL53L0X_measurement_poll_for_completion>
	if (Status == VL53L0X_ERROR_NONE
 8005c3c:	b128      	cbz	r0, 8005c4a <VL53L0X_PerformSingleMeasurement+0x1c>
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L0X_StartMeasurement(Dev);
 8005c40:	f7ff ffb6 	bl	8005bb0 <VL53L0X_StartMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d0f6      	beq.n	8005c36 <VL53L0X_PerformSingleMeasurement+0x8>
}
 8005c48:	bd38      	pop	{r3, r4, r5, pc}
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005c4a:	2d00      	cmp	r5, #0
 8005c4c:	d1fc      	bne.n	8005c48 <VL53L0X_PerformSingleMeasurement+0x1a>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005c4e:	2303      	movs	r3, #3
 8005c50:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8005c54:	e7f8      	b.n	8005c48 <VL53L0X_PerformSingleMeasurement+0x1a>

08005c56 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8005c56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c58:	4606      	mov	r6, r0
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8005c5a:	2500      	movs	r5, #0
	do {
		Status = VL53L0X_WrByte(Dev,
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	210b      	movs	r1, #11
 8005c60:	4630      	mov	r0, r6
 8005c62:	f001 ff67 	bl	8007b34 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8005c66:	2200      	movs	r2, #0
		Status = VL53L0X_WrByte(Dev,
 8005c68:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev,
 8005c6a:	210b      	movs	r1, #11
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f001 ff61 	bl	8007b34 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8005c72:	f10d 0207 	add.w	r2, sp, #7
		Status |= VL53L0X_WrByte(Dev,
 8005c76:	4304      	orrs	r4, r0
		Status |= VL53L0X_RdByte(Dev,
 8005c78:	2113      	movs	r1, #19
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f001 fecb 	bl	8007a16 <VL53L0X_RdByte>
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
	} while (((Byte & 0x07) != 0x00)
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005c80:	f89d 3007 	ldrb.w	r3, [sp, #7]
		Status |= VL53L0X_WrByte(Dev,
 8005c84:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev,
 8005c86:	4320      	orrs	r0, r4
		LoopCount++;
 8005c88:	3501      	adds	r5, #1
			&& (Status == VL53L0X_ERROR_NONE));
 8005c8a:	075b      	lsls	r3, r3, #29
		Status |= VL53L0X_RdByte(Dev,
 8005c8c:	b240      	sxtb	r0, r0
		LoopCount++;
 8005c8e:	b2ed      	uxtb	r5, r5
			&& (Status == VL53L0X_ERROR_NONE));
 8005c90:	d005      	beq.n	8005c9e <VL53L0X_ClearInterruptMask+0x48>
			&& (LoopCount < 3)
 8005c92:	2d03      	cmp	r5, #3
 8005c94:	d008      	beq.n	8005ca8 <VL53L0X_ClearInterruptMask+0x52>
			&& (Status == VL53L0X_ERROR_NONE));
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d0e0      	beq.n	8005c5c <VL53L0X_ClearInterruptMask+0x6>
	if (LoopCount >= 3)
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005c9a:	b002      	add	sp, #8
 8005c9c:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005c9e:	2d03      	cmp	r5, #3
 8005ca0:	bf08      	it	eq
 8005ca2:	f06f 000b 	mvneq.w	r0, #11
 8005ca6:	e7f8      	b.n	8005c9a <VL53L0X_ClearInterruptMask+0x44>
 8005ca8:	f06f 000b 	mvn.w	r0, #11
 8005cac:	e7f5      	b.n	8005c9a <VL53L0X_ClearInterruptMask+0x44>

08005cae <VL53L0X_PerformSingleRangingMeasurement>:
{
 8005cae:	b538      	push	{r3, r4, r5, lr}
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	7403      	strb	r3, [r0, #16]
{
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	460d      	mov	r5, r1
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8005cb8:	f7ff ffb9 	bl	8005c2e <VL53L0X_PerformSingleMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8005cbc:	b950      	cbnz	r0, 8005cd4 <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f7ff fe78 	bl	80059b6 <VL53L0X_GetRangingMeasurementData>
	if (Status == VL53L0X_ERROR_NONE)
 8005cc6:	b928      	cbnz	r0, 8005cd4 <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005cc8:	4601      	mov	r1, r0
 8005cca:	4620      	mov	r0, r4
}
 8005ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005cd0:	f7ff bfc1 	b.w	8005c56 <VL53L0X_ClearInterruptMask>
}
 8005cd4:	bd38      	pop	{r3, r4, r5, pc}

08005cd6 <VL53L0X_SetGpioConfig>:
{
 8005cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd8:	4605      	mov	r5, r0
 8005cda:	461c      	mov	r4, r3
 8005cdc:	f89d 7018 	ldrb.w	r7, [sp, #24]
	if (Pin != 0) {
 8005ce0:	460e      	mov	r6, r1
 8005ce2:	2900      	cmp	r1, #0
 8005ce4:	f040 809a 	bne.w	8005e1c <VL53L0X_SetGpioConfig+0x146>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8005ce8:	2a14      	cmp	r2, #20
 8005cea:	d108      	bne.n	8005cfe <VL53L0X_SetGpioConfig+0x28>
			data = 1;
 8005cec:	2f00      	cmp	r7, #0
		Status = VL53L0X_WrByte(Dev,
 8005cee:	bf0c      	ite	eq
 8005cf0:	2210      	moveq	r2, #16
 8005cf2:	2201      	movne	r2, #1
 8005cf4:	2184      	movs	r1, #132	; 0x84
}
 8005cf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev,
 8005cfa:	f001 bf1b 	b.w	8007b34 <VL53L0X_WrByte>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8005cfe:	2a15      	cmp	r2, #21
 8005d00:	d167      	bne.n	8005dd2 <VL53L0X_SetGpioConfig+0xfc>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005d02:	2201      	movs	r2, #1
 8005d04:	21ff      	movs	r1, #255	; 0xff
 8005d06:	f001 ff15 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005d0a:	4632      	mov	r2, r6
 8005d0c:	4631      	mov	r1, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005d0e:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005d10:	4628      	mov	r0, r5
 8005d12:	f001 ff0f 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005d16:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005d18:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005d1a:	21ff      	movs	r1, #255	; 0xff
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f001 ff09 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005d22:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005d24:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005d26:	2201      	movs	r2, #1
 8005d28:	2180      	movs	r1, #128	; 0x80
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	f001 ff02 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005d30:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005d32:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8005d34:	2202      	movs	r2, #2
 8005d36:	2185      	movs	r1, #133	; 0x85
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f001 fefb 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005d3e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8005d40:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8005d42:	2204      	movs	r2, #4
 8005d44:	21ff      	movs	r1, #255	; 0xff
 8005d46:	4628      	mov	r0, r5
 8005d48:	f001 fef4 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8005d4c:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005d4e:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8005d50:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005d52:	21cd      	movs	r1, #205	; 0xcd
 8005d54:	4628      	mov	r0, r5
 8005d56:	f001 feed 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8005d5a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005d5c:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8005d5e:	2211      	movs	r2, #17
 8005d60:	21cc      	movs	r1, #204	; 0xcc
 8005d62:	4628      	mov	r0, r5
 8005d64:	f001 fee6 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005d68:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8005d6a:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8005d6c:	2207      	movs	r2, #7
 8005d6e:	21ff      	movs	r1, #255	; 0xff
 8005d70:	4628      	mov	r0, r5
 8005d72:	f001 fedf 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8005d76:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8005d78:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8005d7a:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8005d7c:	21be      	movs	r1, #190	; 0xbe
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f001 fed8 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8005d84:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8005d86:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8005d88:	2206      	movs	r2, #6
 8005d8a:	21ff      	movs	r1, #255	; 0xff
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f001 fed1 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8005d92:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8005d94:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8005d96:	2209      	movs	r2, #9
 8005d98:	21cc      	movs	r1, #204	; 0xcc
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	f001 feca 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8005da0:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005da2:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8005da4:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005da6:	21ff      	movs	r1, #255	; 0xff
 8005da8:	4628      	mov	r0, r5
 8005daa:	f001 fec3 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8005dae:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005db0:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005db2:	2201      	movs	r2, #1
 8005db4:	21ff      	movs	r1, #255	; 0xff
 8005db6:	4628      	mov	r0, r5
 8005db8:	f001 febc 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005dbc:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005dbe:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005dc0:	4632      	mov	r2, r6
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	f001 feb5 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005dca:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005dcc:	4320      	orrs	r0, r4
 8005dce:	b240      	sxtb	r0, r0
 8005dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			switch (Functionality) {
 8005dd2:	2c04      	cmp	r4, #4
 8005dd4:	d825      	bhi.n	8005e22 <VL53L0X_SetGpioConfig+0x14c>
 8005dd6:	e8df f004 	tbb	[pc, r4]
 8005dda:	2729      	.short	0x2729
 8005ddc:	0a03      	.short	0x0a03
 8005dde:	0c          	.byte	0x0c
 8005ddf:	00          	.byte	0x00
				data = 0x02;
 8005de0:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 8005de2:	210a      	movs	r1, #10
 8005de4:	4628      	mov	r0, r5
 8005de6:	f001 fea5 	bl	8007b34 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8005dea:	b120      	cbz	r0, 8005df6 <VL53L0X_SetGpioConfig+0x120>
}
 8005dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data = 0x03;
 8005dee:	2203      	movs	r2, #3
				break;
 8005df0:	e7f7      	b.n	8005de2 <VL53L0X_SetGpioConfig+0x10c>
				data = 0x04;
 8005df2:	2204      	movs	r2, #4
				break;
 8005df4:	e7f5      	b.n	8005de2 <VL53L0X_SetGpioConfig+0x10c>
				data = (uint8_t)(1 << 4);
 8005df6:	2f00      	cmp	r7, #0
			Status = VL53L0X_UpdateByte(Dev,
 8005df8:	bf0c      	ite	eq
 8005dfa:	4633      	moveq	r3, r6
 8005dfc:	2310      	movne	r3, #16
 8005dfe:	22ef      	movs	r2, #239	; 0xef
 8005e00:	2184      	movs	r1, #132	; 0x84
 8005e02:	4628      	mov	r0, r5
 8005e04:	f001 feb8 	bl	8007b78 <VL53L0X_UpdateByte>
		if (Status == VL53L0X_ERROR_NONE)
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d1ef      	bne.n	8005dec <VL53L0X_SetGpioConfig+0x116>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005e0c:	f885 40da 	strb.w	r4, [r5, #218]	; 0xda
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005e10:	4601      	mov	r1, r0
 8005e12:	4628      	mov	r0, r5
}
 8005e14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005e18:	f7ff bf1d 	b.w	8005c56 <VL53L0X_ClearInterruptMask>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8005e1c:	f06f 0009 	mvn.w	r0, #9
 8005e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				Status =
 8005e22:	f06f 000a 	mvn.w	r0, #10
 8005e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data = 0x01;
 8005e28:	2201      	movs	r2, #1
 8005e2a:	e7da      	b.n	8005de2 <VL53L0X_SetGpioConfig+0x10c>
				data = 0x00;
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	e7d8      	b.n	8005de2 <VL53L0X_SetGpioConfig+0x10c>

08005e30 <VL53L0X_StaticInit>:
{
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	b096      	sub	sp, #88	; 0x58
 8005e34:	4605      	mov	r5, r0
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8005e36:	2240      	movs	r2, #64	; 0x40
 8005e38:	2100      	movs	r1, #0
 8005e3a:	a806      	add	r0, sp, #24
 8005e3c:	f001 ff95 	bl	8007d6a <memset>
	uint16_t tempword = 0;
 8005e40:	2300      	movs	r3, #0
	Status = VL53L0X_get_info_from_device(Dev, 1);
 8005e42:	2101      	movs	r1, #1
 8005e44:	4628      	mov	r0, r5
	uint16_t tempword = 0;
 8005e46:	f8ad 300e 	strh.w	r3, [sp, #14]
	uint8_t tempbyte = 0;
 8005e4a:	f88d 300b 	strb.w	r3, [sp, #11]
	uint8_t isApertureSpads = 0;
 8005e4e:	f88d 300c 	strb.w	r3, [sp, #12]
	uint32_t refSpadCount = 0;
 8005e52:	9304      	str	r3, [sp, #16]
	Status = VL53L0X_get_info_from_device(Dev, 1);
 8005e54:	f000 fcb8 	bl	80067c8 <VL53L0X_get_info_from_device>
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005e58:	f895 2114 	ldrb.w	r2, [r5, #276]	; 0x114
	if ((ApertureSpads > 1) ||
 8005e5c:	2a01      	cmp	r2, #1
 8005e5e:	d806      	bhi.n	8005e6e <VL53L0X_StaticInit+0x3e>
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005e60:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
	if ((ApertureSpads > 1) ||
 8005e64:	f040 80ae 	bne.w	8005fc4 <VL53L0X_StaticInit+0x194>
		((ApertureSpads == 1) && (count > 32)) ||
 8005e68:	2920      	cmp	r1, #32
		((ApertureSpads == 0) && (count > 12)))
 8005e6a:	f240 80ad 	bls.w	8005fc8 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8005e6e:	aa03      	add	r2, sp, #12
 8005e70:	a904      	add	r1, sp, #16
 8005e72:	4628      	mov	r0, r5
 8005e74:	f000 fb20 	bl	80064b8 <VL53L0X_perform_ref_spad_management>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8005e78:	4604      	mov	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	f040 809f 	bne.w	8005fbe <VL53L0X_StaticInit+0x18e>
		if (UseInternalTuningSettings == 0)
 8005e80:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f040 80a3 	bne.w	8005fd0 <VL53L0X_StaticInit+0x1a0>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8005e8a:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f001 fa78 	bl	8007384 <VL53L0X_load_tuning_settings>
	if (Status == VL53L0X_ERROR_NONE) {
 8005e94:	4604      	mov	r4, r0
 8005e96:	2800      	cmp	r0, #0
 8005e98:	f040 8091 	bne.w	8005fbe <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8005e9c:	9400      	str	r4, [sp, #0]
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	2304      	movs	r3, #4
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f7ff ff16 	bl	8005cd6 <VL53L0X_SetGpioConfig>
	if (Status == VL53L0X_ERROR_NONE) {
 8005eaa:	4604      	mov	r4, r0
 8005eac:	2800      	cmp	r0, #0
 8005eae:	f040 8086 	bne.w	8005fbe <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	21ff      	movs	r1, #255	; 0xff
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f001 fe3c 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8005ebc:	f10d 020e 	add.w	r2, sp, #14
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005ec0:	4606      	mov	r6, r0
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8005ec2:	2184      	movs	r1, #132	; 0x84
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	f001 fdef 	bl	8007aa8 <VL53L0X_RdWord>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005eca:	4622      	mov	r2, r4
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8005ecc:	4306      	orrs	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005ece:	21ff      	movs	r1, #255	; 0xff
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	f001 fe2f 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8005ed6:	b276      	sxtb	r6, r6
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005ed8:	4330      	orrs	r0, r6
 8005eda:	b244      	sxtb	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8005edc:	2c00      	cmp	r4, #0
 8005ede:	d16e      	bne.n	8005fbe <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8005ee0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005eea:	a906      	add	r1, sp, #24
 8005eec:	4628      	mov	r0, r5
 8005eee:	f7ff fc8d 	bl	800580c <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d162      	bne.n	8005fbe <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8005ef8:	f10d 010b 	add.w	r1, sp, #11
 8005efc:	4628      	mov	r0, r5
 8005efe:	f7ff faf3 	bl	80054e8 <VL53L0X_GetFractionEnable>
		if (Status == VL53L0X_ERROR_NONE)
 8005f02:	4604      	mov	r4, r0
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d15a      	bne.n	8005fbe <VL53L0X_StaticInit+0x18e>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8005f08:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8005f0c:	f885 3131 	strb.w	r3, [r5, #305]	; 0x131
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005f10:	ae06      	add	r6, sp, #24
 8005f12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005f14:	f105 0410 	add.w	r4, r5, #16
 8005f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f1a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f22:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005f26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Status = VL53L0X_RdByte(Dev,
 8005f2a:	f10d 020b 	add.w	r2, sp, #11
 8005f2e:	2101      	movs	r1, #1
 8005f30:	4628      	mov	r0, r5
 8005f32:	f001 fd70 	bl	8007a16 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE)
 8005f36:	4604      	mov	r4, r0
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d140      	bne.n	8005fbe <VL53L0X_StaticInit+0x18e>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8005f3c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8005f40:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005f44:	4602      	mov	r2, r0
 8005f46:	4601      	mov	r1, r0
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f7ff fadf 	bl	800550c <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8005f4e:	4604      	mov	r4, r0
 8005f50:	bba8      	cbnz	r0, 8005fbe <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005f52:	4602      	mov	r2, r0
 8005f54:	2102      	movs	r1, #2
 8005f56:	4628      	mov	r0, r5
 8005f58:	f7ff fad8 	bl	800550c <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	bb70      	cbnz	r0, 8005fbe <VL53L0X_StaticInit+0x18e>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005f60:	2303      	movs	r3, #3
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005f62:	4601      	mov	r1, r0
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005f64:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005f68:	f10d 020d 	add.w	r2, sp, #13
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	f001 f92a 	bl	80071c6 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 8005f72:	4604      	mov	r4, r0
 8005f74:	bb18      	cbnz	r0, 8005fbe <VL53L0X_StaticInit+0x18e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005f76:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005f7a:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005f7e:	f10d 020d 	add.w	r2, sp, #13
 8005f82:	2101      	movs	r1, #1
 8005f84:	4628      	mov	r0, r5
 8005f86:	f001 f91e 	bl	80071c6 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	b9b8      	cbnz	r0, 8005fbe <VL53L0X_StaticInit+0x18e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005f8e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8005f92:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		Status = VL53L0X_GetSequenceStepTimeout(
 8005f96:	aa05      	add	r2, sp, #20
 8005f98:	2103      	movs	r1, #3
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f7ff fb23 	bl	80055e6 <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	b960      	cbnz	r0, 8005fbe <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005fa4:	9b05      	ldr	r3, [sp, #20]
 8005fa6:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
		Status = VL53L0X_GetSequenceStepTimeout(
 8005faa:	aa05      	add	r2, sp, #20
 8005fac:	2104      	movs	r1, #4
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f7ff fb19 	bl	80055e6 <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	b910      	cbnz	r0, 8005fbe <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005fb8:	9b05      	ldr	r3, [sp, #20]
 8005fba:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
}
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	b016      	add	sp, #88	; 0x58
 8005fc2:	bd70      	pop	{r4, r5, r6, pc}
		((ApertureSpads == 0) && (count > 12)))
 8005fc4:	290c      	cmp	r1, #12
 8005fc6:	e750      	b.n	8005e6a <VL53L0X_StaticInit+0x3a>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8005fc8:	4628      	mov	r0, r5
 8005fca:	f000 f913 	bl	80061f4 <VL53L0X_set_reference_spads>
 8005fce:	e753      	b.n	8005e78 <VL53L0X_StaticInit+0x48>
			pTuningSettingBuffer = DefaultTuningSettings;
 8005fd0:	4900      	ldr	r1, [pc, #0]	; (8005fd4 <VL53L0X_StaticInit+0x1a4>)
 8005fd2:	e75c      	b.n	8005e8e <VL53L0X_StaticInit+0x5e>
 8005fd4:	20000254 	.word	0x20000254

08005fd8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005fd8:	b513      	push	{r0, r1, r4, lr}
 8005fda:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8005fdc:	f10d 0207 	add.w	r2, sp, #7
 8005fe0:	2113      	movs	r1, #19
 8005fe2:	f001 fd18 	bl	8007a16 <VL53L0X_RdByte>
	*pInterruptMaskStatus = Byte & 0x07;
 8005fe6:	f89d 3007 	ldrb.w	r3, [sp, #7]

	if (Byte & 0x18)
 8005fea:	f013 0f18 	tst.w	r3, #24
	*pInterruptMaskStatus = Byte & 0x07;
 8005fee:	f003 0207 	and.w	r2, r3, #7
		Status = VL53L0X_ERROR_RANGE_ERROR;

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005ff2:	bf18      	it	ne
 8005ff4:	f06f 0005 	mvnne.w	r0, #5
	*pInterruptMaskStatus = Byte & 0x07;
 8005ff8:	6022      	str	r2, [r4, #0]
}
 8005ffa:	b002      	add	sp, #8
 8005ffc:	bd10      	pop	{r4, pc}

08005ffe <VL53L0X_GetMeasurementDataReady>:
{
 8005ffe:	b513      	push	{r0, r1, r4, lr}
	if (InterruptConfig ==
 8006000:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
 8006004:	2b04      	cmp	r3, #4
{
 8006006:	460c      	mov	r4, r1
	if (InterruptConfig ==
 8006008:	d10b      	bne.n	8006022 <VL53L0X_GetMeasurementDataReady+0x24>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800600a:	a901      	add	r1, sp, #4
 800600c:	f7ff ffe4 	bl	8005fd8 <VL53L0X_GetInterruptMaskStatus>
		if (InterruptMask ==
 8006010:	9b01      	ldr	r3, [sp, #4]
 8006012:	2b04      	cmp	r3, #4
 8006014:	d101      	bne.n	800601a <VL53L0X_GetMeasurementDataReady+0x1c>
				*pMeasurementDataReady = 1;
 8006016:	2301      	movs	r3, #1
 8006018:	e000      	b.n	800601c <VL53L0X_GetMeasurementDataReady+0x1e>
			*pMeasurementDataReady = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	7023      	strb	r3, [r4, #0]
}
 800601e:	b002      	add	sp, #8
 8006020:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8006022:	aa01      	add	r2, sp, #4
 8006024:	2114      	movs	r1, #20
 8006026:	f001 fcf6 	bl	8007a16 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE) {
 800602a:	2800      	cmp	r0, #0
 800602c:	d1f7      	bne.n	800601e <VL53L0X_GetMeasurementDataReady+0x20>
			if (SysRangeStatusRegister & 0x01)
 800602e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006032:	07db      	lsls	r3, r3, #31
 8006034:	d4ef      	bmi.n	8006016 <VL53L0X_GetMeasurementDataReady+0x18>
				*pMeasurementDataReady = 0;
 8006036:	7020      	strb	r0, [r4, #0]
 8006038:	e7f1      	b.n	800601e <VL53L0X_GetMeasurementDataReady+0x20>

0800603a <VL53L0X_PerformRefSpadManagement>:
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800603a:	f000 ba3d 	b.w	80064b8 <VL53L0X_perform_ref_spad_management>

0800603e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800603e:	b513      	push	{r0, r1, r4, lr}
 8006040:	460c      	mov	r4, r1
	int16_t cMaxOffset = 2047;
	int16_t cOffsetRange = 4096;

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8006042:	f10d 0206 	add.w	r2, sp, #6
 8006046:	2128      	movs	r1, #40	; 0x28
 8006048:	f001 fd2e 	bl	8007aa8 <VL53L0X_RdWord>
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800604c:	b970      	cbnz	r0, 800606c <VL53L0X_get_offset_calibration_data_micro_meter+0x2e>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800604e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006052:	f3c3 030b 	ubfx	r3, r3, #0, #12

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800605a:	f04f 02fa 	mov.w	r2, #250	; 0xfa
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800605e:	bf26      	itte	cs
 8006060:	f5a3 5380 	subcs.w	r3, r3, #4096	; 0x1000
					* 250;
 8006064:	fb13 f302 	smulbbcs	r3, r3, r2
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8006068:	4353      	mulcc	r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800606a:	6023      	str	r3, [r4, #0]

	}

	return Status;
}
 800606c:	b002      	add	sp, #8
 800606e:	bd10      	pop	{r4, pc}

08006070 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006070:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * the index of the bit within each byte.
	 */

	*next = -1;

	startIndex = curr / cSpadsPerByte;
 8006072:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
	*next = -1;
 8006076:	f04f 34ff 	mov.w	r4, #4294967295
 800607a:	601c      	str	r4, [r3, #0]
	fineOffset = curr % cSpadsPerByte;
 800607c:	f002 0207 	and.w	r2, r2, #7
 8006080:	ea4f 0cce 	mov.w	ip, lr, lsl #3

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006084:	4676      	mov	r6, lr
	uint8_t success = 0;
 8006086:	2700      	movs	r7, #0
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006088:	428e      	cmp	r6, r1
 800608a:	d200      	bcs.n	800608e <get_next_good_spad+0x1e>
 800608c:	b107      	cbz	r7, 8006090 <get_next_good_spad+0x20>
 800608e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				coarseIndex++) {
		fineIndex = 0;
		dataByte = goodSpadArray[coarseIndex];
 8006090:	5d85      	ldrb	r5, [r0, r6]

		if (coarseIndex == startIndex) {
 8006092:	4576      	cmp	r6, lr
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8006094:	bf03      	ittte	eq
 8006096:	4115      	asreq	r5, r2
 8006098:	b2ed      	uxtbeq	r5, r5
			fineIndex = fineOffset;
 800609a:	4614      	moveq	r4, r2
		fineIndex = 0;
 800609c:	463c      	movne	r4, r7
		}

		while (fineIndex < cSpadsPerByte) {
			if ((dataByte & 0x1) == 1) {
 800609e:	f015 0f01 	tst.w	r5, #1
 80060a2:	d006      	beq.n	80060b2 <get_next_good_spad+0x42>
				success = 1;
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80060a4:	4464      	add	r4, ip
 80060a6:	601c      	str	r4, [r3, #0]
				success = 1;
 80060a8:	2701      	movs	r7, #1
				coarseIndex++) {
 80060aa:	3601      	adds	r6, #1
 80060ac:	f10c 0c08 	add.w	ip, ip, #8
 80060b0:	e7ea      	b.n	8006088 <get_next_good_spad+0x18>
				break;
			}
			dataByte >>= 1;
			fineIndex++;
 80060b2:	3401      	adds	r4, #1
		while (fineIndex < cSpadsPerByte) {
 80060b4:	2c08      	cmp	r4, #8
			dataByte >>= 1;
 80060b6:	ea4f 0555 	mov.w	r5, r5, lsr #1
		while (fineIndex < cSpadsPerByte) {
 80060ba:	d1f0      	bne.n	800609e <get_next_good_spad+0x2e>
 80060bc:	e7f5      	b.n	80060aa <get_next_good_spad+0x3a>
	...

080060c0 <is_aperture>:
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
	quadrant = spadIndex >> 6;
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80060c0:	4b03      	ldr	r3, [pc, #12]	; (80060d0 <is_aperture+0x10>)
	quadrant = spadIndex >> 6;
 80060c2:	0980      	lsrs	r0, r0, #6
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80060c4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		isAperture = 0;

	return isAperture;
}
 80060c8:	3000      	adds	r0, #0
 80060ca:	bf18      	it	ne
 80060cc:	2001      	movne	r0, #1
 80060ce:	4770      	bx	lr
 80060d0:	20000500 	.word	0x20000500

080060d4 <enable_spad_bit>:
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t cSpadsPerByte = 8;
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80060d4:	08d3      	lsrs	r3, r2, #3
	fineIndex = spadIndex % cSpadsPerByte;
	if (coarseIndex >= size)
 80060d6:	428b      	cmp	r3, r1
	fineIndex = spadIndex % cSpadsPerByte;
 80060d8:	f002 0207 	and.w	r2, r2, #7
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80060dc:	bf3f      	itttt	cc
 80060de:	2101      	movcc	r1, #1
 80060e0:	4091      	lslcc	r1, r2
 80060e2:	5cc2      	ldrbcc	r2, [r0, r3]
 80060e4:	430a      	orrcc	r2, r1
 80060e6:	bf3a      	itte	cc
 80060e8:	54c2      	strbcc	r2, [r0, r3]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80060ea:	2000      	movcc	r0, #0
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80060ec:	f06f 0031 	mvncs.w	r0, #49	; 0x31

	return status;
}
 80060f0:	4770      	bx	lr

080060f2 <set_ref_spad_map>:
	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80060f2:	460a      	mov	r2, r1
 80060f4:	2306      	movs	r3, #6
 80060f6:	21b0      	movs	r1, #176	; 0xb0
 80060f8:	f001 bca2 	b.w	8007a40 <VL53L0X_WriteMulti>

080060fc <get_ref_spad_map>:
	return status;
}

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80060fc:	460a      	mov	r2, r1
 80060fe:	2306      	movs	r3, #6
 8006100:	21b0      	movs	r1, #176	; 0xb0
 8006102:	f001 bcbb 	b.w	8007a7c <VL53L0X_ReadMulti>

08006106 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8006106:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610a:	b087      	sub	sp, #28
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800610c:	f10d 0918 	add.w	r9, sp, #24
{
 8006110:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8006112:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int32_t nextGoodSpad = offset;
 8006114:	f849 4d0c 	str.w	r4, [r9, #-12]!
{
 8006118:	4682      	mov	sl, r0
 800611a:	468b      	mov	fp, r1
 800611c:	9201      	str	r2, [sp, #4]
 800611e:	461d      	mov	r5, r3
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
 8006120:	f04f 0800 	mov.w	r8, #0
 8006124:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006126:	4598      	cmp	r8, r3
 8006128:	d114      	bne.n	8006154 <enable_ref_spads+0x4e>
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800612a:	2000      	movs	r0, #0
		}
		currentSpad = (uint32_t)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
 800612c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800612e:	601c      	str	r4, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006130:	b968      	cbnz	r0, 800614e <enable_ref_spads+0x48>
		status = set_ref_spad_map(Dev, spadArray);
 8006132:	4629      	mov	r1, r5
 8006134:	4650      	mov	r0, sl
 8006136:	f7ff ffdc 	bl	80060f2 <set_ref_spad_map>
 800613a:	4604      	mov	r4, r0


	if (status == VL53L0X_ERROR_NONE) {
 800613c:	b938      	cbnz	r0, 800614e <enable_ref_spads+0x48>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800613e:	ae04      	add	r6, sp, #16
 8006140:	4631      	mov	r1, r6
 8006142:	4650      	mov	r0, sl
 8006144:	f7ff ffda 	bl	80060fc <get_ref_spad_map>

		i = 0;
 8006148:	4623      	mov	r3, r4

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800614a:	429f      	cmp	r7, r3
 800614c:	d11d      	bne.n	800618a <enable_ref_spads+0x84>
			}
			i++;
		}
	}
	return status;
}
 800614e:	b007      	add	sp, #28
 8006150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8006154:	464b      	mov	r3, r9
 8006156:	4622      	mov	r2, r4
 8006158:	4639      	mov	r1, r7
 800615a:	9801      	ldr	r0, [sp, #4]
 800615c:	f7ff ff88 	bl	8006070 <get_next_good_spad>
		if (nextGoodSpad == -1) {
 8006160:	9e03      	ldr	r6, [sp, #12]
 8006162:	1c73      	adds	r3, r6, #1
 8006164:	d00e      	beq.n	8006184 <enable_ref_spads+0x7e>
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8006166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006168:	18f0      	adds	r0, r6, r3
 800616a:	f7ff ffa9 	bl	80060c0 <is_aperture>
 800616e:	4558      	cmp	r0, fp
 8006170:	d108      	bne.n	8006184 <enable_ref_spads+0x7e>
		enable_spad_bit(spadArray, size, currentSpad);
 8006172:	4632      	mov	r2, r6
 8006174:	4639      	mov	r1, r7
 8006176:	4628      	mov	r0, r5
 8006178:	f7ff ffac 	bl	80060d4 <enable_spad_bit>
		currentSpad++;
 800617c:	1c74      	adds	r4, r6, #1
	for (index = 0; index < spadCount; index++) {
 800617e:	f108 0801 	add.w	r8, r8, #1
 8006182:	e7cf      	b.n	8006124 <enable_ref_spads+0x1e>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006184:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8006188:	e7d0      	b.n	800612c <enable_ref_spads+0x26>
			if (spadArray[i] != checkSpadArray[i]) {
 800618a:	5ce9      	ldrb	r1, [r5, r3]
 800618c:	5cf2      	ldrb	r2, [r6, r3]
 800618e:	4291      	cmp	r1, r2
 8006190:	d101      	bne.n	8006196 <enable_ref_spads+0x90>
			i++;
 8006192:	3301      	adds	r3, #1
 8006194:	e7d9      	b.n	800614a <enable_ref_spads+0x44>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006196:	f06f 0031 	mvn.w	r0, #49	; 0x31
 800619a:	e7d8      	b.n	800614e <enable_ref_spads+0x48>

0800619c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800619c:	b570      	push	{r4, r5, r6, lr}

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
 800619e:	22c0      	movs	r2, #192	; 0xc0
{
 80061a0:	b088      	sub	sp, #32
 80061a2:	460e      	mov	r6, r1
		status = VL53L0X_WrByte(Dev,
 80061a4:	2101      	movs	r1, #1
{
 80061a6:	4604      	mov	r4, r0
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80061a8:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130
		status = VL53L0X_WrByte(Dev,
 80061ac:	f001 fcc2 	bl	8007b34 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80061b0:	b9f0      	cbnz	r0, 80061f0 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80061b2:	a901      	add	r1, sp, #4
 80061b4:	4620      	mov	r0, r4
 80061b6:	f7ff fd7a 	bl	8005cae <VL53L0X_PerformSingleRangingMeasurement>
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80061ba:	b9c8      	cbnz	r0, 80061f0 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80061bc:	2201      	movs	r2, #1
 80061be:	21ff      	movs	r1, #255	; 0xff
 80061c0:	4620      	mov	r0, r4
 80061c2:	f001 fcb7 	bl	8007b34 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE)
 80061c6:	b998      	cbnz	r0, 80061f0 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_RdWord(Dev,
 80061c8:	4632      	mov	r2, r6
 80061ca:	21b6      	movs	r1, #182	; 0xb6
 80061cc:	4620      	mov	r0, r4
 80061ce:	f001 fc6b 	bl	8007aa8 <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80061d2:	b968      	cbnz	r0, 80061f0 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80061d4:	4602      	mov	r2, r0
 80061d6:	21ff      	movs	r1, #255	; 0xff
 80061d8:	4620      	mov	r0, r4
 80061da:	f001 fcab 	bl	8007b34 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE) {
 80061de:	b938      	cbnz	r0, 80061f0 <perform_ref_signal_measurement+0x54>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80061e0:	462a      	mov	r2, r5
 80061e2:	2101      	movs	r1, #1
 80061e4:	4620      	mov	r0, r4
 80061e6:	f001 fca5 	bl	8007b34 <VL53L0X_WrByte>
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80061ea:	b908      	cbnz	r0, 80061f0 <perform_ref_signal_measurement+0x54>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80061ec:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
	}

	return status;
}
 80061f0:	b008      	add	sp, #32
 80061f2:	bd70      	pop	{r4, r5, r6, pc}

080061f4 <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	460e      	mov	r6, r1
 80061f8:	b088      	sub	sp, #32
 80061fa:	4615      	mov	r5, r2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80061fc:	21ff      	movs	r1, #255	; 0xff
 80061fe:	2201      	movs	r2, #1
{
 8006200:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006202:	f001 fc97 	bl	8007b34 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8006206:	4602      	mov	r2, r0
 8006208:	b9a8      	cbnz	r0, 8006236 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 800620a:	214f      	movs	r1, #79	; 0x4f
 800620c:	4620      	mov	r0, r4
 800620e:	f001 fc91 	bl	8007b34 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006212:	b980      	cbnz	r0, 8006236 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8006214:	222c      	movs	r2, #44	; 0x2c
 8006216:	214e      	movs	r1, #78	; 0x4e
 8006218:	4620      	mov	r0, r4
 800621a:	f001 fc8b 	bl	8007b34 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800621e:	4602      	mov	r2, r0
 8006220:	b948      	cbnz	r0, 8006236 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006222:	21ff      	movs	r1, #255	; 0xff
 8006224:	4620      	mov	r0, r4
 8006226:	f001 fc85 	bl	8007b34 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 800622a:	b920      	cbnz	r0, 8006236 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 800622c:	22b4      	movs	r2, #180	; 0xb4
 800622e:	21b6      	movs	r1, #182	; 0xb6
 8006230:	4620      	mov	r0, r4
 8006232:	f001 fc7f 	bl	8007b34 <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 800623c:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
 8006240:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
 8006244:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
 8006248:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
 800624c:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129

	if (isApertureSpads) {
 8006250:	b31d      	cbz	r5, 800629a <VL53L0X_set_reference_spads+0xa6>
 8006252:	461a      	mov	r2, r3
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006254:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
 8006258:	f7ff ff32 	bl	80060c0 <is_aperture>
 800625c:	b908      	cbnz	r0, 8006262 <VL53L0X_set_reference_spads+0x6e>
 800625e:	2a2c      	cmp	r2, #44	; 0x2c
 8006260:	d119      	bne.n	8006296 <VL53L0X_set_reference_spads+0xa2>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
 8006262:	ab07      	add	r3, sp, #28
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	9202      	str	r2, [sp, #8]
 8006268:	23b4      	movs	r3, #180	; 0xb4
 800626a:	2206      	movs	r2, #6
 800626c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006270:	9603      	str	r6, [sp, #12]
 8006272:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8006276:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 800627a:	4629      	mov	r1, r5
 800627c:	4620      	mov	r0, r4
 800627e:	f7ff ff42 	bl	8006106 <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006282:	b930      	cbnz	r0, 8006292 <VL53L0X_set_reference_spads+0x9e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006284:	2301      	movs	r3, #1
 8006286:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800628a:	f884 6113 	strb.w	r6, [r4, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800628e:	f884 5114 	strb.w	r5, [r4, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
 8006292:	b008      	add	sp, #32
 8006294:	bd70      	pop	{r4, r5, r6, pc}
			currentSpadIndex++;
 8006296:	3201      	adds	r2, #1
 8006298:	e7dc      	b.n	8006254 <VL53L0X_set_reference_spads+0x60>
	uint32_t currentSpadIndex = 0;
 800629a:	462a      	mov	r2, r5
 800629c:	e7e1      	b.n	8006262 <VL53L0X_set_reference_spads+0x6e>

0800629e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800629e:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80062a0:	f041 0201 	orr.w	r2, r1, #1
 80062a4:	2100      	movs	r1, #0
{
 80062a6:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80062a8:	f001 fc44 	bl	8007b34 <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80062ac:	b978      	cbnz	r0, 80062ce <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80062ae:	4620      	mov	r0, r4
 80062b0:	f000 fa3a 	bl	8006728 <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
 80062b4:	b958      	cbnz	r0, 80062ce <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80062b6:	4601      	mov	r1, r0
 80062b8:	4620      	mov	r0, r4
 80062ba:	f7ff fccc 	bl	8005c56 <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
 80062be:	b930      	cbnz	r0, 80062ce <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80062c0:	4602      	mov	r2, r0
 80062c2:	4601      	mov	r1, r0
 80062c4:	4620      	mov	r0, r4

	return Status;
}
 80062c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80062ca:	f001 bc33 	b.w	8007b34 <VL53L0X_WrByte>
}
 80062ce:	bd10      	pop	{r4, pc}

080062d0 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80062d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
 80062d4:	f04f 0b00 	mov.w	fp, #0
{
 80062d8:	4689      	mov	r9, r1
 80062da:	4690      	mov	r8, r2

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80062dc:	21ff      	movs	r1, #255	; 0xff
 80062de:	2201      	movs	r2, #1
{
 80062e0:	4605      	mov	r5, r0
 80062e2:	461f      	mov	r7, r3
 80062e4:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 80062e8:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
	uint8_t PhaseCalint = 0;
 80062ec:	f88d b007 	strb.w	fp, [sp, #7]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80062f0:	f001 fc20 	bl	8007b34 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80062f4:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80062f6:	4604      	mov	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80062f8:	4659      	mov	r1, fp
 80062fa:	4628      	mov	r0, r5
 80062fc:	f001 fc1a 	bl	8007b34 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006300:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006302:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006304:	21ff      	movs	r1, #255	; 0xff
 8006306:	4628      	mov	r0, r5
 8006308:	f001 fc14 	bl	8007b34 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800630c:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800630e:	4304      	orrs	r4, r0
 8006310:	b264      	sxtb	r4, r4

	if (read_not_write) {
 8006312:	f1b9 0f00 	cmp.w	r9, #0
 8006316:	d030      	beq.n	800637a <VL53L0X_ref_calibration_io+0xaa>
		if (vhv_enable)
 8006318:	f1ba 0f00 	cmp.w	sl, #0
 800631c:	d006      	beq.n	800632c <VL53L0X_ref_calibration_io+0x5c>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800631e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006320:	21cb      	movs	r1, #203	; 0xcb
 8006322:	4628      	mov	r0, r5
 8006324:	f001 fb77 	bl	8007a16 <VL53L0X_RdByte>
 8006328:	4304      	orrs	r4, r0
 800632a:	b264      	sxtb	r4, r4
		if (phase_enable)
 800632c:	b13e      	cbz	r6, 800633e <VL53L0X_ref_calibration_io+0x6e>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800632e:	f10d 0207 	add.w	r2, sp, #7
 8006332:	21ee      	movs	r1, #238	; 0xee
 8006334:	4628      	mov	r0, r5
 8006336:	f001 fb6e 	bl	8007a16 <VL53L0X_RdByte>
	} else {
		if (vhv_enable)
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
		if (phase_enable)
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800633a:	4304      	orrs	r4, r0
 800633c:	b264      	sxtb	r4, r4
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800633e:	2201      	movs	r2, #1
 8006340:	21ff      	movs	r1, #255	; 0xff
 8006342:	4628      	mov	r0, r5
 8006344:	f001 fbf6 	bl	8007b34 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006348:	2201      	movs	r2, #1
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800634a:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800634c:	2100      	movs	r1, #0
 800634e:	4628      	mov	r0, r5
 8006350:	f001 fbf0 	bl	8007b34 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006354:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006356:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006358:	2200      	movs	r2, #0
 800635a:	21ff      	movs	r1, #255	; 0xff
 800635c:	4628      	mov	r0, r5
 800635e:	f001 fbe9 	bl	8007b34 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006362:	b264      	sxtb	r4, r4

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006364:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006368:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800636a:	4320      	orrs	r0, r4
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800636c:	f023 0310 	bic.w	r3, r3, #16

	return Status;
}
 8006370:	b240      	sxtb	r0, r0
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006372:	7013      	strb	r3, [r2, #0]
}
 8006374:	b003      	add	sp, #12
 8006376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (vhv_enable)
 800637a:	f1ba 0f00 	cmp.w	sl, #0
 800637e:	d006      	beq.n	800638e <VL53L0X_ref_calibration_io+0xbe>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006380:	4642      	mov	r2, r8
 8006382:	21cb      	movs	r1, #203	; 0xcb
 8006384:	4628      	mov	r0, r5
 8006386:	f001 fbd5 	bl	8007b34 <VL53L0X_WrByte>
 800638a:	4304      	orrs	r4, r0
 800638c:	b264      	sxtb	r4, r4
		if (phase_enable)
 800638e:	2e00      	cmp	r6, #0
 8006390:	d0d5      	beq.n	800633e <VL53L0X_ref_calibration_io+0x6e>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006392:	463b      	mov	r3, r7
 8006394:	2280      	movs	r2, #128	; 0x80
 8006396:	21ee      	movs	r1, #238	; 0xee
 8006398:	4628      	mov	r0, r5
 800639a:	f001 fbed 	bl	8007b78 <VL53L0X_UpdateByte>
 800639e:	e7cc      	b.n	800633a <VL53L0X_ref_calibration_io+0x6a>

080063a0 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80063a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a4:	b086      	sub	sp, #24
 80063a6:	4617      	mov	r7, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
 80063a8:	2200      	movs	r2, #0
{
 80063aa:	4604      	mov	r4, r0
 80063ac:	4688      	mov	r8, r1
	uint8_t PhaseCalInt = 0;
 80063ae:	f88d 2017 	strb.w	r2, [sp, #23]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80063b2:	461e      	mov	r6, r3
 80063b4:	b343      	cbz	r3, 8006408 <VL53L0X_perform_vhv_calibration+0x68>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80063b6:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80063ba:	2201      	movs	r2, #1
 80063bc:	4611      	mov	r1, r2
 80063be:	4620      	mov	r0, r4
 80063c0:	f001 fbb8 	bl	8007b34 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 80063c4:	bb10      	cbnz	r0, 800640c <VL53L0X_perform_vhv_calibration+0x6c>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80063c6:	2140      	movs	r1, #64	; 0x40
 80063c8:	4620      	mov	r0, r4
 80063ca:	f7ff ff68 	bl	800629e <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80063ce:	b9e8      	cbnz	r0, 800640c <VL53L0X_perform_vhv_calibration+0x6c>
 80063d0:	2f01      	cmp	r7, #1
 80063d2:	d11b      	bne.n	800640c <VL53L0X_perform_vhv_calibration+0x6c>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80063d4:	f10d 0317 	add.w	r3, sp, #23
 80063d8:	9003      	str	r0, [sp, #12]
 80063da:	9301      	str	r3, [sp, #4]
 80063dc:	4602      	mov	r2, r0
 80063de:	4603      	mov	r3, r0
 80063e0:	9702      	str	r7, [sp, #8]
 80063e2:	f8cd 8000 	str.w	r8, [sp]
 80063e6:	4639      	mov	r1, r7
 80063e8:	4620      	mov	r0, r4
 80063ea:	f7ff ff71 	bl	80062d0 <VL53L0X_ref_calibration_io>
			1, 0);
	} else
		*pVhvSettings = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80063ee:	b940      	cbnz	r0, 8006402 <VL53L0X_perform_vhv_calibration+0x62>
 80063f0:	b13e      	cbz	r6, 8006402 <VL53L0X_perform_vhv_calibration+0x62>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80063f2:	462a      	mov	r2, r5
 80063f4:	2101      	movs	r1, #1
 80063f6:	4620      	mov	r0, r4
 80063f8:	f001 fb9c 	bl	8007b34 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80063fc:	b908      	cbnz	r0, 8006402 <VL53L0X_perform_vhv_calibration+0x62>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80063fe:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 8006402:	b006      	add	sp, #24
 8006404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t SequenceConfig = 0;
 8006408:	461d      	mov	r5, r3
 800640a:	e7d6      	b.n	80063ba <VL53L0X_perform_vhv_calibration+0x1a>
		*pVhvSettings = 0;
 800640c:	2300      	movs	r3, #0
 800640e:	f888 3000 	strb.w	r3, [r8]
 8006412:	e7ec      	b.n	80063ee <VL53L0X_perform_vhv_calibration+0x4e>

08006414 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006418:	4604      	mov	r4, r0
 800641a:	b086      	sub	sp, #24
 800641c:	4688      	mov	r8, r1
 800641e:	4617      	mov	r7, r2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006420:	461e      	mov	r6, r3
 8006422:	b343      	cbz	r3, 8006476 <VL53L0X_perform_phase_calibration+0x62>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006424:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006428:	2202      	movs	r2, #2
 800642a:	2101      	movs	r1, #1
 800642c:	4620      	mov	r0, r4
 800642e:	f001 fb81 	bl	8007b34 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8006432:	bb10      	cbnz	r0, 800647a <VL53L0X_perform_phase_calibration+0x66>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006434:	4601      	mov	r1, r0
 8006436:	4620      	mov	r0, r4
 8006438:	f7ff ff31 	bl	800629e <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800643c:	b9e8      	cbnz	r0, 800647a <VL53L0X_perform_phase_calibration+0x66>
 800643e:	2f01      	cmp	r7, #1
 8006440:	d11b      	bne.n	800647a <VL53L0X_perform_phase_calibration+0x66>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006442:	f10d 0317 	add.w	r3, sp, #23
 8006446:	9002      	str	r0, [sp, #8]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	4602      	mov	r2, r0
 800644c:	4603      	mov	r3, r0
 800644e:	9703      	str	r7, [sp, #12]
 8006450:	f8cd 8004 	str.w	r8, [sp, #4]
 8006454:	4639      	mov	r1, r7
 8006456:	4620      	mov	r0, r4
 8006458:	f7ff ff3a 	bl	80062d0 <VL53L0X_ref_calibration_io>
			0, 1);
	} else
		*pPhaseCal = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800645c:	b940      	cbnz	r0, 8006470 <VL53L0X_perform_phase_calibration+0x5c>
 800645e:	b13e      	cbz	r6, 8006470 <VL53L0X_perform_phase_calibration+0x5c>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006460:	462a      	mov	r2, r5
 8006462:	2101      	movs	r1, #1
 8006464:	4620      	mov	r0, r4
 8006466:	f001 fb65 	bl	8007b34 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800646a:	b908      	cbnz	r0, 8006470 <VL53L0X_perform_phase_calibration+0x5c>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800646c:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 8006470:	b006      	add	sp, #24
 8006472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t SequenceConfig = 0;
 8006476:	461d      	mov	r5, r3
 8006478:	e7d6      	b.n	8006428 <VL53L0X_perform_phase_calibration+0x14>
		*pPhaseCal = 0;
 800647a:	2300      	movs	r3, #0
 800647c:	f888 3000 	strb.w	r3, [r8]
 8006480:	e7ec      	b.n	800645c <VL53L0X_perform_phase_calibration+0x48>

08006482 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8006482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006484:	461e      	mov	r6, r3
 8006486:	4617      	mov	r7, r2

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8006488:	2300      	movs	r3, #0
 800648a:	4632      	mov	r2, r6
{
 800648c:	4604      	mov	r4, r0
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800648e:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130
	Status = VL53L0X_perform_vhv_calibration(
 8006492:	f7ff ff85 	bl	80063a0 <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006496:	b970      	cbnz	r0, 80064b6 <VL53L0X_perform_ref_calibration+0x34>
		Status = VL53L0X_perform_phase_calibration(
 8006498:	4603      	mov	r3, r0
 800649a:	4632      	mov	r2, r6
 800649c:	4639      	mov	r1, r7
 800649e:	4620      	mov	r0, r4
 80064a0:	f7ff ffb8 	bl	8006414 <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80064a4:	b938      	cbnz	r0, 80064b6 <VL53L0X_perform_ref_calibration+0x34>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80064a6:	462a      	mov	r2, r5
 80064a8:	2101      	movs	r1, #1
 80064aa:	4620      	mov	r0, r4
 80064ac:	f001 fb42 	bl	8007b34 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80064b0:	b908      	cbnz	r0, 80064b6 <VL53L0X_perform_ref_calibration+0x34>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80064b2:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 80064b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080064b8 <VL53L0X_perform_ref_spad_management>:
{
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	b093      	sub	sp, #76	; 0x4c
	uint32_t lastSpadIndex = 0;
 80064be:	2300      	movs	r3, #0
{
 80064c0:	910a      	str	r1, [sp, #40]	; 0x28
 80064c2:	920b      	str	r2, [sp, #44]	; 0x2c
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80064c4:	f880 3124 	strb.w	r3, [r0, #292]	; 0x124
 80064c8:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
 80064cc:	f880 3126 	strb.w	r3, [r0, #294]	; 0x126
 80064d0:	f880 3127 	strb.w	r3, [r0, #295]	; 0x127
 80064d4:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
 80064d8:	f880 3129 	strb.w	r3, [r0, #297]	; 0x129
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80064dc:	2201      	movs	r2, #1
 80064de:	21ff      	movs	r1, #255	; 0xff
{
 80064e0:	4605      	mov	r5, r0
	uint32_t lastSpadIndex = 0;
 80064e2:	930e      	str	r3, [sp, #56]	; 0x38
	int32_t nextGoodSpad = 0;
 80064e4:	930f      	str	r3, [sp, #60]	; 0x3c
	uint8_t VhvSettings = 0;
 80064e6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	uint8_t PhaseCal = 0;
 80064ea:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80064ee:	f8b0 813a 	ldrh.w	r8, [r0, #314]	; 0x13a
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80064f2:	f001 fb1f 	bl	8007b34 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80064f6:	4604      	mov	r4, r0
 80064f8:	2800      	cmp	r0, #0
 80064fa:	f040 810e 	bne.w	800671a <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 80064fe:	4602      	mov	r2, r0
 8006500:	214f      	movs	r1, #79	; 0x4f
 8006502:	4628      	mov	r0, r5
 8006504:	f001 fb16 	bl	8007b34 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006508:	4604      	mov	r4, r0
 800650a:	2800      	cmp	r0, #0
 800650c:	f040 8105 	bne.w	800671a <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 8006510:	222c      	movs	r2, #44	; 0x2c
 8006512:	214e      	movs	r1, #78	; 0x4e
 8006514:	4628      	mov	r0, r5
 8006516:	f001 fb0d 	bl	8007b34 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 800651a:	4604      	mov	r4, r0
 800651c:	2800      	cmp	r0, #0
 800651e:	f040 80fc 	bne.w	800671a <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006522:	4602      	mov	r2, r0
 8006524:	21ff      	movs	r1, #255	; 0xff
 8006526:	4628      	mov	r0, r5
 8006528:	f001 fb04 	bl	8007b34 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 800652c:	4604      	mov	r4, r0
 800652e:	2800      	cmp	r0, #0
 8006530:	f040 80f3 	bne.w	800671a <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 8006534:	22b4      	movs	r2, #180	; 0xb4
 8006536:	21b6      	movs	r1, #182	; 0xb6
 8006538:	4628      	mov	r0, r5
 800653a:	f001 fafb 	bl	8007b34 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 800653e:	4604      	mov	r4, r0
 8006540:	2800      	cmp	r0, #0
 8006542:	f040 80ea 	bne.w	800671a <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 8006546:	4602      	mov	r2, r0
 8006548:	2180      	movs	r1, #128	; 0x80
 800654a:	4628      	mov	r0, r5
 800654c:	f001 faf2 	bl	8007b34 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006550:	4604      	mov	r4, r0
 8006552:	2800      	cmp	r0, #0
 8006554:	f040 80e1 	bne.w	800671a <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006558:	4603      	mov	r3, r0
 800655a:	f10d 0235 	add.w	r2, sp, #53	; 0x35
 800655e:	a90d      	add	r1, sp, #52	; 0x34
 8006560:	4628      	mov	r0, r5
 8006562:	f7ff ff8e 	bl	8006482 <VL53L0X_perform_ref_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
 8006566:	4604      	mov	r4, r0
 8006568:	2800      	cmp	r0, #0
 800656a:	f040 80d6 	bne.w	800671a <VL53L0X_perform_ref_spad_management+0x262>
		lastSpadIndex = currentSpadIndex;
 800656e:	af12      	add	r7, sp, #72	; 0x48
					Dev->Data.SpadData.RefGoodSpadMap,
 8006570:	f505 7395 	add.w	r3, r5, #298	; 0x12a
		lastSpadIndex = currentSpadIndex;
 8006574:	f847 0d10 	str.w	r0, [r7, #-16]!
					Dev->Data.SpadData.RefGoodSpadMap,
 8006578:	9307      	str	r3, [sp, #28]
		Status = enable_ref_spads(Dev,
 800657a:	2303      	movs	r3, #3
 800657c:	9303      	str	r3, [sp, #12]
 800657e:	2106      	movs	r1, #6
 8006580:	23b4      	movs	r3, #180	; 0xb4
					Dev->Data.SpadData.RefSpadEnables,
 8006582:	f505 7992 	add.w	r9, r5, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8006586:	e88d 000a 	stmia.w	sp, {r1, r3}
 800658a:	9002      	str	r0, [sp, #8]
 800658c:	4601      	mov	r1, r0
 800658e:	9704      	str	r7, [sp, #16]
 8006590:	464b      	mov	r3, r9
 8006592:	9a07      	ldr	r2, [sp, #28]
 8006594:	4628      	mov	r0, r5
 8006596:	f7ff fdb6 	bl	8006106 <enable_ref_spads>
	if (Status == VL53L0X_ERROR_NONE) {
 800659a:	4604      	mov	r4, r0
 800659c:	2800      	cmp	r0, #0
 800659e:	f040 80bc 	bne.w	800671a <VL53L0X_perform_ref_spad_management+0x262>
		Status = perform_ref_signal_measurement(Dev,
 80065a2:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80065a6:	4628      	mov	r0, r5
		currentSpadIndex = lastSpadIndex;
 80065a8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
		Status = perform_ref_signal_measurement(Dev,
 80065aa:	f7ff fdf7 	bl	800619c <perform_ref_signal_measurement>
		if ((Status == VL53L0X_ERROR_NONE) &&
 80065ae:	4604      	mov	r4, r0
 80065b0:	2800      	cmp	r0, #0
 80065b2:	f040 80b2 	bne.w	800671a <VL53L0X_perform_ref_spad_management+0x262>
 80065b6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80065ba:	4543      	cmp	r3, r8
 80065bc:	d955      	bls.n	800666a <VL53L0X_perform_ref_spad_management+0x1b2>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80065be:	f885 0124 	strb.w	r0, [r5, #292]	; 0x124
 80065c2:	f885 0125 	strb.w	r0, [r5, #293]	; 0x125
 80065c6:	f885 0126 	strb.w	r0, [r5, #294]	; 0x126
 80065ca:	f885 0127 	strb.w	r0, [r5, #295]	; 0x127
 80065ce:	f885 0128 	strb.w	r0, [r5, #296]	; 0x128
 80065d2:	f885 0129 	strb.w	r0, [r5, #297]	; 0x129
			while ((is_aperture(startSelect + currentSpadIndex)
 80065d6:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
 80065da:	f7ff fd71 	bl	80060c0 <is_aperture>
 80065de:	b180      	cbz	r0, 8006602 <VL53L0X_perform_ref_spad_management+0x14a>
			Status = enable_ref_spads(Dev,
 80065e0:	2206      	movs	r2, #6
 80065e2:	23b4      	movs	r3, #180	; 0xb4
 80065e4:	9704      	str	r7, [sp, #16]
 80065e6:	2703      	movs	r7, #3
 80065e8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80065ec:	9703      	str	r7, [sp, #12]
 80065ee:	9602      	str	r6, [sp, #8]
 80065f0:	464b      	mov	r3, r9
 80065f2:	9a07      	ldr	r2, [sp, #28]
 80065f4:	2101      	movs	r1, #1
 80065f6:	4628      	mov	r0, r5
 80065f8:	f7ff fd85 	bl	8006106 <enable_ref_spads>
			if (Status == VL53L0X_ERROR_NONE) {
 80065fc:	b128      	cbz	r0, 800660a <VL53L0X_perform_ref_spad_management+0x152>
			Status = perform_ref_signal_measurement(Dev,
 80065fe:	4604      	mov	r4, r0
	return Status;
 8006600:	e08b      	b.n	800671a <VL53L0X_perform_ref_spad_management+0x262>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8006602:	2e2b      	cmp	r6, #43	; 0x2b
 8006604:	d8ec      	bhi.n	80065e0 <VL53L0X_perform_ref_spad_management+0x128>
				currentSpadIndex++;
 8006606:	3601      	adds	r6, #1
 8006608:	e7e5      	b.n	80065d6 <VL53L0X_perform_ref_spad_management+0x11e>
				Status = perform_ref_signal_measurement(Dev,
 800660a:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800660e:	4628      	mov	r0, r5
				currentSpadIndex = lastSpadIndex;
 8006610:	9e0e      	ldr	r6, [sp, #56]	; 0x38
				Status = perform_ref_signal_measurement(Dev,
 8006612:	f7ff fdc3 	bl	800619c <perform_ref_signal_measurement>
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006616:	2800      	cmp	r0, #0
 8006618:	d1f1      	bne.n	80065fe <VL53L0X_perform_ref_spad_management+0x146>
 800661a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800661e:	4543      	cmp	r3, r8
 8006620:	d97f      	bls.n	8006722 <VL53L0X_perform_ref_spad_management+0x26a>
					isApertureSpads_int = 1;
 8006622:	f04f 0a01 	mov.w	sl, #1
			needAptSpads = 1;
 8006626:	f04f 0b01 	mov.w	fp, #1
 800662a:	e022      	b.n	8006672 <VL53L0X_perform_ref_spad_management+0x1ba>
				memcpy(lastSpadArray,
 800662c:	f8d5 0124 	ldr.w	r0, [r5, #292]	; 0x124
 8006630:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
 8006634:	9010      	str	r0, [sp, #64]	; 0x40
 8006636:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
			(refSpadCount_int)++;
 800663a:	9f08      	ldr	r7, [sp, #32]
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800663c:	9209      	str	r2, [sp, #36]	; 0x24
 800663e:	e02a      	b.n	8006696 <VL53L0X_perform_ref_spad_management+0x1de>
			(refSpadCount_int)++;
 8006640:	9f08      	ldr	r7, [sp, #32]
		*refSpadCount = refSpadCount_int;
 8006642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006644:	601f      	str	r7, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006648:	f883 a000 	strb.w	sl, [r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800664c:	2301      	movs	r3, #1
 800664e:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800665a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
 8006662:	e05a      	b.n	800671a <VL53L0X_perform_ref_spad_management+0x262>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006664:	f06f 0431 	mvn.w	r4, #49	; 0x31
 8006668:	e057      	b.n	800671a <VL53L0X_perform_ref_spad_management+0x262>
	uint8_t	 isApertureSpads_int = 0;
 800666a:	f04f 0a00 	mov.w	sl, #0
	uint32_t refSpadCount_int = 0;
 800666e:	4657      	mov	r7, sl
			needAptSpads = 0;
 8006670:	46d3      	mov	fp, sl
		(peakSignalRateRef < targetRefRate)) {
 8006672:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006676:	4590      	cmp	r8, r2
 8006678:	d9e3      	bls.n	8006642 <VL53L0X_perform_ref_spad_management+0x18a>
		lastSignalRateDiff = abs(peakSignalRateRef -
 800667a:	eba2 0208 	sub.w	r2, r2, r8
 800667e:	2a00      	cmp	r2, #0
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006680:	f8d9 0000 	ldr.w	r0, [r9]
 8006684:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8006688:	9010      	str	r0, [sp, #64]	; 0x40
		lastSignalRateDiff = abs(peakSignalRateRef -
 800668a:	bfb8      	it	lt
 800668c:	4252      	neglt	r2, r2
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800668e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006692:	9209      	str	r2, [sp, #36]	; 0x24
		refSpadCount_int	= minimumSpadCount;
 8006694:	2703      	movs	r7, #3
			get_next_good_spad(
 8006696:	ab0f      	add	r3, sp, #60	; 0x3c
 8006698:	4632      	mov	r2, r6
 800669a:	2106      	movs	r1, #6
 800669c:	9807      	ldr	r0, [sp, #28]
 800669e:	f7ff fce7 	bl	8006070 <get_next_good_spad>
			if (nextGoodSpad == -1) {
 80066a2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80066a4:	1c73      	adds	r3, r6, #1
 80066a6:	d0dd      	beq.n	8006664 <VL53L0X_perform_ref_spad_management+0x1ac>
			(refSpadCount_int)++;
 80066a8:	1c7b      	adds	r3, r7, #1
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80066aa:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
			(refSpadCount_int)++;
 80066ae:	9308      	str	r3, [sp, #32]
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80066b0:	f7ff fd06 	bl	80060c0 <is_aperture>
 80066b4:	4558      	cmp	r0, fp
 80066b6:	4682      	mov	sl, r0
 80066b8:	d1d4      	bne.n	8006664 <VL53L0X_perform_ref_spad_management+0x1ac>
			Status = enable_spad_bit(
 80066ba:	4632      	mov	r2, r6
 80066bc:	2106      	movs	r1, #6
 80066be:	4648      	mov	r0, r9
 80066c0:	f7ff fd08 	bl	80060d4 <enable_spad_bit>
			if (Status == VL53L0X_ERROR_NONE) {
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d19a      	bne.n	80065fe <VL53L0X_perform_ref_spad_management+0x146>
				Status = set_ref_spad_map(Dev,
 80066c8:	4649      	mov	r1, r9
 80066ca:	4628      	mov	r0, r5
				currentSpadIndex++;
 80066cc:	3601      	adds	r6, #1
				Status = set_ref_spad_map(Dev,
 80066ce:	f7ff fd10 	bl	80060f2 <set_ref_spad_map>
			if (Status != VL53L0X_ERROR_NONE)
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d193      	bne.n	80065fe <VL53L0X_perform_ref_spad_management+0x146>
			Status = perform_ref_signal_measurement(Dev,
 80066d6:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80066da:	4628      	mov	r0, r5
 80066dc:	f7ff fd5e 	bl	800619c <perform_ref_signal_measurement>
			if (Status != VL53L0X_ERROR_NONE)
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d18c      	bne.n	80065fe <VL53L0X_perform_ref_spad_management+0x146>
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80066e4:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80066e8:	eba1 0208 	sub.w	r2, r1, r8
 80066ec:	2a00      	cmp	r2, #0
 80066ee:	bfb8      	it	lt
 80066f0:	4252      	neglt	r2, r2
			if (peakSignalRateRef > targetRefRate) {
 80066f2:	4588      	cmp	r8, r1
 80066f4:	d29a      	bcs.n	800662c <VL53L0X_perform_ref_spad_management+0x174>
				if (signalRateDiff > lastSignalRateDiff) {
 80066f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d9a1      	bls.n	8006640 <VL53L0X_perform_ref_spad_management+0x188>
					Status = set_ref_spad_map(Dev,
 80066fc:	a910      	add	r1, sp, #64	; 0x40
 80066fe:	4628      	mov	r0, r5
 8006700:	f7ff fcf7 	bl	80060f2 <set_ref_spad_map>
					memcpy(
 8006704:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8006708:	f8a5 1128 	strh.w	r1, [r5, #296]	; 0x128
					Status = set_ref_spad_map(Dev,
 800670c:	4602      	mov	r2, r0
					memcpy(
 800670e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006710:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
	if (Status == VL53L0X_ERROR_NONE) {
 8006714:	2a00      	cmp	r2, #0
 8006716:	d094      	beq.n	8006642 <VL53L0X_perform_ref_spad_management+0x18a>
 8006718:	4614      	mov	r4, r2
}
 800671a:	4620      	mov	r0, r4
 800671c:	b013      	add	sp, #76	; 0x4c
 800671e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t	 isApertureSpads_int = 0;
 8006722:	4682      	mov	sl, r0
	uint32_t refSpadCount_int = 0;
 8006724:	4607      	mov	r7, r0
 8006726:	e77e      	b.n	8006626 <VL53L0X_perform_ref_spad_management+0x16e>

08006728 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8006728:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NewDataReady = 0;
 800672a:	ad02      	add	r5, sp, #8
 800672c:	2300      	movs	r3, #0
 800672e:	f805 3d01 	strb.w	r3, [r5, #-1]!
{
 8006732:	4606      	mov	r6, r0
	uint8_t NewDataReady = 0;
 8006734:	24c8      	movs	r4, #200	; 0xc8
	LOG_FUNCTION_START("");

	LoopNb = 0;

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006736:	4629      	mov	r1, r5
 8006738:	4630      	mov	r0, r6
 800673a:	f7ff fc60 	bl	8005ffe <VL53L0X_GetMeasurementDataReady>
		if (Status != 0)
 800673e:	b958      	cbnz	r0, 8006758 <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* the error is set */

		if (NewDataReady == 1)
 8006740:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d007      	beq.n	8006758 <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* done note that status == 0 */

		LoopNb++;
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006748:	3c01      	subs	r4, #1
 800674a:	d003      	beq.n	8006754 <VL53L0X_measurement_poll_for_completion+0x2c>
			Status = VL53L0X_ERROR_TIME_OUT;
			break;
		}

		VL53L0X_PollingDelay(Dev);
 800674c:	4630      	mov	r0, r6
 800674e:	f001 fa29 	bl	8007ba4 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006752:	e7f0      	b.n	8006736 <VL53L0X_measurement_poll_for_completion+0xe>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006754:	f06f 0006 	mvn.w	r0, #6
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
}
 8006758:	b002      	add	sp, #8
 800675a:	bd70      	pop	{r4, r5, r6, pc}

0800675c <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800675c:	b510      	push	{r4, lr}
 800675e:	4601      	mov	r1, r0
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
	uint32_t  bit = 1 << 30;
 8006760:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8006764:	428a      	cmp	r2, r1
 8006766:	d802      	bhi.n	800676e <VL53L0X_isqrt+0x12>
 8006768:	2000      	movs	r0, #0
		bit >>= 2;


	while (bit != 0) {
 800676a:	b912      	cbnz	r2, 8006772 <VL53L0X_isqrt+0x16>

		bit >>= 2;
	}

	return res;
}
 800676c:	bd10      	pop	{r4, pc}
		bit >>= 2;
 800676e:	0892      	lsrs	r2, r2, #2
 8006770:	e7f8      	b.n	8006764 <VL53L0X_isqrt+0x8>
		if (num >= res + bit) {
 8006772:	1884      	adds	r4, r0, r2
 8006774:	42a1      	cmp	r1, r4
 8006776:	ea4f 0350 	mov.w	r3, r0, lsr #1
			res = (res >> 1) + bit;
 800677a:	bf26      	itte	cs
 800677c:	18d0      	addcs	r0, r2, r3
			num -= res + bit;
 800677e:	1b09      	subcs	r1, r1, r4
			res >>= 1;
 8006780:	4618      	movcc	r0, r3
		bit >>= 2;
 8006782:	0892      	lsrs	r2, r2, #2
 8006784:	e7f1      	b.n	800676a <VL53L0X_isqrt+0xe>

08006786 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8006786:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006788:	2200      	movs	r2, #0
 800678a:	2183      	movs	r1, #131	; 0x83
{
 800678c:	4606      	mov	r6, r0
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800678e:	f001 f9d1 	bl	8007b34 <VL53L0X_WrByte>
 8006792:	4604      	mov	r4, r0

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8006794:	b978      	cbnz	r0, 80067b6 <VL53L0X_device_read_strobe+0x30>
 8006796:	25c8      	movs	r5, #200	; 0xc8
		LoopNb = 0;
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006798:	f10d 0207 	add.w	r2, sp, #7
 800679c:	2183      	movs	r1, #131	; 0x83
 800679e:	4630      	mov	r0, r6
 80067a0:	f001 f939 	bl	8007a16 <VL53L0X_RdByte>
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80067a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80067a8:	4604      	mov	r4, r0
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80067aa:	b923      	cbnz	r3, 80067b6 <VL53L0X_device_read_strobe+0x30>
 80067ac:	b918      	cbnz	r0, 80067b6 <VL53L0X_device_read_strobe+0x30>
					break;

			LoopNb = LoopNb + 1;
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80067ae:	3d01      	subs	r5, #1
 80067b0:	d1f2      	bne.n	8006798 <VL53L0X_device_read_strobe+0x12>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
			Status = VL53L0X_ERROR_TIME_OUT;
 80067b2:	f06f 0406 	mvn.w	r4, #6

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80067b6:	2201      	movs	r2, #1
 80067b8:	2183      	movs	r1, #131	; 0x83
 80067ba:	4630      	mov	r0, r6
 80067bc:	f001 f9ba 	bl	8007b34 <VL53L0X_WrByte>
 80067c0:	4320      	orrs	r0, r4

	LOG_FUNCTION_END(Status);
	return Status;

}
 80067c2:	b240      	sxtb	r0, r0
 80067c4:	b002      	add	sp, #8
 80067c6:	bd70      	pop	{r4, r5, r6, pc}

080067c8 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80067c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80067cc:	f890 60f0 	ldrb.w	r6, [r0, #240]	; 0xf0
{
 80067d0:	b091      	sub	sp, #68	; 0x44
	uint32_t PartUIDUpper = 0;
 80067d2:	f04f 0900 	mov.w	r9, #0
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80067d6:	2e07      	cmp	r6, #7
{
 80067d8:	4604      	mov	r4, r0
 80067da:	4688      	mov	r8, r1
	uint32_t PartUIDUpper = 0;
 80067dc:	f8cd 901c 	str.w	r9, [sp, #28]
	uint32_t PartUIDLower = 0;
 80067e0:	f8cd 9020 	str.w	r9, [sp, #32]
	if (ReadDataFromDeviceDone != 7) {
 80067e4:	f000 8298 	beq.w	8006d18 <VL53L0X_get_info_from_device+0x550>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80067e8:	2201      	movs	r2, #1
 80067ea:	2180      	movs	r1, #128	; 0x80
 80067ec:	f001 f9a2 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80067f0:	2201      	movs	r2, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80067f2:	4607      	mov	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80067f4:	21ff      	movs	r1, #255	; 0xff
 80067f6:	4620      	mov	r0, r4
 80067f8:	f001 f99c 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80067fc:	464a      	mov	r2, r9
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80067fe:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006800:	4649      	mov	r1, r9
 8006802:	4620      	mov	r0, r4
 8006804:	f001 f996 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006808:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800680a:	4307      	orrs	r7, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800680c:	2206      	movs	r2, #6
 800680e:	21ff      	movs	r1, #255	; 0xff
 8006810:	4620      	mov	r0, r4
 8006812:	f001 f98f 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006816:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006818:	4307      	orrs	r7, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800681a:	f10d 0215 	add.w	r2, sp, #21
 800681e:	2183      	movs	r1, #131	; 0x83
 8006820:	4620      	mov	r0, r4
 8006822:	f001 f8f8 	bl	8007a16 <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006826:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800682a:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800682c:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800682e:	f042 0204 	orr.w	r2, r2, #4
 8006832:	2183      	movs	r1, #131	; 0x83
 8006834:	4620      	mov	r0, r4
 8006836:	f001 f97d 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800683a:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800683c:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800683e:	2207      	movs	r2, #7
 8006840:	21ff      	movs	r1, #255	; 0xff
 8006842:	4620      	mov	r0, r4
 8006844:	f001 f976 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006848:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800684a:	2201      	movs	r2, #1
 800684c:	2181      	movs	r1, #129	; 0x81
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800684e:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006850:	4620      	mov	r0, r4
 8006852:	f001 f96f 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006856:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006858:	4307      	orrs	r7, r0

		Status |= VL53L0X_PollingDelay(Dev);
 800685a:	4620      	mov	r0, r4
 800685c:	f001 f9a2 	bl	8007ba4 <VL53L0X_PollingDelay>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006860:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_PollingDelay(Dev);
 8006862:	4307      	orrs	r7, r0

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006864:	2201      	movs	r2, #1
 8006866:	2180      	movs	r1, #128	; 0x80
 8006868:	4620      	mov	r0, r4
 800686a:	f001 f963 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_PollingDelay(Dev);
 800686e:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006870:	4338      	orrs	r0, r7

		if (((option & 1) == 1) &&
 8006872:	f018 0a01 	ands.w	sl, r8, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006876:	b245      	sxtb	r5, r0
		if (((option & 1) == 1) &&
 8006878:	f000 8223 	beq.w	8006cc2 <VL53L0X_get_info_from_device+0x4fa>
 800687c:	07f3      	lsls	r3, r6, #31
 800687e:	f100 8223 	bmi.w	8006cc8 <VL53L0X_get_info_from_device+0x500>
			((ReadDataFromDeviceDone & 1) == 0)) {
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8006882:	226b      	movs	r2, #107	; 0x6b
 8006884:	2194      	movs	r1, #148	; 0x94
 8006886:	4620      	mov	r0, r4
 8006888:	f001 f954 	bl	8007b34 <VL53L0X_WrByte>
 800688c:	4607      	mov	r7, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 800688e:	4620      	mov	r0, r4
 8006890:	f7ff ff79 	bl	8006786 <VL53L0X_device_read_strobe>
 8006894:	4338      	orrs	r0, r7
 8006896:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006898:	aa06      	add	r2, sp, #24
 800689a:	2190      	movs	r1, #144	; 0x90
 800689c:	4620      	mov	r0, r4
 800689e:	f001 f923 	bl	8007ae8 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 80068a2:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80068a4:	4305      	orrs	r5, r0

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80068a6:	9806      	ldr	r0, [sp, #24]
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80068a8:	2224      	movs	r2, #36	; 0x24
 80068aa:	2194      	movs	r1, #148	; 0x94
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80068ac:	f3c0 2b06 	ubfx	fp, r0, #8, #7
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80068b0:	f3c0 39c0 	ubfx	r9, r0, #15, #1
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80068b4:	4620      	mov	r0, r4
 80068b6:	f001 f93d 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80068ba:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80068bc:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80068be:	4620      	mov	r0, r4
 80068c0:	f7ff ff61 	bl	8006786 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80068c4:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80068c6:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80068c8:	aa06      	add	r2, sp, #24
 80068ca:	2190      	movs	r1, #144	; 0x90
 80068cc:	4620      	mov	r0, r4
 80068ce:	f001 f90b 	bl	8007ae8 <VL53L0X_RdDWord>


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80068d2:	9b06      	ldr	r3, [sp, #24]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80068d4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80068d8:	0e1a      	lsrs	r2, r3, #24
 80068da:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80068de:	0c1a      	lsrs	r2, r3, #16
 80068e0:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
			Status |= VL53L0X_device_read_strobe(Dev);
 80068e4:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80068e6:	0a1a      	lsrs	r2, r3, #8

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80068e8:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80068ea:	4305      	orrs	r5, r0
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80068ec:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80068f0:	4620      	mov	r0, r4
 80068f2:	2225      	movs	r2, #37	; 0x25
 80068f4:	f001 f91e 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80068f8:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80068fa:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80068fc:	4620      	mov	r0, r4
 80068fe:	f7ff ff42 	bl	8006786 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006902:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006904:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006906:	aa06      	add	r2, sp, #24
 8006908:	2190      	movs	r1, #144	; 0x90
 800690a:	4620      	mov	r0, r4
 800690c:	f001 f8ec 	bl	8007ae8 <VL53L0X_RdDWord>

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006910:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 8006912:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006914:	0e1a      	lsrs	r2, r3, #24
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006916:	4305      	orrs	r5, r0
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006918:	0c1b      	lsrs	r3, r3, #16
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800691a:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800691c:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006920:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006924:	f018 0302 	ands.w	r3, r8, #2
 8006928:	9302      	str	r3, [sp, #8]
 800692a:	f000 80db 	beq.w	8006ae4 <VL53L0X_get_info_from_device+0x31c>
 800692e:	f016 0702 	ands.w	r7, r6, #2
 8006932:	f040 80d7 	bne.w	8006ae4 <VL53L0X_get_info_from_device+0x31c>
			((ReadDataFromDeviceDone & 2) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006936:	2202      	movs	r2, #2
 8006938:	2194      	movs	r1, #148	; 0x94
 800693a:	4620      	mov	r0, r4
 800693c:	f001 f8fa 	bl	8007b34 <VL53L0X_WrByte>
 8006940:	9001      	str	r0, [sp, #4]
			Status |= VL53L0X_device_read_strobe(Dev);
 8006942:	4620      	mov	r0, r4
 8006944:	f7ff ff1f 	bl	8006786 <VL53L0X_device_read_strobe>
 8006948:	9b01      	ldr	r3, [sp, #4]
 800694a:	4318      	orrs	r0, r3
 800694c:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800694e:	f10d 0216 	add.w	r2, sp, #22
 8006952:	2190      	movs	r1, #144	; 0x90
 8006954:	4620      	mov	r0, r4
 8006956:	f001 f85e 	bl	8007a16 <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 800695a:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800695c:	227b      	movs	r2, #123	; 0x7b
 800695e:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006960:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006962:	4620      	mov	r0, r4
 8006964:	f001 f8e6 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006968:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800696a:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 800696c:	4620      	mov	r0, r4
 800696e:	f7ff ff0a 	bl	8006786 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006972:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006974:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006976:	f10d 0217 	add.w	r2, sp, #23
 800697a:	2190      	movs	r1, #144	; 0x90
 800697c:	4620      	mov	r0, r4
 800697e:	f001 f84a 	bl	8007a16 <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006982:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006984:	2277      	movs	r2, #119	; 0x77
 8006986:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006988:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800698a:	4620      	mov	r0, r4
 800698c:	f001 f8d2 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006990:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006992:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006994:	4620      	mov	r0, r4
 8006996:	f7ff fef6 	bl	8006786 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800699a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 800699c:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800699e:	aa06      	add	r2, sp, #24
 80069a0:	2190      	movs	r1, #144	; 0x90
 80069a2:	4620      	mov	r0, r4
 80069a4:	f001 f8a0 	bl	8007ae8 <VL53L0X_RdDWord>

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80069a8:	9b06      	ldr	r3, [sp, #24]
 80069aa:	0e5a      	lsrs	r2, r3, #25
 80069ac:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80069b0:	f3c3 4286 	ubfx	r2, r3, #18, #7
 80069b4:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80069b8:	f3c3 22c6 	ubfx	r2, r3, #11, #7
 80069bc:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
			Status |= VL53L0X_device_read_strobe(Dev);
 80069c0:	b26d      	sxtb	r5, r5
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80069c2:	f3c3 1206 	ubfx	r2, r3, #4, #7

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	f003 0378 	and.w	r3, r3, #120	; 0x78

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80069cc:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80069ce:	4305      	orrs	r5, r0
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80069d0:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80069d4:	4620      	mov	r0, r4
 80069d6:	2278      	movs	r2, #120	; 0x78
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80069d8:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80069dc:	f001 f8aa 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80069e0:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80069e2:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80069e4:	4620      	mov	r0, r4
 80069e6:	f7ff fece 	bl	8006786 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80069ea:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80069ec:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80069ee:	aa06      	add	r2, sp, #24
 80069f0:	2190      	movs	r1, #144	; 0x90
 80069f2:	4620      	mov	r0, r4
 80069f4:	f001 f878 	bl	8007ae8 <VL53L0X_RdDWord>

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80069f8:	9b06      	ldr	r3, [sp, #24]
			ProductId[4] = (char)(byte +
 80069fa:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80069fe:	eb02 7253 	add.w	r2, r2, r3, lsr #29
 8006a02:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006a06:	f3c3 5286 	ubfx	r2, r3, #22, #7
 8006a0a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006a0e:	f3c3 32c6 	ubfx	r2, r3, #15, #7
 8006a12:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006a16:	f3c3 2206 	ubfx	r2, r3, #8, #7
 8006a1a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			Status |= VL53L0X_device_read_strobe(Dev);
 8006a1e:	b26d      	sxtb	r5, r5
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006a20:	f3c3 0246 	ubfx	r2, r3, #1, #7

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006a24:	019b      	lsls	r3, r3, #6
 8006a26:	f003 0340 	and.w	r3, r3, #64	; 0x40

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006a2a:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006a2c:	4305      	orrs	r5, r0
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006a2e:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006a32:	4620      	mov	r0, r4
 8006a34:	2279      	movs	r2, #121	; 0x79
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006a36:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006a3a:	f001 f87b 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006a3e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006a40:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 8006a42:	4620      	mov	r0, r4
 8006a44:	f7ff fe9f 	bl	8006786 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006a48:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006a4a:	4305      	orrs	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006a4c:	aa06      	add	r2, sp, #24
 8006a4e:	2190      	movs	r1, #144	; 0x90
 8006a50:	4620      	mov	r0, r4
 8006a52:	f001 f849 	bl	8007ae8 <VL53L0X_RdDWord>

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006a56:	9b06      	ldr	r3, [sp, #24]
			ProductId[9] = (char)(byte +
 8006a58:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8006a5c:	eb02 6293 	add.w	r2, r2, r3, lsr #26
 8006a60:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006a64:	f3c3 42c6 	ubfx	r2, r3, #19, #7
 8006a68:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006a6c:	f3c3 3206 	ubfx	r2, r3, #12, #7
 8006a70:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
			Status |= VL53L0X_device_read_strobe(Dev);
 8006a74:	b26d      	sxtb	r5, r5
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006a76:	f3c3 1246 	ubfx	r2, r3, #5, #7

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	f003 037c 	and.w	r3, r3, #124	; 0x7c

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006a80:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006a82:	4305      	orrs	r5, r0
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006a84:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006a88:	4620      	mov	r0, r4
 8006a8a:	227a      	movs	r2, #122	; 0x7a
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006a8c:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006a90:	f001 f850 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006a94:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006a96:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f7ff fe74 	bl	8006786 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006a9e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006aa0:	4305      	orrs	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006aa2:	aa06      	add	r2, sp, #24
 8006aa4:	2190      	movs	r1, #144	; 0x90
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f001 f81e 	bl	8007ae8 <VL53L0X_RdDWord>

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8006aac:	9b06      	ldr	r3, [sp, #24]
			ProductId[13] = (char)(byte +
 8006aae:	f89d 2015 	ldrb.w	r2, [sp, #21]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
			ProductId[18] = '\0';
 8006ab2:	f88d 703e 	strb.w	r7, [sp, #62]	; 0x3e
			ProductId[13] = (char)(byte +
 8006ab6:	eb02 7293 	add.w	r2, r2, r3, lsr #30
 8006aba:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006abe:	f3c3 52c6 	ubfx	r2, r3, #23, #7
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ac2:	b26d      	sxtb	r5, r5
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006ac4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006ac8:	f3c3 4206 	ubfx	r2, r3, #16, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006acc:	4305      	orrs	r5, r0
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006ace:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006ad2:	f3c3 2246 	ubfx	r2, r3, #9, #7
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006ad6:	f3c3 0386 	ubfx	r3, r3, #2, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ada:	b26d      	sxtb	r5, r5
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006adc:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006ae0:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d

		}

		if (((option & 4) == 4) &&
 8006ae4:	f018 0304 	ands.w	r3, r8, #4
 8006ae8:	9301      	str	r3, [sp, #4]
 8006aea:	f000 80ef 	beq.w	8006ccc <VL53L0X_get_info_from_device+0x504>
 8006aee:	0777      	lsls	r7, r6, #29
 8006af0:	f100 80ec 	bmi.w	8006ccc <VL53L0X_get_info_from_device+0x504>
			((ReadDataFromDeviceDone & 4) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006af4:	227b      	movs	r2, #123	; 0x7b
 8006af6:	2194      	movs	r1, #148	; 0x94
 8006af8:	4620      	mov	r0, r4
 8006afa:	f001 f81b 	bl	8007b34 <VL53L0X_WrByte>
 8006afe:	4607      	mov	r7, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b00:	4620      	mov	r0, r4
 8006b02:	f7ff fe40 	bl	8006786 <VL53L0X_device_read_strobe>
 8006b06:	4338      	orrs	r0, r7
 8006b08:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006b0a:	aa07      	add	r2, sp, #28
 8006b0c:	2190      	movs	r1, #144	; 0x90
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f000 ffea 	bl	8007ae8 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b14:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006b16:	227c      	movs	r2, #124	; 0x7c
 8006b18:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006b1a:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f001 f809 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006b22:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006b24:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b26:	4620      	mov	r0, r4
 8006b28:	f7ff fe2d 	bl	8006786 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006b2c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b2e:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006b30:	aa08      	add	r2, sp, #32
 8006b32:	2190      	movs	r1, #144	; 0x90
 8006b34:	4620      	mov	r0, r4
 8006b36:	f000 ffd7 	bl	8007ae8 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b3a:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006b3c:	2273      	movs	r2, #115	; 0x73
 8006b3e:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006b40:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 fff6 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006b48:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006b4a:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f7ff fe1a 	bl	8006786 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006b52:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b54:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006b56:	aa06      	add	r2, sp, #24
 8006b58:	2190      	movs	r1, #144	; 0x90
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f000 ffc4 	bl	8007ae8 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b60:	b26d      	sxtb	r5, r5

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006b62:	2274      	movs	r2, #116	; 0x74
 8006b64:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006b66:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006b68:	4620      	mov	r0, r4
				0x000000ff) << 8;
 8006b6a:	9f06      	ldr	r7, [sp, #24]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006b6c:	f000 ffe2 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006b70:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006b72:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b74:	4620      	mov	r0, r4
 8006b76:	f7ff fe06 	bl	8006786 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006b7a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b7c:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006b7e:	aa06      	add	r2, sp, #24
 8006b80:	2190      	movs	r1, #144	; 0x90
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 ffb0 	bl	8007ae8 <VL53L0X_RdDWord>
				0x000000ff) << 8;
 8006b88:	023f      	lsls	r7, r7, #8

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8006b8a:	f89d 301b 	ldrb.w	r3, [sp, #27]
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b8e:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006b90:	2275      	movs	r2, #117	; 0x75
 8006b92:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006b94:	4305      	orrs	r5, r0
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8006b96:	b2bf      	uxth	r7, r7
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006b98:	4620      	mov	r0, r4
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8006b9a:	431f      	orrs	r7, r3
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006b9c:	f000 ffca 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ba0:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006ba2:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f7ff fdee 	bl	8006786 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006baa:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006bac:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006bae:	aa06      	add	r2, sp, #24
 8006bb0:	2190      	movs	r1, #144	; 0x90
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f000 ff98 	bl	8007ae8 <VL53L0X_RdDWord>

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 8006bb8:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 8006bba:	b26d      	sxtb	r5, r5
							<< 8;
 8006bbc:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 8006bbe:	b29b      	uxth	r3, r3

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006bc0:	2276      	movs	r2, #118	; 0x76
 8006bc2:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006bc4:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006bc6:	4620      	mov	r0, r4
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 8006bc8:	9303      	str	r3, [sp, #12]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006bca:	f000 ffb3 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006bce:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006bd0:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f7ff fdd7 	bl	8006786 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006bd8:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006bda:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006bdc:	aa06      	add	r2, sp, #24
 8006bde:	2190      	movs	r1, #144	; 0x90
 8006be0:	4620      	mov	r0, r4
 8006be2:	f000 ff81 	bl	8007ae8 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006be6:	b26d      	sxtb	r5, r5

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8006be8:	f89d 201b 	ldrb.w	r2, [sp, #27]
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006bec:	9b03      	ldr	r3, [sp, #12]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006bee:	4305      	orrs	r5, r0
 8006bf0:	b26d      	sxtb	r5, r5
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006bf2:	4313      	orrs	r3, r2
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	2181      	movs	r1, #129	; 0x81
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	9303      	str	r3, [sp, #12]
 8006bfc:	f000 ff9a 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006c00:	2206      	movs	r2, #6
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006c02:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006c04:	21ff      	movs	r1, #255	; 0xff
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 ff94 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006c0c:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006c0e:	4305      	orrs	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006c10:	f10d 0215 	add.w	r2, sp, #21
 8006c14:	2183      	movs	r1, #131	; 0x83
 8006c16:	4620      	mov	r0, r4
 8006c18:	f000 fefd 	bl	8007a16 <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006c1c:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006c20:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006c22:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006c24:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8006c28:	2183      	movs	r1, #131	; 0x83
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f000 ff82 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006c30:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006c32:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c34:	2201      	movs	r2, #1
 8006c36:	21ff      	movs	r1, #255	; 0xff
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 ff7b 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006c3e:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c40:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006c42:	2201      	movs	r2, #1
 8006c44:	2100      	movs	r1, #0
 8006c46:	4620      	mov	r0, r4
 8006c48:	f000 ff74 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c4c:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006c4e:	4305      	orrs	r5, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006c50:	2200      	movs	r2, #0
 8006c52:	21ff      	movs	r1, #255	; 0xff
 8006c54:	4620      	mov	r0, r4
 8006c56:	f000 ff6d 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006c5a:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006c5c:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2180      	movs	r1, #128	; 0x80
 8006c62:	4620      	mov	r0, r4
 8006c64:	f000 ff66 	bl	8007b34 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006c68:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006c6a:	4305      	orrs	r5, r0
 8006c6c:	b26d      	sxtb	r5, r5
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006c6e:	9b03      	ldr	r3, [sp, #12]
 8006c70:	bb1d      	cbnz	r5, 8006cba <VL53L0X_get_info_from_device+0x4f2>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8006c72:	f1ba 0f00 	cmp.w	sl, #0
 8006c76:	d001      	beq.n	8006c7c <VL53L0X_get_info_from_device+0x4b4>
 8006c78:	07f0      	lsls	r0, r6, #31
 8006c7a:	d52a      	bpl.n	8006cd2 <VL53L0X_get_info_from_device+0x50a>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
			}
		}

		if (((option & 2) == 2) &&
 8006c7c:	9a02      	ldr	r2, [sp, #8]
 8006c7e:	2a00      	cmp	r2, #0
 8006c80:	d138      	bne.n	8006cf4 <VL53L0X_get_info_from_device+0x52c>
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);

		}

		if (((option & 4) == 4) &&
 8006c82:	9a01      	ldr	r2, [sp, #4]
 8006c84:	b1aa      	cbz	r2, 8006cb2 <VL53L0X_get_info_from_device+0x4ea>
 8006c86:	0772      	lsls	r2, r6, #29
 8006c88:	d413      	bmi.n	8006cb2 <VL53L0X_get_info_from_device+0x4ea>
			((ReadDataFromDeviceDone & 4) == 0)) {
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c8a:	9a07      	ldr	r2, [sp, #28]
 8006c8c:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8006c90:	027f      	lsls	r7, r7, #9
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c92:	9a08      	ldr	r2, [sp, #32]
 8006c94:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c98:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
			if (DistMeasFixed1104_400_mm != 0) {
 8006c9c:	b13b      	cbz	r3, 8006cae <VL53L0X_get_info_from_device+0x4e6>
					OffsetFixed1104_mm =
 8006c9e:	f5a3 52c8 	sub.w	r2, r3, #6400	; 0x1900
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8006ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ca6:	4353      	muls	r3, r2
 8006ca8:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters *= -1;
 8006caa:	425b      	negs	r3, r3
 8006cac:	b29b      	uxth	r3, r3
			}

			PALDevDataSet(Dev,
 8006cae:	b21b      	sxth	r3, r3
 8006cb0:	60e3      	str	r3, [r4, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8006cb2:	ea46 0608 	orr.w	r6, r6, r8
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8006cb6:	f884 60f0 	strb.w	r6, [r4, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8006cba:	4628      	mov	r0, r5
 8006cbc:	b011      	add	sp, #68	; 0x44
 8006cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ReferenceSpadType = 0;
 8006cc2:	46d1      	mov	r9, sl
	uint8_t ReferenceSpadCount = 0;
 8006cc4:	46d3      	mov	fp, sl
 8006cc6:	e62d      	b.n	8006924 <VL53L0X_get_info_from_device+0x15c>
 8006cc8:	46cb      	mov	fp, r9
 8006cca:	e62b      	b.n	8006924 <VL53L0X_get_info_from_device+0x15c>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8006ccc:	2700      	movs	r7, #0
	uint32_t DistMeasFixed1104_400_mm = 0;
 8006cce:	463b      	mov	r3, r7
 8006cd0:	e790      	b.n	8006bf4 <VL53L0X_get_info_from_device+0x42c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006cd2:	f884 b113 	strb.w	fp, [r4, #275]	; 0x113
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006cd6:	f884 9114 	strb.w	r9, [r4, #276]	; 0x114
 8006cda:	f504 7195 	add.w	r1, r4, #298	; 0x12a
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006cde:	462a      	mov	r2, r5
					NvmRefGoodSpadMap[i];
 8006ce0:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8006ce4:	f812 000e 	ldrb.w	r0, [r2, lr]
 8006ce8:	f801 0b01 	strb.w	r0, [r1], #1
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006cec:	3201      	adds	r2, #1
 8006cee:	2a06      	cmp	r2, #6
 8006cf0:	d1f8      	bne.n	8006ce4 <VL53L0X_get_info_from_device+0x51c>
 8006cf2:	e7c3      	b.n	8006c7c <VL53L0X_get_info_from_device+0x4b4>
		if (((option & 2) == 2) &&
 8006cf4:	07b1      	lsls	r1, r6, #30
 8006cf6:	d4c4      	bmi.n	8006c82 <VL53L0X_get_info_from_device+0x4ba>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006cf8:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8006cfc:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006d00:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8006d04:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8006d08:	a90b      	add	r1, sp, #44	; 0x2c
 8006d0a:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
 8006d0e:	9302      	str	r3, [sp, #8]
 8006d10:	f001 fd28 	bl	8008764 <strcpy>
 8006d14:	9b02      	ldr	r3, [sp, #8]
 8006d16:	e7b4      	b.n	8006c82 <VL53L0X_get_info_from_device+0x4ba>
 8006d18:	464d      	mov	r5, r9
	return Status;
 8006d1a:	e7ce      	b.n	8006cba <VL53L0X_get_info_from_device+0x4f2>

08006d1c <VL53L0X_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_macro_clks > 0) {
 8006d1c:	b150      	cbz	r0, 8006d34 <VL53L0X_encode_timeout+0x18>
		ls_byte = timeout_macro_clks - 1;
 8006d1e:	3801      	subs	r0, #1
 8006d20:	2300      	movs	r3, #0

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006d22:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	f103 0301 	add.w	r3, r3, #1
 8006d2c:	d103      	bne.n	8006d36 <VL53L0X_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 8006d2e:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8006d32:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;

}
 8006d34:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 8006d36:	0840      	lsrs	r0, r0, #1
 8006d38:	e7f3      	b.n	8006d22 <VL53L0X_encode_timeout+0x6>

08006d3a <VL53L0X_decode_timeout>:
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006d3a:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8006d3c:	0a00      	lsrs	r0, r0, #8
 8006d3e:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 8006d42:	3001      	adds	r0, #1
 8006d44:	4770      	bx	lr
	...

08006d48 <VL53L0X_calc_timeout_mclks>:
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006d48:	4808      	ldr	r0, [pc, #32]	; (8006d6c <VL53L0X_calc_timeout_mclks+0x24>)

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8006d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006d4e:	4342      	muls	r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006d50:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006d54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006d58:	fbb2 f0f0 	udiv	r0, r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006d5c:	fbb2 f2f3 	udiv	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006d60:	fb03 0001 	mla	r0, r3, r1, r0

	return timeout_period_mclks;
}
 8006d64:	fbb0 f0f2 	udiv	r0, r0, r2
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	003a2f00 	.word	0x003a2f00

08006d70 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006d70:	b510      	push	{r4, lr}
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006d72:	4b08      	ldr	r3, [pc, #32]	; (8006d94 <VL53L0X_calc_timeout_us+0x24>)
 8006d74:	435a      	muls	r2, r3
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006d76:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8006d7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
		+ (macro_period_ns / 2)) / 1000;
 8006d7e:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006d82:	fbb2 f3f0 	udiv	r3, r2, r0
		+ (macro_period_ns / 2)) / 1000;
 8006d86:	fbb2 f2f4 	udiv	r2, r2, r4
 8006d8a:	fb01 2203 	mla	r2, r1, r3, r2

	return actual_timeout_period_us;
}
 8006d8e:	fbb2 f0f0 	udiv	r0, r2, r0
 8006d92:	bd10      	pop	{r4, pc}
 8006d94:	003a2f00 	.word	0x003a2f00

08006d98 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8006d98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006d9c:	2902      	cmp	r1, #2
	uint8_t EncodedTimeOutByte = 0;
 8006d9e:	f04f 0400 	mov.w	r4, #0
{
 8006da2:	4606      	mov	r6, r0
 8006da4:	4690      	mov	r8, r2
	uint8_t EncodedTimeOutByte = 0;
 8006da6:	f88d 4003 	strb.w	r4, [sp, #3]
	uint16_t PreRangeEncodedTimeOut = 0;
 8006daa:	f8ad 4004 	strh.w	r4, [sp, #4]
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006dae:	d81d      	bhi.n	8006dec <get_sequence_step_timeout+0x54>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006db0:	f10d 0202 	add.w	r2, sp, #2
 8006db4:	4621      	mov	r1, r4
 8006db6:	f7fe fba7 	bl	8005508 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006dba:	4605      	mov	r5, r0
 8006dbc:	b930      	cbnz	r0, 8006dcc <get_sequence_step_timeout+0x34>
			Status = VL53L0X_RdByte(Dev,
 8006dbe:	f10d 0203 	add.w	r2, sp, #3
 8006dc2:	2146      	movs	r1, #70	; 0x46
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f000 fe26 	bl	8007a16 <VL53L0X_RdByte>
 8006dca:	4605      	mov	r5, r0
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006dcc:	f89d 0003 	ldrb.w	r0, [sp, #3]
				Status = VL53L0X_RdWord(Dev,
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006dd0:	f7ff ffb3 	bl	8006d3a <VL53L0X_decode_timeout>
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006dd4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8006dd8:	b281      	uxth	r1, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f7ff ffc8 	bl	8006d70 <VL53L0X_calc_timeout_us>
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006de0:	f8c8 0000 	str.w	r0, [r8]

	return Status;
}
 8006de4:	4628      	mov	r0, r5
 8006de6:	b004      	add	sp, #16
 8006de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006dec:	2903      	cmp	r1, #3
 8006dee:	d118      	bne.n	8006e22 <get_sequence_step_timeout+0x8a>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006df0:	f10d 0202 	add.w	r2, sp, #2
 8006df4:	4621      	mov	r1, r4
 8006df6:	f7fe fb87 	bl	8005508 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d14a      	bne.n	8006e96 <get_sequence_step_timeout+0xfe>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006e00:	4601      	mov	r1, r0
 8006e02:	f10d 0202 	add.w	r2, sp, #2
 8006e06:	4630      	mov	r0, r6
 8006e08:	f7fe fb7e 	bl	8005508 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	b928      	cbnz	r0, 8006e1c <get_sequence_step_timeout+0x84>
				Status = VL53L0X_RdWord(Dev,
 8006e10:	aa01      	add	r2, sp, #4
 8006e12:	2151      	movs	r1, #81	; 0x51
 8006e14:	4630      	mov	r0, r6
 8006e16:	f000 fe47 	bl	8007aa8 <VL53L0X_RdWord>
 8006e1a:	4605      	mov	r5, r0
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006e1c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8006e20:	e7d6      	b.n	8006dd0 <get_sequence_step_timeout+0x38>
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006e22:	2904      	cmp	r1, #4
 8006e24:	d139      	bne.n	8006e9a <get_sequence_step_timeout+0x102>
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006e26:	a902      	add	r1, sp, #8
 8006e28:	f7fe fbc1 	bl	80055ae <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8006e2c:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8006e30:	b369      	cbz	r1, 8006e8e <get_sequence_step_timeout+0xf6>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006e32:	f10d 0202 	add.w	r2, sp, #2
 8006e36:	4621      	mov	r1, r4
 8006e38:	4630      	mov	r0, r6
 8006e3a:	f7fe fb65 	bl	8005508 <VL53L0X_GetVcselPulsePeriod>
 8006e3e:	4605      	mov	r5, r0
 8006e40:	4607      	mov	r7, r0
			if (Status == VL53L0X_ERROR_NONE) {
 8006e42:	bb30      	cbnz	r0, 8006e92 <get_sequence_step_timeout+0xfa>
				Status = VL53L0X_RdWord(Dev,
 8006e44:	aa01      	add	r2, sp, #4
 8006e46:	2151      	movs	r1, #81	; 0x51
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f000 fe2d 	bl	8007aa8 <VL53L0X_RdWord>
 8006e4e:	4605      	mov	r5, r0
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006e50:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8006e54:	f7ff ff71 	bl	8006d3a <VL53L0X_decode_timeout>
 8006e58:	b284      	uxth	r4, r0
		if (Status == VL53L0X_ERROR_NONE) {
 8006e5a:	b99d      	cbnz	r5, 8006e84 <get_sequence_step_timeout+0xec>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006e5c:	f10d 0202 	add.w	r2, sp, #2
 8006e60:	2101      	movs	r1, #1
 8006e62:	4630      	mov	r0, r6
 8006e64:	f7fe fb50 	bl	8005508 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8006e68:	4605      	mov	r5, r0
 8006e6a:	b990      	cbnz	r0, 8006e92 <get_sequence_step_timeout+0xfa>
			Status = VL53L0X_RdWord(Dev,
 8006e6c:	f10d 0206 	add.w	r2, sp, #6
 8006e70:	2171      	movs	r1, #113	; 0x71
 8006e72:	4630      	mov	r0, r6
 8006e74:	f000 fe18 	bl	8007aa8 <VL53L0X_RdWord>
 8006e78:	4605      	mov	r5, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006e7a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8006e7e:	f7ff ff5c 	bl	8006d3a <VL53L0X_decode_timeout>
 8006e82:	b287      	uxth	r7, r0
		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006e84:	1b3c      	subs	r4, r7, r4
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006e86:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8006e8a:	b2a1      	uxth	r1, r4
 8006e8c:	e7a5      	b.n	8006dda <get_sequence_step_timeout+0x42>
		PreRangeTimeOutMClks = 0;
 8006e8e:	460c      	mov	r4, r1
 8006e90:	e7e4      	b.n	8006e5c <get_sequence_step_timeout+0xc4>
	uint16_t FinalRangeTimeOutMClks = 0;
 8006e92:	2700      	movs	r7, #0
 8006e94:	e7f6      	b.n	8006e84 <get_sequence_step_timeout+0xec>
	uint32_t TimeoutMicroSeconds = 0;
 8006e96:	4620      	mov	r0, r4
 8006e98:	e7a2      	b.n	8006de0 <get_sequence_step_timeout+0x48>
 8006e9a:	4620      	mov	r0, r4
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e9c:	4625      	mov	r5, r4
 8006e9e:	e79f      	b.n	8006de0 <get_sequence_step_timeout+0x48>

08006ea0 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8006ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006ea2:	2902      	cmp	r1, #2
{
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	4617      	mov	r7, r2
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006eaa:	d81e      	bhi.n	8006eea <set_sequence_step_timeout+0x4a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006eac:	f10d 0205 	add.w	r2, sp, #5
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	f7fe fb29 	bl	8005508 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	b9a0      	cbnz	r0, 8006ee4 <set_sequence_step_timeout+0x44>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006eba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	f7ff ff41 	bl	8006d48 <VL53L0X_calc_timeout_mclks>
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006ec6:	b283      	uxth	r3, r0
 8006ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				MsrcEncodedTimeOut = 255;
			else
				MsrcEncodedTimeOut =
 8006ecc:	bf9a      	itte	ls
 8006ece:	f100 32ff 	addls.w	r2, r0, #4294967295
 8006ed2:	b2d2      	uxtbls	r2, r2
				MsrcEncodedTimeOut = 255;
 8006ed4:	22ff      	movhi	r2, #255	; 0xff
					(uint8_t)MsrcRangeTimeOutMClks - 1;

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006ed6:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 8006eda:	2146      	movs	r1, #70	; 0x46
 8006edc:	4628      	mov	r0, r5
 8006ede:	f000 fe29 	bl	8007b34 <VL53L0X_WrByte>
 8006ee2:	4604      	mov	r4, r0
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;

	}
	return Status;
}
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	b005      	add	sp, #20
 8006ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006eea:	2903      	cmp	r1, #3
 8006eec:	d11f      	bne.n	8006f2e <set_sequence_step_timeout+0x8e>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006eee:	f10d 0205 	add.w	r2, sp, #5
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	f7fe fb08 	bl	8005508 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_calc_timeout_mclks(Dev,
 8006ef8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8006efc:	4639      	mov	r1, r7
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006efe:	4604      	mov	r4, r0
					VL53L0X_calc_timeout_mclks(Dev,
 8006f00:	4628      	mov	r0, r5
 8006f02:	f7ff ff21 	bl	8006d48 <VL53L0X_calc_timeout_mclks>
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006f06:	b280      	uxth	r0, r0
 8006f08:	f7ff ff08 	bl	8006d1c <VL53L0X_encode_timeout>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	f8ad 0006 	strh.w	r0, [sp, #6]
				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f12:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
			if (Status == VL53L0X_ERROR_NONE) {
 8006f16:	2c00      	cmp	r4, #0
 8006f18:	d1e4      	bne.n	8006ee4 <set_sequence_step_timeout+0x44>
				Status = VL53L0X_WrWord(Dev,
 8006f1a:	2151      	movs	r1, #81	; 0x51
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	f000 fe19 	bl	8007b54 <VL53L0X_WrWord>
			if (Status == VL53L0X_ERROR_NONE) {
 8006f22:	4604      	mov	r4, r0
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d1dd      	bne.n	8006ee4 <set_sequence_step_timeout+0x44>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006f28:	f8c5 70e4 	str.w	r7, [r5, #228]	; 0xe4
 8006f2c:	e7da      	b.n	8006ee4 <set_sequence_step_timeout+0x44>
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006f2e:	2904      	cmp	r1, #4
 8006f30:	d13b      	bne.n	8006faa <set_sequence_step_timeout+0x10a>
			VL53L0X_GetSequenceStepEnables(Dev,
 8006f32:	a902      	add	r1, sp, #8
 8006f34:	f7fe fb3b 	bl	80055ae <VL53L0X_GetSequenceStepEnables>
			if (SchedulerSequenceSteps.PreRangeOn) {
 8006f38:	f89d 600b 	ldrb.w	r6, [sp, #11]
 8006f3c:	b1b6      	cbz	r6, 8006f6c <set_sequence_step_timeout+0xcc>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f3e:	f10d 0205 	add.w	r2, sp, #5
 8006f42:	2100      	movs	r1, #0
 8006f44:	4628      	mov	r0, r5
 8006f46:	f7fe fadf 	bl	8005508 <VL53L0X_GetVcselPulsePeriod>
				if (Status == VL53L0X_ERROR_NONE) {
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d1c9      	bne.n	8006ee4 <set_sequence_step_timeout+0x44>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006f50:	f10d 0206 	add.w	r2, sp, #6
 8006f54:	2151      	movs	r1, #81	; 0x51
 8006f56:	4628      	mov	r0, r5
 8006f58:	f000 fda6 	bl	8007aa8 <VL53L0X_RdWord>
 8006f5c:	4604      	mov	r4, r0
						VL53L0X_decode_timeout(
 8006f5e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8006f62:	f7ff feea 	bl	8006d3a <VL53L0X_decode_timeout>
			if (Status == VL53L0X_ERROR_NONE) {
 8006f66:	2c00      	cmp	r4, #0
 8006f68:	d1bc      	bne.n	8006ee4 <set_sequence_step_timeout+0x44>
					PreRangeTimeOutMClks =
 8006f6a:	b286      	uxth	r6, r0
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f6c:	f10d 0205 	add.w	r2, sp, #5
 8006f70:	2101      	movs	r1, #1
 8006f72:	4628      	mov	r0, r5
 8006f74:	f7fe fac8 	bl	8005508 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 8006f78:	4604      	mov	r4, r0
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d1b2      	bne.n	8006ee4 <set_sequence_step_timeout+0x44>
					VL53L0X_calc_timeout_mclks(Dev,
 8006f7e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8006f82:	4639      	mov	r1, r7
 8006f84:	4628      	mov	r0, r5
 8006f86:	f7ff fedf 	bl	8006d48 <VL53L0X_calc_timeout_mclks>
				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006f8a:	fa16 f080 	uxtah	r0, r6, r0
				FinalRangeEncodedTimeOut =
 8006f8e:	b280      	uxth	r0, r0
 8006f90:	f7ff fec4 	bl	8006d1c <VL53L0X_encode_timeout>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006f94:	2171      	movs	r1, #113	; 0x71
 8006f96:	4602      	mov	r2, r0
 8006f98:	4628      	mov	r0, r5
 8006f9a:	f000 fddb 	bl	8007b54 <VL53L0X_WrWord>
				if (Status == VL53L0X_ERROR_NONE) {
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d19f      	bne.n	8006ee4 <set_sequence_step_timeout+0x44>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006fa4:	f8c5 70dc 	str.w	r7, [r5, #220]	; 0xdc
 8006fa8:	e79c      	b.n	8006ee4 <set_sequence_step_timeout+0x44>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006faa:	f06f 0403 	mvn.w	r4, #3
 8006fae:	e799      	b.n	8006ee4 <set_sequence_step_timeout+0x44>

08006fb0 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006fb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint8_t MaxFinalVcselPeriodPCLK = 14;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8006fb4:	2300      	movs	r3, #0

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006fb6:	f012 0701 	ands.w	r7, r2, #1
{
 8006fba:	4605      	mov	r5, r0
 8006fbc:	4688      	mov	r8, r1
 8006fbe:	4616      	mov	r6, r2
	uint8_t PhaseCalInt = 0;
 8006fc0:	f88d 3003 	strb.w	r3, [sp, #3]
	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006fc4:	f040 80e5 	bne.w	8007192 <VL53L0X_set_vcsel_pulse_period+0x1e2>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006fc8:	2900      	cmp	r1, #0
 8006fca:	d143      	bne.n	8007054 <VL53L0X_set_vcsel_pulse_period+0xa4>
 8006fcc:	f1a2 030c 	sub.w	r3, r2, #12
 8006fd0:	2b06      	cmp	r3, #6
 8006fd2:	f200 80de 	bhi.w	8007192 <VL53L0X_set_vcsel_pulse_period+0x1e2>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8006fd6:	2a0c      	cmp	r2, #12
 8006fd8:	d178      	bne.n	80070cc <VL53L0X_set_vcsel_pulse_period+0x11c>

			Status = VL53L0X_WrByte(Dev,
 8006fda:	2218      	movs	r2, #24
			Status = VL53L0X_WrByte(Dev,
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {

			Status = VL53L0X_WrByte(Dev,
 8006fdc:	2157      	movs	r1, #87	; 0x57
 8006fde:	f000 fda9 	bl	8007b34 <VL53L0X_WrByte>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8006fe2:	2208      	movs	r2, #8
 8006fe4:	2156      	movs	r1, #86	; 0x56
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f000 fda4 	bl	8007b34 <VL53L0X_WrByte>
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d16a      	bne.n	80070c6 <VL53L0X_set_vcsel_pulse_period+0x116>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8006ff0:	0874      	lsrs	r4, r6, #1
 8006ff2:	3c01      	subs	r4, #1
 8006ff4:	b2e4      	uxtb	r4, r4
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006ff6:	aa02      	add	r2, sp, #8
 8006ff8:	2103      	movs	r1, #3
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f7ff fecc 	bl	8006d98 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007000:	b9b0      	cbnz	r0, 8007030 <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = get_sequence_step_timeout(Dev,
 8007002:	aa03      	add	r2, sp, #12
 8007004:	2102      	movs	r1, #2
 8007006:	4628      	mov	r0, r5
 8007008:	f7ff fec6 	bl	8006d98 <get_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800700c:	b980      	cbnz	r0, 8007030 <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = VL53L0X_WrByte(Dev,
 800700e:	4622      	mov	r2, r4
 8007010:	2150      	movs	r1, #80	; 0x50
 8007012:	4628      	mov	r0, r5
 8007014:	f000 fd8e 	bl	8007b34 <VL53L0X_WrByte>
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007018:	b950      	cbnz	r0, 8007030 <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = set_sequence_step_timeout(Dev,
 800701a:	9a02      	ldr	r2, [sp, #8]
 800701c:	2103      	movs	r1, #3
 800701e:	4628      	mov	r0, r5
 8007020:	f7ff ff3e 	bl	8006ea0 <set_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8007024:	b920      	cbnz	r0, 8007030 <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = set_sequence_step_timeout(Dev,
 8007026:	9a03      	ldr	r2, [sp, #12]
 8007028:	2102      	movs	r1, #2
 800702a:	4628      	mov	r0, r5
 800702c:	f7ff ff38 	bl	8006ea0 <set_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007030:	f885 60e8 	strb.w	r6, [r5, #232]	; 0xe8
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8007034:	2800      	cmp	r0, #0
 8007036:	d146      	bne.n	80070c6 <VL53L0X_set_vcsel_pulse_period+0x116>
		VL53L0X_GETPARAMETERFIELD(Dev,
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007038:	6969      	ldr	r1, [r5, #20]
 800703a:	4628      	mov	r0, r5
 800703c:	f7fe fa60 	bl	8005500 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8007040:	2800      	cmp	r0, #0
 8007042:	d140      	bne.n	80070c6 <VL53L0X_set_vcsel_pulse_period+0x116>
		Status = VL53L0X_perform_phase_calibration(
 8007044:	4602      	mov	r2, r0
 8007046:	2301      	movs	r3, #1
 8007048:	f10d 0103 	add.w	r1, sp, #3
 800704c:	4628      	mov	r0, r5
 800704e:	f7ff f9e1 	bl	8006414 <VL53L0X_perform_phase_calibration>
 8007052:	e038      	b.n	80070c6 <VL53L0X_set_vcsel_pulse_period+0x116>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8007054:	2901      	cmp	r1, #1
 8007056:	f040 8092 	bne.w	800717e <VL53L0X_set_vcsel_pulse_period+0x1ce>
 800705a:	f1a2 0308 	sub.w	r3, r2, #8
 800705e:	2b06      	cmp	r3, #6
 8007060:	f200 8097 	bhi.w	8007192 <VL53L0X_set_vcsel_pulse_period+0x1e2>
		if (VCSELPulsePeriodPCLK == 8) {
 8007064:	2a08      	cmp	r2, #8
 8007066:	d13d      	bne.n	80070e4 <VL53L0X_set_vcsel_pulse_period+0x134>
			Status = VL53L0X_WrByte(Dev,
 8007068:	2210      	movs	r2, #16
 800706a:	2148      	movs	r1, #72	; 0x48
 800706c:	f000 fd62 	bl	8007b34 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8007070:	4632      	mov	r2, r6
 8007072:	2147      	movs	r1, #71	; 0x47
 8007074:	4628      	mov	r0, r5
 8007076:	f000 fd5d 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 800707a:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 800707c:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 800707e:	2132      	movs	r1, #50	; 0x32
 8007080:	4628      	mov	r0, r5
 8007082:	f000 fd57 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8007086:	220c      	movs	r2, #12
			Status |= VL53L0X_WrByte(Dev,
 8007088:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 800708a:	2130      	movs	r1, #48	; 0x30
 800708c:	4628      	mov	r0, r5
 800708e:	f000 fd51 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8007092:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8007094:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007096:	4642      	mov	r2, r8
 8007098:	21ff      	movs	r1, #255	; 0xff
 800709a:	4628      	mov	r0, r5
 800709c:	f000 fd4a 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80070a0:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80070a2:	4304      	orrs	r4, r0
 80070a4:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 80070a6:	2230      	movs	r2, #48	; 0x30
			Status |= VL53L0X_WrByte(Dev,
 80070a8:	2130      	movs	r1, #48	; 0x30
 80070aa:	4628      	mov	r0, r5
 80070ac:	f000 fd42 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80070b0:	463a      	mov	r2, r7
			Status |= VL53L0X_WrByte(Dev,
 80070b2:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80070b4:	21ff      	movs	r1, #255	; 0xff
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 fd3c 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80070bc:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80070be:	4320      	orrs	r0, r4
 80070c0:	b240      	sxtb	r0, r0
	if (Status == VL53L0X_ERROR_NONE) {
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d068      	beq.n	8007198 <VL53L0X_set_vcsel_pulse_period+0x1e8>
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
 80070c6:	b004      	add	sp, #16
 80070c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (VCSELPulsePeriodPCLK == 14) {
 80070cc:	2a0e      	cmp	r2, #14
 80070ce:	d101      	bne.n	80070d4 <VL53L0X_set_vcsel_pulse_period+0x124>
			Status = VL53L0X_WrByte(Dev,
 80070d0:	2230      	movs	r2, #48	; 0x30
 80070d2:	e783      	b.n	8006fdc <VL53L0X_set_vcsel_pulse_period+0x2c>
		} else if (VCSELPulsePeriodPCLK == 16) {
 80070d4:	2a10      	cmp	r2, #16
 80070d6:	d101      	bne.n	80070dc <VL53L0X_set_vcsel_pulse_period+0x12c>
			Status = VL53L0X_WrByte(Dev,
 80070d8:	2240      	movs	r2, #64	; 0x40
 80070da:	e77f      	b.n	8006fdc <VL53L0X_set_vcsel_pulse_period+0x2c>
		} else if (VCSELPulsePeriodPCLK == 18) {
 80070dc:	2a12      	cmp	r2, #18
 80070de:	d14e      	bne.n	800717e <VL53L0X_set_vcsel_pulse_period+0x1ce>
			Status = VL53L0X_WrByte(Dev,
 80070e0:	2250      	movs	r2, #80	; 0x50
 80070e2:	e77b      	b.n	8006fdc <VL53L0X_set_vcsel_pulse_period+0x2c>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80070e4:	2a0a      	cmp	r2, #10
 80070e6:	d120      	bne.n	800712a <VL53L0X_set_vcsel_pulse_period+0x17a>
			Status = VL53L0X_WrByte(Dev,
 80070e8:	2228      	movs	r2, #40	; 0x28
 80070ea:	2148      	movs	r1, #72	; 0x48
 80070ec:	f000 fd22 	bl	8007b34 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 80070f0:	2208      	movs	r2, #8
 80070f2:	2147      	movs	r1, #71	; 0x47
 80070f4:	4628      	mov	r0, r5
 80070f6:	f000 fd1d 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80070fa:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 80070fc:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 80070fe:	2132      	movs	r1, #50	; 0x32
 8007100:	4628      	mov	r0, r5
 8007102:	f000 fd17 	bl	8007b34 <VL53L0X_WrByte>
 8007106:	4304      	orrs	r4, r0
 8007108:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 800710a:	2209      	movs	r2, #9
			Status |= VL53L0X_WrByte(Dev,
 800710c:	2130      	movs	r1, #48	; 0x30
 800710e:	4628      	mov	r0, r5
 8007110:	f000 fd10 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007114:	4642      	mov	r2, r8
			Status |= VL53L0X_WrByte(Dev,
 8007116:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007118:	21ff      	movs	r1, #255	; 0xff
 800711a:	4628      	mov	r0, r5
 800711c:	f000 fd0a 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8007120:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007122:	4304      	orrs	r4, r0
 8007124:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8007126:	2220      	movs	r2, #32
 8007128:	e7be      	b.n	80070a8 <VL53L0X_set_vcsel_pulse_period+0xf8>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800712a:	2a0c      	cmp	r2, #12
 800712c:	d112      	bne.n	8007154 <VL53L0X_set_vcsel_pulse_period+0x1a4>
			Status = VL53L0X_WrByte(Dev,
 800712e:	2238      	movs	r2, #56	; 0x38
 8007130:	2148      	movs	r1, #72	; 0x48
 8007132:	f000 fcff 	bl	8007b34 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8007136:	2208      	movs	r2, #8
 8007138:	2147      	movs	r1, #71	; 0x47
 800713a:	4628      	mov	r0, r5
 800713c:	f000 fcfa 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8007140:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8007142:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8007144:	2132      	movs	r1, #50	; 0x32
 8007146:	4628      	mov	r0, r5
 8007148:	f000 fcf4 	bl	8007b34 <VL53L0X_WrByte>
 800714c:	4304      	orrs	r4, r0
 800714e:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8007150:	2208      	movs	r2, #8
 8007152:	e7db      	b.n	800710c <VL53L0X_set_vcsel_pulse_period+0x15c>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007154:	2a0e      	cmp	r2, #14
 8007156:	d112      	bne.n	800717e <VL53L0X_set_vcsel_pulse_period+0x1ce>
			Status = VL53L0X_WrByte(Dev,
 8007158:	2248      	movs	r2, #72	; 0x48
 800715a:	4611      	mov	r1, r2
 800715c:	f000 fcea 	bl	8007b34 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8007160:	2208      	movs	r2, #8
 8007162:	2147      	movs	r1, #71	; 0x47
 8007164:	4628      	mov	r0, r5
 8007166:	f000 fce5 	bl	8007b34 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 800716a:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 800716c:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 800716e:	2132      	movs	r1, #50	; 0x32
 8007170:	4628      	mov	r0, r5
 8007172:	f000 fcdf 	bl	8007b34 <VL53L0X_WrByte>
 8007176:	4304      	orrs	r4, r0
 8007178:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 800717a:	2207      	movs	r2, #7
 800717c:	e7c6      	b.n	800710c <VL53L0X_set_vcsel_pulse_period+0x15c>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800717e:	0874      	lsrs	r4, r6, #1
 8007180:	3c01      	subs	r4, #1
 8007182:	b2e4      	uxtb	r4, r4
		switch (VcselPeriodType) {
 8007184:	f1b8 0f00 	cmp.w	r8, #0
 8007188:	f43f af35 	beq.w	8006ff6 <VL53L0X_set_vcsel_pulse_period+0x46>
 800718c:	f1b8 0f01 	cmp.w	r8, #1
 8007190:	d005      	beq.n	800719e <VL53L0X_set_vcsel_pulse_period+0x1ee>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007192:	f06f 0003 	mvn.w	r0, #3
 8007196:	e796      	b.n	80070c6 <VL53L0X_set_vcsel_pulse_period+0x116>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8007198:	0874      	lsrs	r4, r6, #1
 800719a:	3c01      	subs	r4, #1
 800719c:	b2e4      	uxtb	r4, r4
			Status = get_sequence_step_timeout(Dev,
 800719e:	aa01      	add	r2, sp, #4
 80071a0:	2104      	movs	r1, #4
 80071a2:	4628      	mov	r0, r5
 80071a4:	f7ff fdf8 	bl	8006d98 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 80071a8:	b950      	cbnz	r0, 80071c0 <VL53L0X_set_vcsel_pulse_period+0x210>
				Status = VL53L0X_WrByte(Dev,
 80071aa:	4622      	mov	r2, r4
 80071ac:	2170      	movs	r1, #112	; 0x70
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 fcc0 	bl	8007b34 <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
 80071b4:	b920      	cbnz	r0, 80071c0 <VL53L0X_set_vcsel_pulse_period+0x210>
				Status = set_sequence_step_timeout(Dev,
 80071b6:	9a01      	ldr	r2, [sp, #4]
 80071b8:	2104      	movs	r1, #4
 80071ba:	4628      	mov	r0, r5
 80071bc:	f7ff fe70 	bl	8006ea0 <set_sequence_step_timeout>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80071c0:	f885 60e0 	strb.w	r6, [r5, #224]	; 0xe0
			break;
 80071c4:	e736      	b.n	8007034 <VL53L0X_set_vcsel_pulse_period+0x84>

080071c6 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80071c6:	b513      	push	{r0, r1, r4, lr}
 80071c8:	4614      	mov	r4, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80071ca:	b121      	cbz	r1, 80071d6 <VL53L0X_get_vcsel_pulse_period+0x10>
 80071cc:	2901      	cmp	r1, #1
 80071ce:	d00f      	beq.n	80071f0 <VL53L0X_get_vcsel_pulse_period+0x2a>
		Status = VL53L0X_RdByte(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80071d0:	f06f 0003 	mvn.w	r0, #3
 80071d4:	e00a      	b.n	80071ec <VL53L0X_get_vcsel_pulse_period+0x26>
		Status = VL53L0X_RdByte(Dev,
 80071d6:	f10d 0207 	add.w	r2, sp, #7
 80071da:	2150      	movs	r1, #80	; 0x50
		Status = VL53L0X_RdByte(Dev,
 80071dc:	f000 fc1b 	bl	8007a16 <VL53L0X_RdByte>
	}

	if (Status == VL53L0X_ERROR_NONE)
 80071e0:	b920      	cbnz	r0, 80071ec <VL53L0X_get_vcsel_pulse_period+0x26>
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80071e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80071e6:	3301      	adds	r3, #1
 80071e8:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
 80071ea:	7023      	strb	r3, [r4, #0]
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
 80071ec:	b002      	add	sp, #8
 80071ee:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 80071f0:	f10d 0207 	add.w	r2, sp, #7
 80071f4:	2170      	movs	r1, #112	; 0x70
 80071f6:	e7f1      	b.n	80071dc <VL53L0X_get_vcsel_pulse_period+0x16>

080071f8 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80071f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80071fa:	2300      	movs	r3, #0
{
 80071fc:	b085      	sub	sp, #20
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80071fe:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007202:	e88d 000c 	stmia.w	sp, {r2, r3}
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8007206:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800720a:	4299      	cmp	r1, r3
{
 800720c:	4606      	mov	r6, r0
 800720e:	460f      	mov	r7, r1
	if (MeasurementTimingBudgetMicroSeconds
 8007210:	d804      	bhi.n	800721c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
 8007212:	f06f 0503 	mvn.w	r5, #3
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8007216:	4628      	mov	r0, r5
 8007218:	b005      	add	sp, #20
 800721a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800721c:	a902      	add	r1, sp, #8
 800721e:	f7fe f9c6 	bl	80055ae <VL53L0X_GetSequenceStepEnables>
	if (Status == VL53L0X_ERROR_NONE &&
 8007222:	4605      	mov	r5, r0
 8007224:	2800      	cmp	r0, #0
 8007226:	d1f6      	bne.n	8007216 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
 8007228:	f89d 3008 	ldrb.w	r3, [sp, #8]
	FinalRangeTimingBudgetMicroSeconds =
 800722c:	f6a7 04e8 	subw	r4, r7, #2280	; 0x8e8
	if (Status == VL53L0X_ERROR_NONE &&
 8007230:	b92b      	cbnz	r3, 800723e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x46>
		(SchedulerSequenceSteps.TccOn  ||
 8007232:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8007236:	b913      	cbnz	r3, 800723e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x46>
		SchedulerSequenceSteps.MsrcOn ||
 8007238:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800723c:	b1fb      	cbz	r3, 800727e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x86>
		Status = get_sequence_step_timeout(Dev,
 800723e:	466a      	mov	r2, sp
 8007240:	2102      	movs	r1, #2
 8007242:	4630      	mov	r0, r6
 8007244:	f7ff fda8 	bl	8006d98 <get_sequence_step_timeout>
		if (Status != VL53L0X_ERROR_NONE)
 8007248:	bba8      	cbnz	r0, 80072b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
		if (SchedulerSequenceSteps.TccOn) {
 800724a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800724e:	b12b      	cbz	r3, 800725c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x64>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8007250:	9b00      	ldr	r3, [sp, #0]
 8007252:	f203 234e 	addw	r3, r3, #590	; 0x24e
			if (SubTimeout <
 8007256:	429c      	cmp	r4, r3
 8007258:	d9db      	bls.n	8007212 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
				FinalRangeTimingBudgetMicroSeconds -=
 800725a:	1ae4      	subs	r4, r4, r3
		if (SchedulerSequenceSteps.DssOn) {
 800725c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8007260:	b933      	cbnz	r3, 8007270 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x78>
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8007262:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8007266:	b153      	cbz	r3, 800727e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x86>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8007268:	9b00      	ldr	r3, [sp, #0]
 800726a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800726e:	e003      	b.n	8007278 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007270:	9b00      	ldr	r3, [sp, #0]
 8007272:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 8007276:	005b      	lsls	r3, r3, #1
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007278:	42a3      	cmp	r3, r4
 800727a:	d2ca      	bcs.n	8007212 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 800727c:	1ae4      	subs	r4, r4, r3
	if (SchedulerSequenceSteps.PreRangeOn) {
 800727e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8007282:	b15b      	cbz	r3, 800729c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa4>
		Status = get_sequence_step_timeout(Dev,
 8007284:	aa01      	add	r2, sp, #4
 8007286:	2103      	movs	r1, #3
 8007288:	4630      	mov	r0, r6
 800728a:	f7ff fd85 	bl	8006d98 <get_sequence_step_timeout>
		SubTimeout = PreRangeTimeoutMicroSeconds +
 800728e:	9b01      	ldr	r3, [sp, #4]
 8007290:	f503 7325 	add.w	r3, r3, #660	; 0x294
		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007294:	42a3      	cmp	r3, r4
 8007296:	d2bc      	bcs.n	8007212 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
	if (Status == VL53L0X_ERROR_NONE &&
 8007298:	b968      	cbnz	r0, 80072b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800729a:	1ae4      	subs	r4, r4, r3
	if (Status == VL53L0X_ERROR_NONE &&
 800729c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0b8      	beq.n	8007216 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		Status = set_sequence_step_timeout(Dev,
 80072a4:	f2a4 2226 	subw	r2, r4, #550	; 0x226
 80072a8:	2104      	movs	r1, #4
 80072aa:	4630      	mov	r0, r6
 80072ac:	f7ff fdf8 	bl	8006ea0 <set_sequence_step_timeout>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80072b0:	6177      	str	r7, [r6, #20]
		Status = set_sequence_step_timeout(Dev,
 80072b2:	4605      	mov	r5, r0
 80072b4:	e7af      	b.n	8007216 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
 80072b6:	4605      	mov	r5, r0
 80072b8:	e7ad      	b.n	8007216 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>

080072ba <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80072ba:	b570      	push	{r4, r5, r6, lr}
 80072bc:	b086      	sub	sp, #24
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80072be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80072c2:	9302      	str	r3, [sp, #8]
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80072c4:	2300      	movs	r3, #0
 80072c6:	9303      	str	r3, [sp, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80072c8:	f640 3336 	movw	r3, #2870	; 0xb36
 80072cc:	600b      	str	r3, [r1, #0]
{
 80072ce:	460c      	mov	r4, r1

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80072d0:	a904      	add	r1, sp, #16
{
 80072d2:	4606      	mov	r6, r0
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80072d4:	f7fe f96b 	bl	80055ae <VL53L0X_GetSequenceStepEnables>

	if (Status != VL53L0X_ERROR_NONE) {
 80072d8:	4605      	mov	r5, r0
 80072da:	2800      	cmp	r0, #0
 80072dc:	d136      	bne.n	800734c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>
		LOG_FUNCTION_END(Status);
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80072de:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80072e2:	b92b      	cbnz	r3, 80072f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x36>
 80072e4:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80072e8:	b913      	cbnz	r3, 80072f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x36>
		SchedulerSequenceSteps.MsrcOn ||
 80072ea:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80072ee:	b1cb      	cbz	r3, 8007324 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
 80072f0:	aa02      	add	r2, sp, #8
 80072f2:	2102      	movs	r1, #2
 80072f4:	4630      	mov	r0, r6
 80072f6:	f7ff fd4f 	bl	8006d98 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d140      	bne.n	8007380 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
			if (SchedulerSequenceSteps.TccOn) {
 80072fe:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8007302:	b12b      	cbz	r3, 8007310 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x56>
				*pMeasurementTimingBudgetMicroSeconds +=
					MsrcDccTccTimeoutMicroSeconds +
 8007304:	9b02      	ldr	r3, [sp, #8]
 8007306:	f203 224e 	addw	r2, r3, #590	; 0x24e
				*pMeasurementTimingBudgetMicroSeconds +=
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	4413      	add	r3, r2
 800730e:	6023      	str	r3, [r4, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8007310:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8007314:	b1eb      	cbz	r3, 8007352 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x98>
				*pMeasurementTimingBudgetMicroSeconds +=
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8007316:	9b02      	ldr	r3, [sp, #8]
 8007318:	f203 22b2 	addw	r2, r3, #690	; 0x2b2
				*pMeasurementTimingBudgetMicroSeconds +=
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
				*pMeasurementTimingBudgetMicroSeconds +=
 8007322:	6023      	str	r3, [r4, #0]
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007324:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8007328:	b15b      	cbz	r3, 8007342 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x88>
			Status = get_sequence_step_timeout(Dev,
 800732a:	aa03      	add	r2, sp, #12
 800732c:	2103      	movs	r1, #3
 800732e:	4630      	mov	r0, r6
 8007330:	f7ff fd32 	bl	8006d98 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
				PreRangeTimeoutMicroSeconds +
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	f503 7225 	add.w	r2, r3, #660	; 0x294
			*pMeasurementTimingBudgetMicroSeconds +=
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	4413      	add	r3, r2
 800733e:	6023      	str	r3, [r4, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007340:	b9f0      	cbnz	r0, 8007380 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007342:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007346:	b973      	cbnz	r3, 8007366 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xac>
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	6173      	str	r3, [r6, #20]
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800734c:	4628      	mov	r0, r5
 800734e:	b006      	add	sp, #24
 8007350:	bd70      	pop	{r4, r5, r6, pc}
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007352:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0e4      	beq.n	8007324 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
					MsrcDccTccTimeoutMicroSeconds +
 800735a:	9b02      	ldr	r3, [sp, #8]
 800735c:	f503 7225 	add.w	r2, r3, #660	; 0x294
				*pMeasurementTimingBudgetMicroSeconds +=
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	4413      	add	r3, r2
 8007364:	e7dd      	b.n	8007322 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x68>
			Status = get_sequence_step_timeout(Dev,
 8007366:	aa01      	add	r2, sp, #4
 8007368:	2104      	movs	r1, #4
 800736a:	4630      	mov	r0, r6
 800736c:	f7ff fd14 	bl	8006d98 <get_sequence_step_timeout>
				(FinalRangeTimeoutMicroSeconds +
 8007370:	9b01      	ldr	r3, [sp, #4]
 8007372:	f203 2226 	addw	r2, r3, #550	; 0x226
			*pMeasurementTimingBudgetMicroSeconds +=
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	4413      	add	r3, r2
 800737a:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 800737c:	2800      	cmp	r0, #0
 800737e:	d0e3      	beq.n	8007348 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8e>
 8007380:	4605      	mov	r5, r0
 8007382:	e7e3      	b.n	800734c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>

08007384 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8007384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8007386:	2200      	movs	r2, #0
{
 8007388:	4606      	mov	r6, r0
 800738a:	460d      	mov	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800738c:	4610      	mov	r0, r2
 800738e:	af01      	add	r7, sp, #4

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007390:	5cab      	ldrb	r3, [r5, r2]
 8007392:	eb05 0e02 	add.w	lr, r5, r2
 8007396:	b103      	cbz	r3, 800739a <VL53L0X_load_tuning_settings+0x16>
 8007398:	b108      	cbz	r0, 800739e <VL53L0X_load_tuning_settings+0x1a>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800739a:	b003      	add	sp, #12
 800739c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfWrites == 0xFF) {
 800739e:	2bff      	cmp	r3, #255	; 0xff
		Index++;
 80073a0:	f102 0401 	add.w	r4, r2, #1
		if (NumberOfWrites == 0xFF) {
 80073a4:	d12c      	bne.n	8007400 <VL53L0X_load_tuning_settings+0x7c>
			SelectParam = *(pTuningSettingBuffer + Index);
 80073a6:	5d2b      	ldrb	r3, [r5, r4]
			Index++;
 80073a8:	1c94      	adds	r4, r2, #2
			switch (SelectParam) {
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d83a      	bhi.n	8007424 <VL53L0X_load_tuning_settings+0xa0>
 80073ae:	e8df f003 	tbb	[pc, r3]
 80073b2:	0c02      	.short	0x0c02
 80073b4:	1e15      	.short	0x1e15
				msb = *(pTuningSettingBuffer + Index);
 80073b6:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80073b8:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80073bc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 80073c0:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80073c2:	f8a6 3134 	strh.w	r3, [r6, #308]	; 0x134
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80073c6:	4622      	mov	r2, r4
 80073c8:	e7e2      	b.n	8007390 <VL53L0X_load_tuning_settings+0xc>
				msb = *(pTuningSettingBuffer + Index);
 80073ca:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80073cc:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80073d0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 80073d4:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80073d6:	f8a6 3136 	strh.w	r3, [r6, #310]	; 0x136
				break;
 80073da:	e7f4      	b.n	80073c6 <VL53L0X_load_tuning_settings+0x42>
				msb = *(pTuningSettingBuffer + Index);
 80073dc:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80073de:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80073e2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 80073e6:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80073e8:	f8a6 3138 	strh.w	r3, [r6, #312]	; 0x138
				break;
 80073ec:	e7eb      	b.n	80073c6 <VL53L0X_load_tuning_settings+0x42>
				msb = *(pTuningSettingBuffer + Index);
 80073ee:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80073f0:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80073f4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 80073f8:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80073fa:	f8a6 313a 	strh.w	r3, [r6, #314]	; 0x13a
				break;
 80073fe:	e7e2      	b.n	80073c6 <VL53L0X_load_tuning_settings+0x42>
		} else if (NumberOfWrites <= 4) {
 8007400:	2b04      	cmp	r3, #4
 8007402:	d80f      	bhi.n	8007424 <VL53L0X_load_tuning_settings+0xa0>
			Address = *(pTuningSettingBuffer + Index);
 8007404:	5d29      	ldrb	r1, [r5, r4]
			Index++;
 8007406:	3202      	adds	r2, #2
			for (i = 0; i < NumberOfWrites; i++) {
 8007408:	4298      	cmp	r0, r3
 800740a:	db05      	blt.n	8007418 <VL53L0X_load_tuning_settings+0x94>
 800740c:	18d4      	adds	r4, r2, r3
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800740e:	4630      	mov	r0, r6
 8007410:	463a      	mov	r2, r7
 8007412:	f000 fb15 	bl	8007a40 <VL53L0X_WriteMulti>
 8007416:	e7d6      	b.n	80073c6 <VL53L0X_load_tuning_settings+0x42>
				localBuffer[i] = *(pTuningSettingBuffer +
 8007418:	eb0e 0400 	add.w	r4, lr, r0
 800741c:	78a4      	ldrb	r4, [r4, #2]
 800741e:	543c      	strb	r4, [r7, r0]
			for (i = 0; i < NumberOfWrites; i++) {
 8007420:	3001      	adds	r0, #1
 8007422:	e7f1      	b.n	8007408 <VL53L0X_load_tuning_settings+0x84>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007424:	f06f 0003 	mvn.w	r0, #3
 8007428:	e7cd      	b.n	80073c6 <VL53L0X_load_tuning_settings+0x42>

0800742a <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800742a:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800742c:	2300      	movs	r3, #0
{
 800742e:	460e      	mov	r6, r1
	*ptotal_xtalk_rate_mcps = 0;
 8007430:	6013      	str	r3, [r2, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007432:	f10d 0107 	add.w	r1, sp, #7
{
 8007436:	4605      	mov	r5, r0
 8007438:	4614      	mov	r4, r2
	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800743a:	f7fe f906 	bl	800564a <VL53L0X_GetXTalkCompensationEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 800743e:	b940      	cbnz	r0, 8007452 <VL53L0X_get_total_xtalk_rate+0x28>

		if (xtalkCompEnable) {
 8007440:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007444:	b12b      	cbz	r3, 8007452 <VL53L0X_get_total_xtalk_rate+0x28>
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8007446:	8ab2      	ldrh	r2, [r6, #20]
			totalXtalkMegaCps =
 8007448:	6a2b      	ldr	r3, [r5, #32]
 800744a:	4353      	muls	r3, r2
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800744c:	3380      	adds	r3, #128	; 0x80
 800744e:	0a1b      	lsrs	r3, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007450:	6023      	str	r3, [r4, #0]
		}
	}

	return Status;
}
 8007452:	b002      	add	sp, #8
 8007454:	bd70      	pop	{r4, r5, r6, pc}

08007456 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007456:	b513      	push	{r0, r1, r4, lr}
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007458:	68cb      	ldr	r3, [r1, #12]
	*ptotal_signal_rate_mcps =
 800745a:	6013      	str	r3, [r2, #0]
{
 800745c:	4614      	mov	r4, r2

	Status = VL53L0X_get_total_xtalk_rate(
 800745e:	aa01      	add	r2, sp, #4
 8007460:	f7ff ffe3 	bl	800742a <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007464:	b918      	cbnz	r0, 800746e <VL53L0X_get_total_signal_rate+0x18>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	9a01      	ldr	r2, [sp, #4]
 800746a:	4413      	add	r3, r2
 800746c:	6023      	str	r3, [r4, #0]

	return Status;
}
 800746e:	b002      	add	sp, #8
 8007470:	bd10      	pop	{r4, pc}
	...

08007474 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
 8007476:	f8b0 4150 	ldrh.w	r4, [r0, #336]	; 0x150

	dmaxCalSignalRateRtn_mcps =
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800747a:	f8d0 5154 	ldr.w	r5, [r0, #340]	; 0x154
{
 800747e:	9e07      	ldr	r6, [sp, #28]
 8007480:	9f08      	ldr	r7, [sp, #32]
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007482:	4365      	muls	r5, r4

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8007484:	3580      	adds	r5, #128	; 0x80
 8007486:	0a2d      	lsrs	r5, r5, #8
	SignalAt0mm *= dmaxCalRange_mm;
 8007488:	4365      	muls	r5, r4

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
 800748a:	b152      	cbz	r2, 80074a2 <VL53L0X_calc_dmax+0x2e>
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800748c:	0854      	lsrs	r4, r2, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800748e:	eb04 2481 	add.w	r4, r4, r1, lsl #10

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8007492:	fbb4 f4f2 	udiv	r4, r4, r2

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8007496:	eb04 0444 	add.w	r4, r4, r4, lsl #1

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800749a:	4364      	muls	r4, r4

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800749c:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 80074a0:	0c22      	lsrs	r2, r4, #16
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80074a2:	9c06      	ldr	r4, [sp, #24]
 80074a4:	435c      	muls	r4, r3
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80074a6:	f506 4100 	add.w	r1, r6, #32768	; 0x8000
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80074aa:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 80074ae:	0c24      	lsrs	r4, r4, #16
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80074b0:	0c09      	lsrs	r1, r1, #16
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80074b2:	fb04 f304 	mul.w	r3, r4, r4
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80074b6:	3103      	adds	r1, #3
 80074b8:	2406      	movs	r4, #6
 80074ba:	fbb1 f1f4 	udiv	r1, r1, r4
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80074be:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3

	if (sigmaEstP2Tmp > 0xffff) {
 80074c2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80074c6:	bf3f      	itttt	cc
 80074c8:	3603      	addcc	r6, #3
 80074ca:	fbb6 f6f4 	udivcc	r6, r6, r4
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80074ce:	ebc6 06c6 	rsbcc	r6, r6, r6, lsl #3

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80074d2:	f506 4100 	addcc.w	r1, r6, #32768	; 0x8000
 80074d6:	bf36      	itet	cc
 80074d8:	0c0c      	lsrcc	r4, r1, #16
		minSignalNeeded_p3 = 0xfff00000;
 80074da:	4918      	ldrcs	r1, [pc, #96]	; (800753c <VL53L0X_calc_dmax+0xc8>)

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80074dc:	fb04 f104 	mulcc.w	r1, r4, r4
	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80074e0:	f105 0020 	add.w	r0, r5, #32
	minSignalNeeded += (peakVcselDuration_us/2);
 80074e4:	eb03 0457 	add.w	r4, r3, r7, lsr #1
 80074e8:	440c      	add	r4, r1
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80074ea:	0980      	lsrs	r0, r0, #6
	minSignalNeeded /= peakVcselDuration_us;
 80074ec:	fbb4 f4f7 	udiv	r4, r4, r7
	minSignalNeeded <<= 14;
 80074f0:	03a4      	lsls	r4, r4, #14
	minSignalNeeded /= minSignalNeeded_p4;
 80074f2:	23fe      	movs	r3, #254	; 0xfe
	minSignalNeeded += (minSignalNeeded_p4/2);
 80074f4:	347f      	adds	r4, #127	; 0x7f
	minSignalNeeded /= minSignalNeeded_p4;
 80074f6:	fbb4 f4f3 	udiv	r4, r4, r3
	minSignalNeeded *= minSignalNeeded_p1;
 80074fa:	4354      	muls	r4, r2
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80074fc:	f7ff f92e 	bl	800675c <VL53L0X_isqrt>
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007500:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8007504:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8007508:	fbb4 f4f6 	udiv	r4, r4, r6
	minSignalNeeded <<= 4;
 800750c:	0124      	lsls	r4, r4, #4
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800750e:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007512:	4607      	mov	r7, r0
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007514:	fbb4 f6f6 	udiv	r6, r4, r6

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007518:	b136      	cbz	r6, 8007528 <VL53L0X_calc_dmax+0xb4>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800751a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800751e:	fbb4 f4f3 	udiv	r4, r4, r3
 8007522:	442c      	add	r4, r5
 8007524:	fbb4 f6f6 	udiv	r6, r4, r6
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007528:	4630      	mov	r0, r6
 800752a:	f7ff f917 	bl	800675c <VL53L0X_isqrt>
 800752e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007530:	4287      	cmp	r7, r0
 8007532:	bf94      	ite	ls
 8007534:	601f      	strls	r7, [r3, #0]
 8007536:	6018      	strhi	r0, [r3, #0]
		*pdmax_mm = dmaxAmbient;

	LOG_FUNCTION_END(Status);

	return Status;
}
 8007538:	2000      	movs	r0, #0
 800753a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800753c:	fff00000 	.word	0xfff00000

08007540 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	b08d      	sub	sp, #52	; 0x34
 8007546:	4606      	mov	r6, r0
 8007548:	9305      	str	r3, [sp, #20]
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800754a:	6a03      	ldr	r3, [r0, #32]
 800754c:	930a      	str	r3, [sp, #40]	; 0x28
{
 800754e:	4689      	mov	r9, r1
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;

	correctedSignalRate_mcps =
 8007550:	68cb      	ldr	r3, [r1, #12]
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007552:	690f      	ldr	r7, [r1, #16]
	correctedSignalRate_mcps =
 8007554:	9306      	str	r3, [sp, #24]
{
 8007556:	4692      	mov	sl, r2
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007558:	aa0b      	add	r2, sp, #44	; 0x2c
 800755a:	f7ff ff7c 	bl	8007456 <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800755e:	aa0a      	add	r2, sp, #40	; 0x28
 8007560:	4649      	mov	r1, r9
 8007562:	4630      	mov	r0, r6
 8007564:	f7ff ff61 	bl	800742a <VL53L0X_get_total_xtalk_rate>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
 8007568:	4605      	mov	r5, r0
 800756a:	bb60      	cbnz	r0, 80075c6 <VL53L0X_calc_sigma_estimate+0x86>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800756c:	f896 40e0 	ldrb.w	r4, [r6, #224]	; 0xe0
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007570:	f8d6 10dc 	ldr.w	r1, [r6, #220]	; 0xdc
 8007574:	4622      	mov	r2, r4
 8007576:	4630      	mov	r0, r6
 8007578:	f7ff fbe6 	bl	8006d48 <VL53L0X_calc_timeout_mclks>
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800757c:	f8d6 10e4 	ldr.w	r1, [r6, #228]	; 0xe4
 8007580:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007584:	4683      	mov	fp, r0
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007586:	4630      	mov	r0, r6
 8007588:	f7ff fbde 	bl	8006d48 <VL53L0X_calc_timeout_mclks>
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800758c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800758e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
 8007592:	2c08      	cmp	r4, #8
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007594:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8007598:	fb04 f803 	mul.w	r8, r4, r3
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800759c:	f508 4800 	add.w	r8, r8, #32768	; 0x8000
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80075a0:	f103 0380 	add.w	r3, r3, #128	; 0x80

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80075a4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
			vcselWidth = 2;
 80075a8:	bf14      	ite	ne
 80075aa:	2103      	movne	r1, #3
 80075ac:	2102      	moveq	r1, #2
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
 80075ae:	ea5f 4e18 	movs.w	lr, r8, lsr #16
		totalSignalRate_mcps <<= 8;
 80075b2:	9204      	str	r2, [sp, #16]
 80075b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80075b6:	4a54      	ldr	r2, [pc, #336]	; (8007708 <VL53L0X_calc_sigma_estimate+0x1c8>)
	if (peakSignalRate_kcps == 0) {
 80075b8:	d109      	bne.n	80075ce <VL53L0X_calc_sigma_estimate+0x8e>
		*pSigmaEstimate = cSigmaEstMax;
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
 80075ba:	9b05      	ldr	r3, [sp, #20]
		*pSigmaEstimate = cSigmaEstMax;
 80075bc:	f8ca 2000 	str.w	r2, [sl]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80075c0:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
		*pDmax_mm = 0;
 80075c4:	601d      	str	r5, [r3, #0]
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80075c6:	4628      	mov	r0, r5
 80075c8:	b00d      	add	sp, #52	; 0x34
 80075ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80075ce:	4458      	add	r0, fp
		peakVcselDuration_us = vcselWidth * 2048 *
 80075d0:	02c0      	lsls	r0, r0, #11
 80075d2:	4341      	muls	r1, r0
		peakVcselDuration_us *= cPllPeriod_ps;
 80075d4:	f240 6b77 	movw	fp, #1655	; 0x677
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80075d8:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80075dc:	0a1b      	lsrs	r3, r3, #8
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80075de:	fbb1 f1f4 	udiv	r1, r1, r4
		peakVcselDuration_us *= cPllPeriod_ps;
 80075e2:	fb0b fb01 	mul.w	fp, fp, r1
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80075e6:	f50b 7bfa 	add.w	fp, fp, #500	; 0x1f4
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80075ea:	4948      	ldr	r1, [pc, #288]	; (800770c <VL53L0X_calc_sigma_estimate+0x1cc>)
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80075ec:	fbbb fbf4 	udiv	fp, fp, r4
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80075f0:	fb0b f303 	mul.w	r3, fp, r3
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80075f4:	3380      	adds	r3, #128	; 0x80
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80075f6:	4367      	muls	r7, r4
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80075f8:	fb04 f50c 	mul.w	r5, r4, ip
		if (vcselTotalEventsRtn < 1)
 80075fc:	0a1b      	lsrs	r3, r3, #8
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80075fe:	ea07 0701 	and.w	r7, r7, r1
 8007602:	fbb7 fefe 	udiv	lr, r7, lr
 8007606:	4f42      	ldr	r7, [pc, #264]	; (8007710 <VL53L0X_calc_sigma_estimate+0x1d0>)
 8007608:	9209      	str	r2, [sp, #36]	; 0x24
			vcselTotalEventsRtn = 1;
 800760a:	bf08      	it	eq
 800760c:	2301      	moveq	r3, #1
 800760e:	f5b5 1f48 	cmp.w	r5, #3276800	; 0x320000
 8007612:	bf28      	it	cs
 8007614:	f44f 1548 	movcs.w	r5, #3276800	; 0x320000
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007618:	200c      	movs	r0, #12
 800761a:	45be      	cmp	lr, r7
 800761c:	bf28      	it	cs
 800761e:	46be      	movcs	lr, r7
 8007620:	4358      	muls	r0, r3
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007622:	f44f 7716 	mov.w	r7, #600	; 0x258
 8007626:	fb07 f70e 	mul.w	r7, r7, lr
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800762a:	9108      	str	r1, [sp, #32]
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800762c:	f7ff f896 	bl	800675c <VL53L0X_isqrt>
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007630:	9908      	ldr	r1, [sp, #32]
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007632:	9007      	str	r0, [sp, #28]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007634:	ea08 0801 	and.w	r8, r8, r1
 8007638:	eba8 0005 	sub.w	r0, r8, r5
			xTalkCompRate_kcps) + 500)/1000;
 800763c:	f505 75fa 	add.w	r5, r5, #500	; 0x1f4
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007640:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 8007644:	4b33      	ldr	r3, [pc, #204]	; (8007714 <VL53L0X_calc_sigma_estimate+0x1d4>)
			xTalkCompRate_kcps) + 500)/1000;
 8007646:	44a8      	add	r8, r5
			xTalkCompRate_kcps) + 500)/1000;
 8007648:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800764c:	fbb8 f8f4 	udiv	r8, r8, r4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007650:	fbb0 f0f4 	udiv	r0, r0, r4
		diff1_mcps <<= 8;
 8007654:	0200      	lsls	r0, r0, #8
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007656:	fbb0 f0f8 	udiv	r0, r0, r8
		xTalkCorrection <<= 8;
 800765a:	0205      	lsls	r5, r0, #8
		pwMult *= ((1 << 16) - xTalkCorrection);
 800765c:	f5c5 3580 	rsb	r5, r5, #65536	; 0x10000
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007660:	4359      	muls	r1, r3
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8007662:	f241 235c 	movw	r3, #4700	; 0x125c
 8007666:	fbb1 f3f3 	udiv	r3, r1, r3
		pwMult *= ((1 << 16) - xTalkCorrection);
 800766a:	435d      	muls	r5, r3
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800766c:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 8007670:	0c2d      	lsrs	r5, r5, #16
		pwMult += (1 << 16);
 8007672:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
		pwMult >>= 1;
 8007676:	086d      	lsrs	r5, r5, #1
		pwMult = pwMult * pwMult;
 8007678:	436d      	muls	r5, r5
		pwMult >>= 14;
 800767a:	0bad      	lsrs	r5, r5, #14
		sqr1 = pwMult * sigmaEstimateP1;
 800767c:	f44f 7848 	mov.w	r8, #800	; 0x320
 8007680:	fb08 f005 	mul.w	r0, r8, r5
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007684:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007688:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
		sqr2 = (sqr2 + 0x8000) >> 16;
 800768c:	0c1b      	lsrs	r3, r3, #16
		sqr2 *= sqr2;
 800768e:	435b      	muls	r3, r3
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007690:	0c00      	lsrs	r0, r0, #16
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007692:	fb00 3000 	mla	r0, r0, r0, r3
 8007696:	f7ff f861 	bl	800675c <VL53L0X_isqrt>
		sqrtResult_centi_ns <<= 16;
 800769a:	0400      	lsls	r0, r0, #16
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800769c:	2364      	movs	r3, #100	; 0x64
 800769e:	3032      	adds	r0, #50	; 0x32
 80076a0:	fbb0 f0f3 	udiv	r0, r0, r3
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80076a4:	9b07      	ldr	r3, [sp, #28]
		sigmaEstRtn		 += 5000;
 80076a6:	f640 31b5 	movw	r1, #2997	; 0xbb5
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80076aa:	005b      	lsls	r3, r3, #1
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80076ac:	fbb0 f0f3 	udiv	r0, r0, r3
		sigmaEstRtn		 += 5000;
 80076b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80076b4:	fb01 3000 	mla	r0, r1, r0, r3
		sigmaEstRtn		 /= 10000;
 80076b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80076bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80076c0:	f5b0 4f70 	cmp.w	r0, #61440	; 0xf000
 80076c4:	bf28      	it	cs
 80076c6:	f44f 4070 	movcs.w	r0, #61440	; 0xf000
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80076ca:	f241 1304 	movw	r3, #4356	; 0x1104
 80076ce:	fb00 3000 	mla	r0, r0, r0, r3
 80076d2:	f7ff f843 	bl	800675c <VL53L0X_isqrt>
 80076d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
		Status = VL53L0X_calc_dmax(
 80076d8:	9b05      	ldr	r3, [sp, #20]
 80076da:	9303      	str	r3, [sp, #12]
		sigmaEstimate	 = 1000 * sqrtResult;
 80076dc:	4360      	muls	r0, r4
 80076de:	4282      	cmp	r2, r0
 80076e0:	bf28      	it	cs
 80076e2:	4602      	movcs	r2, r0
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80076e4:	f8ca 2000 	str.w	r2, [sl]
		Status = VL53L0X_calc_dmax(
 80076e8:	462b      	mov	r3, r5
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80076ea:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 80076ee:	f8cd b008 	str.w	fp, [sp, #8]
 80076f2:	9701      	str	r7, [sp, #4]
 80076f4:	f8cd 8000 	str.w	r8, [sp]
 80076f8:	9a06      	ldr	r2, [sp, #24]
 80076fa:	9904      	ldr	r1, [sp, #16]
 80076fc:	4630      	mov	r0, r6
 80076fe:	f7ff feb9 	bl	8007474 <VL53L0X_calc_dmax>
 8007702:	4605      	mov	r5, r0
 8007704:	e75f      	b.n	80075c6 <VL53L0X_calc_sigma_estimate+0x86>
 8007706:	bf00      	nop
 8007708:	028f87ae 	.word	0x028f87ae
 800770c:	ffff0000 	.word	0xffff0000
 8007710:	00666666 	.word	0x00666666
 8007714:	0006999a 	.word	0x0006999a

08007718 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	b08b      	sub	sp, #44	; 0x2c
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800771e:	ea4f 09d1 	mov.w	r9, r1, lsr #3
{
 8007722:	469b      	mov	fp, r3
	uint8_t SigmaLimitCheckEnable = 0;
 8007724:	2300      	movs	r3, #0
 8007726:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800772a:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800772e:	f88d 3010 	strb.w	r3, [sp, #16]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007732:	f88d 3011 	strb.w	r3, [sp, #17]
	uint16_t tmpWord = 0;
 8007736:	f8ad 3012 	strh.w	r3, [sp, #18]
	uint32_t Dmax_mm = 0;
 800773a:	9309      	str	r3, [sp, #36]	; 0x24
	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800773c:	f009 070f 	and.w	r7, r9, #15

	if (DeviceRangeStatusInternal == 0 ||
 8007740:	f24f 03a1 	movw	r3, #61601	; 0xf0a1
 8007744:	40fb      	lsrs	r3, r7
{
 8007746:	9201      	str	r2, [sp, #4]
		DeviceRangeStatusInternal == 12 ||
		DeviceRangeStatusInternal == 13 ||
		DeviceRangeStatusInternal == 14 ||
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007748:	f003 0301 	and.w	r3, r3, #1
		NoneFlag = 0;
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800774c:	2201      	movs	r2, #1
 800774e:	21ff      	movs	r1, #255	; 0xff
{
 8007750:	4605      	mov	r5, r0
 8007752:	9e15      	ldr	r6, [sp, #84]	; 0x54
		NoneFlag = 1;
 8007754:	9300      	str	r3, [sp, #0]
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007756:	f000 f9ed 	bl	8007b34 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 800775a:	b928      	cbnz	r0, 8007768 <VL53L0X_get_pal_range_status+0x50>
		Status = VL53L0X_RdWord(Dev,
 800775c:	f10d 0212 	add.w	r2, sp, #18
 8007760:	21b6      	movs	r1, #182	; 0xb6
 8007762:	4628      	mov	r0, r5
 8007764:	f000 f9a0 	bl	8007aa8 <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007768:	f8bd a012 	ldrh.w	sl, [sp, #18]
 800776c:	ea4f 2a4a 	mov.w	sl, sl, lsl #9

	if (Status == VL53L0X_ERROR_NONE)
 8007770:	b920      	cbnz	r0, 800777c <VL53L0X_get_pal_range_status+0x64>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007772:	4602      	mov	r2, r0
 8007774:	21ff      	movs	r1, #255	; 0xff
 8007776:	4628      	mov	r0, r5
 8007778:	f000 f9dc 	bl	8007b34 <VL53L0X_WrByte>

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800777c:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007780:	b928      	cbnz	r0, 800778e <VL53L0X_get_pal_range_status+0x76>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007782:	4601      	mov	r1, r0
 8007784:	f10d 020e 	add.w	r2, sp, #14
 8007788:	4628      	mov	r0, r5
 800778a:	f7fd ffb8 	bl	80056fe <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800778e:	f89d 400e 	ldrb.w	r4, [sp, #14]
 8007792:	b1d4      	cbz	r4, 80077ca <VL53L0X_get_pal_range_status+0xb2>
 8007794:	2800      	cmp	r0, #0
 8007796:	f040 8091 	bne.w	80078bc <VL53L0X_get_pal_range_status+0x1a4>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800779a:	ab09      	add	r3, sp, #36	; 0x24
 800779c:	aa05      	add	r2, sp, #20
 800779e:	9914      	ldr	r1, [sp, #80]	; 0x50
 80077a0:	4628      	mov	r0, r5
 80077a2:	f7ff fecd 	bl	8007540 <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f040 8088 	bne.w	80078bc <VL53L0X_get_pal_range_status+0x1a4>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80077ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b0:	8153      	strh	r3, [r2, #10]

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80077b2:	4601      	mov	r1, r0
 80077b4:	aa06      	add	r2, sp, #24
 80077b6:	4628      	mov	r0, r5
 80077b8:	f7fd ffdc 	bl	8005774 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80077bc:	9c06      	ldr	r4, [sp, #24]
 80077be:	b124      	cbz	r4, 80077ca <VL53L0X_get_pal_range_status+0xb2>
	uint8_t SigmaLimitflag = 0;
 80077c0:	9b05      	ldr	r3, [sp, #20]
 80077c2:	429c      	cmp	r4, r3
 80077c4:	bf2c      	ite	cs
 80077c6:	2400      	movcs	r4, #0
 80077c8:	2401      	movcc	r4, #1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80077ca:	b920      	cbnz	r0, 80077d6 <VL53L0X_get_pal_range_status+0xbe>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80077cc:	aa04      	add	r2, sp, #16
 80077ce:	2102      	movs	r1, #2
 80077d0:	4628      	mov	r0, r5
 80077d2:	f7fd ff94 	bl	80056fe <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80077d6:	f89d 8010 	ldrb.w	r8, [sp, #16]
 80077da:	f1b8 0f00 	cmp.w	r8, #0
 80077de:	d00f      	beq.n	8007800 <VL53L0X_get_pal_range_status+0xe8>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d16f      	bne.n	80078c4 <VL53L0X_get_pal_range_status+0x1ac>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80077e4:	aa07      	add	r2, sp, #28
 80077e6:	2102      	movs	r1, #2
 80077e8:	4628      	mov	r0, r5
 80077ea:	f7fd ffc3 	bl	8005774 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 80077ee:	9b07      	ldr	r3, [sp, #28]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d065      	beq.n	80078c0 <VL53L0X_get_pal_range_status+0x1a8>
	uint8_t SignalRefClipflag = 0;
 80077f4:	459a      	cmp	sl, r3
 80077f6:	bf94      	ite	ls
 80077f8:	f04f 0800 	movls.w	r8, #0
 80077fc:	f04f 0801 	movhi.w	r8, #1
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007800:	b928      	cbnz	r0, 800780e <VL53L0X_get_pal_range_status+0xf6>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007802:	f10d 0211 	add.w	r2, sp, #17
 8007806:	2103      	movs	r1, #3
 8007808:	4628      	mov	r0, r5
 800780a:	f7fd ff78 	bl	80056fe <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800780e:	f89d a011 	ldrb.w	sl, [sp, #17]
 8007812:	f1ba 0f00 	cmp.w	sl, #0
 8007816:	d016      	beq.n	8007846 <VL53L0X_get_pal_range_status+0x12e>
 8007818:	2800      	cmp	r0, #0
 800781a:	d17c      	bne.n	8007916 <VL53L0X_get_pal_range_status+0x1fe>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800781c:	f1bb 0f00 	cmp.w	fp, #0
 8007820:	d003      	beq.n	800782a <VL53L0X_get_pal_range_status+0x112>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8007822:	9b01      	ldr	r3, [sp, #4]
 8007824:	021b      	lsls	r3, r3, #8
 8007826:	fbb3 fbfb 	udiv	fp, r3, fp
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800782a:	aa08      	add	r2, sp, #32
 800782c:	2103      	movs	r1, #3
 800782e:	4628      	mov	r0, r5
 8007830:	f7fd ffa0 	bl	8005774 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8007834:	9a08      	ldr	r2, [sp, #32]
 8007836:	2a00      	cmp	r2, #0
 8007838:	d047      	beq.n	80078ca <VL53L0X_get_pal_range_status+0x1b2>
	uint8_t RangeIgnoreThresholdflag = 0;
 800783a:	4593      	cmp	fp, r2
 800783c:	bf2c      	ite	cs
 800783e:	f04f 0a00 	movcs.w	sl, #0
 8007842:	f04f 0a01 	movcc.w	sl, #1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007846:	b920      	cbnz	r0, 8007852 <VL53L0X_get_pal_range_status+0x13a>
		if (NoneFlag == 1) {
 8007848:	9b00      	ldr	r3, [sp, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d03f      	beq.n	80078ce <VL53L0X_get_pal_range_status+0x1b6>
			*pPalRangeStatus = 255;	 /* NONE */
 800784e:	22ff      	movs	r2, #255	; 0xff
			*pPalRangeStatus = 3;  /* Min range */
		} else if (DeviceRangeStatusInternal == 4 ||
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
		} else if (SigmaLimitflag == 1) {
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007850:	7032      	strb	r2, [r6, #0]
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8007852:	7832      	ldrb	r2, [r6, #0]
 8007854:	b90a      	cbnz	r2, 800785a <VL53L0X_get_pal_range_status+0x142>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8007856:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007858:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800785a:	f10d 020f 	add.w	r2, sp, #15
 800785e:	2101      	movs	r1, #1
 8007860:	4628      	mov	r0, r5
 8007862:	f7fd ff4c 	bl	80056fe <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8007866:	bb30      	cbnz	r0, 80078b6 <VL53L0X_get_pal_range_status+0x19e>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8007868:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800786c:	2a00      	cmp	r2, #0
 800786e:	bf08      	it	eq
 8007870:	2401      	moveq	r4, #1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8007872:	2f04      	cmp	r7, #4
 8007874:	bf1d      	ittte	ne
 8007876:	f89d 200f 	ldrbne.w	r2, [sp, #15]
 800787a:	fab2 f282 	clzne	r2, r2
 800787e:	0952      	lsrne	r2, r2, #5
 8007880:	2201      	moveq	r2, #1
				(SignalRateFinalRangeLimitCheckEnable == 0))
			Temp8 = 1;
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007882:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007886:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800788a:	2a00      	cmp	r2, #0
 800788c:	bf08      	it	eq
 800788e:	f04f 0801 	moveq.w	r8, #1
					(SignalRefClipflag == 1))
			Temp8 = 1;
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007892:	f008 0301 	and.w	r3, r8, #1
 8007896:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800789a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	bf08      	it	eq
 80078a2:	f04f 0a01 	moveq.w	sl, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80078a6:	f004 0401 	and.w	r4, r4, #1
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80078aa:	f00a 0a01 	and.w	sl, sl, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80078ae:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80078b2:	f885 a031 	strb.w	sl, [r5, #49]	; 0x31
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 80078b6:	b00b      	add	sp, #44	; 0x2c
 80078b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078bc:	2400      	movs	r4, #0
 80078be:	e78a      	b.n	80077d6 <VL53L0X_get_pal_range_status+0xbe>
	uint8_t SignalRefClipflag = 0;
 80078c0:	4698      	mov	r8, r3
 80078c2:	e79d      	b.n	8007800 <VL53L0X_get_pal_range_status+0xe8>
 80078c4:	f04f 0800 	mov.w	r8, #0
 80078c8:	e7a1      	b.n	800780e <VL53L0X_get_pal_range_status+0xf6>
	uint8_t RangeIgnoreThresholdflag = 0;
 80078ca:	4692      	mov	sl, r2
 80078cc:	e7bb      	b.n	8007846 <VL53L0X_get_pal_range_status+0x12e>
		} else if (DeviceRangeStatusInternal == 1 ||
 80078ce:	1e7a      	subs	r2, r7, #1
 80078d0:	2a02      	cmp	r2, #2
 80078d2:	d801      	bhi.n	80078d8 <VL53L0X_get_pal_range_status+0x1c0>
			*pPalRangeStatus = 5; /* HW fail */
 80078d4:	2205      	movs	r2, #5
 80078d6:	e7bb      	b.n	8007850 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 6 ||
 80078d8:	2f06      	cmp	r7, #6
 80078da:	d001      	beq.n	80078e0 <VL53L0X_get_pal_range_status+0x1c8>
 80078dc:	2f09      	cmp	r7, #9
 80078de:	d101      	bne.n	80078e4 <VL53L0X_get_pal_range_status+0x1cc>
			*pPalRangeStatus = 4;  /* Phase fail */
 80078e0:	2204      	movs	r2, #4
 80078e2:	e7b5      	b.n	8007850 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 8 ||
 80078e4:	f009 090d 	and.w	r9, r9, #13
 80078e8:	f1b9 0f08 	cmp.w	r9, #8
 80078ec:	d002      	beq.n	80078f4 <VL53L0X_get_pal_range_status+0x1dc>
					DeviceRangeStatusInternal == 10 ||
 80078ee:	f1b8 0f01 	cmp.w	r8, #1
 80078f2:	d101      	bne.n	80078f8 <VL53L0X_get_pal_range_status+0x1e0>
			*pPalRangeStatus = 3;  /* Min range */
 80078f4:	2203      	movs	r2, #3
 80078f6:	e7ab      	b.n	8007850 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 4 ||
 80078f8:	2f04      	cmp	r7, #4
 80078fa:	d002      	beq.n	8007902 <VL53L0X_get_pal_range_status+0x1ea>
 80078fc:	f1ba 0f01 	cmp.w	sl, #1
 8007900:	d101      	bne.n	8007906 <VL53L0X_get_pal_range_status+0x1ee>
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007902:	2202      	movs	r2, #2
 8007904:	e7a4      	b.n	8007850 <VL53L0X_get_pal_range_status+0x138>
		} else if (SigmaLimitflag == 1) {
 8007906:	2c01      	cmp	r4, #1
 8007908:	d101      	bne.n	800790e <VL53L0X_get_pal_range_status+0x1f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800790a:	2201      	movs	r2, #1
 800790c:	e7a0      	b.n	8007850 <VL53L0X_get_pal_range_status+0x138>
			*pPalRangeStatus = 0; /* Range Valid */
 800790e:	2200      	movs	r2, #0
 8007910:	7032      	strb	r2, [r6, #0]
 8007912:	46a2      	mov	sl, r4
 8007914:	e79d      	b.n	8007852 <VL53L0X_get_pal_range_status+0x13a>
	uint8_t RangeIgnoreThresholdflag = 0;
 8007916:	f04f 0a00 	mov.w	sl, #0
 800791a:	e79a      	b.n	8007852 <VL53L0X_get_pal_range_status+0x13a>

0800791c <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791e:	460f      	mov	r7, r1
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 8007920:	2102      	movs	r1, #2
{
 8007922:	4606      	mov	r6, r0
 8007924:	4614      	mov	r4, r2
	Status = VL53L0X_get_info_from_device(Dev, 2);
 8007926:	f7fe ff4f 	bl	80067c8 <VL53L0X_get_info_from_device>

	if (Status == VL53L0X_ERROR_NONE) {
 800792a:	4605      	mov	r5, r0
 800792c:	b940      	cbnz	r0, 8007940 <VL53L0X_check_part_used+0x24>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);

	if (ModuleIdInt == 0) {
 800792e:	f896 30f1 	ldrb.w	r3, [r6, #241]	; 0xf1
 8007932:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8007936:	b92b      	cbnz	r3, 8007944 <VL53L0X_check_part_used+0x28>
		*Revision = 0;
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 8007938:	4905      	ldr	r1, [pc, #20]	; (8007950 <VL53L0X_check_part_used+0x34>)
		*Revision = 0;
 800793a:	703d      	strb	r5, [r7, #0]
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800793c:	f000 ff12 	bl	8008764 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8007940:	4628      	mov	r0, r5
 8007942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8007944:	f896 30f2 	ldrb.w	r3, [r6, #242]	; 0xf2
 8007948:	703b      	strb	r3, [r7, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800794a:	f106 01f3 	add.w	r1, r6, #243	; 0xf3
 800794e:	e7f5      	b.n	800793c <VL53L0X_check_part_used+0x20>
 8007950:	0800ac80 	.word	0x0800ac80

08007954 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007956:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8007958:	460a      	mov	r2, r1
 800795a:	f10d 0107 	add.w	r1, sp, #7
{
 800795e:	4605      	mov	r5, r0
	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8007960:	f7ff ffdc 	bl	800791c <VL53L0X_check_part_used>

	if (Status == VL53L0X_ERROR_NONE) {
 8007964:	bb00      	cbnz	r0, 80079a8 <VL53L0X_get_device_info+0x54>
		if (Revision == 0) {
 8007966:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800796a:	b9fb      	cbnz	r3, 80079ac <VL53L0X_get_device_info+0x58>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800796c:	4915      	ldr	r1, [pc, #84]	; (80079c4 <VL53L0X_get_device_info+0x70>)
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800796e:	4620      	mov	r0, r4
 8007970:	f000 fef8 	bl	8008764 <strcpy>
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 8007974:	4914      	ldr	r1, [pc, #80]	; (80079c8 <VL53L0X_get_device_info+0x74>)
 8007976:	f104 0020 	add.w	r0, r4, #32
 800797a:	f000 fef3 	bl	8008764 <strcpy>
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800797e:	f104 0260 	add.w	r2, r4, #96	; 0x60
 8007982:	21c0      	movs	r1, #192	; 0xc0
 8007984:	4628      	mov	r0, r5
 8007986:	f000 f846 	bl	8007a16 <VL53L0X_RdByte>
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800798a:	b968      	cbnz	r0, 80079a8 <VL53L0X_get_device_info+0x54>
		Status = VL53L0X_RdByte(Dev,
 800798c:	f10d 0206 	add.w	r2, sp, #6
 8007990:	21c2      	movs	r1, #194	; 0xc2
 8007992:	4628      	mov	r0, r5
 8007994:	f000 f83f 	bl	8007a16 <VL53L0X_RdByte>
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 8007998:	2301      	movs	r3, #1
 800799a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800799e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80079a2:	091b      	lsrs	r3, r3, #4
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 80079a4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	}

	return Status;
}
 80079a8:	b003      	add	sp, #12
 80079aa:	bd30      	pop	{r4, r5, pc}
		} else if ((Revision <= 34) && (Revision != 32)) {
 80079ac:	2b22      	cmp	r3, #34	; 0x22
 80079ae:	d803      	bhi.n	80079b8 <VL53L0X_get_device_info+0x64>
 80079b0:	2b20      	cmp	r3, #32
 80079b2:	d003      	beq.n	80079bc <VL53L0X_get_device_info+0x68>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80079b4:	4905      	ldr	r1, [pc, #20]	; (80079cc <VL53L0X_get_device_info+0x78>)
 80079b6:	e7da      	b.n	800796e <VL53L0X_get_device_info+0x1a>
		} else if (Revision < 39) {
 80079b8:	2b26      	cmp	r3, #38	; 0x26
 80079ba:	d801      	bhi.n	80079c0 <VL53L0X_get_device_info+0x6c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80079bc:	4904      	ldr	r1, [pc, #16]	; (80079d0 <VL53L0X_get_device_info+0x7c>)
 80079be:	e7d6      	b.n	800796e <VL53L0X_get_device_info+0x1a>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80079c0:	4904      	ldr	r1, [pc, #16]	; (80079d4 <VL53L0X_get_device_info+0x80>)
 80079c2:	e7d4      	b.n	800796e <VL53L0X_get_device_info+0x1a>
 80079c4:	0800ad68 	.word	0x0800ad68
 80079c8:	0800ada1 	.word	0x0800ada1
 80079cc:	0800ad74 	.word	0x0800ad74
 80079d0:	0800ad80 	.word	0x0800ad80
 80079d4:	0800ad8c 	.word	0x0800ad8c

080079d8 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80079d8:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80079da:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80079de:	f890 415c 	ldrb.w	r4, [r0, #348]	; 0x15c
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 80079e8:	b293      	uxth	r3, r2
 80079ea:	460a      	mov	r2, r1
 80079ec:	4621      	mov	r1, r4
 80079ee:	f7fa fc27 	bl	8002240 <HAL_I2C_Master_Transmit>
    
    return status;
}
 80079f2:	b002      	add	sp, #8
 80079f4:	bd10      	pop	{r4, pc}

080079f6 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80079f6:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80079f8:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80079fc:	f890 415c 	ldrb.w	r4, [r0, #348]	; 0x15c
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8007a06:	b293      	uxth	r3, r2
 8007a08:	460a      	mov	r2, r1
 8007a0a:	f044 0101 	orr.w	r1, r4, #1
 8007a0e:	f7fa fcab 	bl	8002368 <HAL_I2C_Master_Receive>
    
    return status;
}
 8007a12:	b002      	add	sp, #8
 8007a14:	bd10      	pop	{r4, pc}

08007a16 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8007a16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a18:	ab02      	add	r3, sp, #8
 8007a1a:	4615      	mov	r5, r2
 8007a1c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8007a20:	2201      	movs	r2, #1
 8007a22:	4619      	mov	r1, r3
VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8007a24:	4604      	mov	r4, r0
    status_int = _I2CWrite(Dev, &index, 1);
 8007a26:	f7ff ffd7 	bl	80079d8 <_I2CWrite>
    
    if( status_int ){
 8007a2a:	b928      	cbnz	r0, 8007a38 <VL53L0X_RdByte+0x22>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, data, 1);
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4620      	mov	r0, r4
 8007a32:	f7ff ffe0 	bl	80079f6 <_I2CRead>
    
    if (status_int != 0) {
 8007a36:	b108      	cbz	r0, 8007a3c <VL53L0X_RdByte+0x26>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007a38:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 8007a3c:	b003      	add	sp, #12
 8007a3e:	bd30      	pop	{r4, r5, pc}

08007a40 <VL53L0X_WriteMulti>:
// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    
    if (count > sizeof(_I2CBuffer) - 1) {
 8007a40:	2b3f      	cmp	r3, #63	; 0x3f
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a44:	460f      	mov	r7, r1
 8007a46:	4606      	mov	r6, r0
 8007a48:	4611      	mov	r1, r2
 8007a4a:	461c      	mov	r4, r3
    if (count > sizeof(_I2CBuffer) - 1) {
 8007a4c:	d811      	bhi.n	8007a72 <VL53L0X_WriteMulti+0x32>
        return VL53L0X_ERROR_INVALID_PARAMS;
    }
    
    _I2CBuffer[0] = index;
 8007a4e:	4d0a      	ldr	r5, [pc, #40]	; (8007a78 <VL53L0X_WriteMulti+0x38>)
 8007a50:	4628      	mov	r0, r5
    memcpy(&_I2CBuffer[1], pdata, count);
 8007a52:	461a      	mov	r2, r3
    _I2CBuffer[0] = index;
 8007a54:	f800 7b01 	strb.w	r7, [r0], #1
    memcpy(&_I2CBuffer[1], pdata, count);
 8007a58:	f000 f97c 	bl	8007d54 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8007a5c:	1c62      	adds	r2, r4, #1
 8007a5e:	4629      	mov	r1, r5
 8007a60:	4630      	mov	r0, r6
 8007a62:	f7ff ffb9 	bl	80079d8 <_I2CWrite>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007a66:	2800      	cmp	r0, #0
 8007a68:	bf0c      	ite	eq
 8007a6a:	2000      	moveq	r0, #0
 8007a6c:	f06f 0013 	mvnne.w	r0, #19
 8007a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return VL53L0X_ERROR_INVALID_PARAMS;
 8007a72:	f06f 0003 	mvn.w	r0, #3
    }
    
    return Status;
}
 8007a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a78:	20001026 	.word	0x20001026

08007a7c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a7e:	ac02      	add	r4, sp, #8
 8007a80:	4616      	mov	r6, r2
 8007a82:	f804 1d01 	strb.w	r1, [r4, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 8007a86:	2201      	movs	r2, #1
 8007a88:	4621      	mov	r1, r4
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	461f      	mov	r7, r3
    status_int = _I2CWrite(Dev, &index, 1);
 8007a8e:	f7ff ffa3 	bl	80079d8 <_I2CWrite>
    
    if (status_int != 0) {
 8007a92:	b928      	cbnz	r0, 8007aa0 <VL53L0X_ReadMulti+0x24>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 8007a94:	463a      	mov	r2, r7
 8007a96:	4631      	mov	r1, r6
 8007a98:	4628      	mov	r0, r5
 8007a9a:	f7ff ffac 	bl	80079f6 <_I2CRead>
    
    if (status_int != 0) {
 8007a9e:	b108      	cbz	r0, 8007aa4 <VL53L0X_ReadMulti+0x28>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007aa0:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 8007aa4:	b003      	add	sp, #12
 8007aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007aa8 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8007aa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aaa:	ab02      	add	r3, sp, #8
 8007aac:	4615      	mov	r5, r2
 8007aae:	f803 1d01 	strb.w	r1, [r3, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	4619      	mov	r1, r3
VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8007ab6:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 8007ab8:	f7ff ff8e 	bl	80079d8 <_I2CWrite>

    if( status_int ){
 8007abc:	b118      	cbz	r0, 8007ac6 <VL53L0X_RdWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007abe:	f06f 0013 	mvn.w	r0, #19
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
done:
    return Status;
}
 8007ac2:	b002      	add	sp, #8
 8007ac4:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8007ac6:	4c07      	ldr	r4, [pc, #28]	; (8007ae4 <VL53L0X_RdWord+0x3c>)
 8007ac8:	2202      	movs	r2, #2
 8007aca:	4621      	mov	r1, r4
 8007acc:	4630      	mov	r0, r6
 8007ace:	f7ff ff92 	bl	80079f6 <_I2CRead>
    if (status_int != 0) {
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d1f3      	bne.n	8007abe <VL53L0X_RdWord+0x16>
    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8007ad6:	7822      	ldrb	r2, [r4, #0]
 8007ad8:	7863      	ldrb	r3, [r4, #1]
 8007ada:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007ade:	802b      	strh	r3, [r5, #0]
 8007ae0:	e7ef      	b.n	8007ac2 <VL53L0X_RdWord+0x1a>
 8007ae2:	bf00      	nop
 8007ae4:	20001026 	.word	0x20001026

08007ae8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8007ae8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aea:	ab02      	add	r3, sp, #8
 8007aec:	4615      	mov	r5, r2
 8007aee:	f803 1d01 	strb.w	r1, [r3, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8007af2:	2201      	movs	r2, #1
 8007af4:	4619      	mov	r1, r3
VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8007af6:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 8007af8:	f7ff ff6e 	bl	80079d8 <_I2CWrite>
    
    if (status_int != 0) {
 8007afc:	b118      	cbz	r0, 8007b06 <VL53L0X_RdDWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007afe:	f06f 0013 	mvn.w	r0, #19

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];

done:
    return Status;
}
 8007b02:	b002      	add	sp, #8
 8007b04:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8007b06:	4c0a      	ldr	r4, [pc, #40]	; (8007b30 <VL53L0X_RdDWord+0x48>)
 8007b08:	2204      	movs	r2, #4
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f7ff ff72 	bl	80079f6 <_I2CRead>
    if (status_int != 0) {
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d1f3      	bne.n	8007afe <VL53L0X_RdDWord+0x16>
    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8007b16:	7863      	ldrb	r3, [r4, #1]
 8007b18:	7822      	ldrb	r2, [r4, #0]
 8007b1a:	041b      	lsls	r3, r3, #16
 8007b1c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8007b20:	78e2      	ldrb	r2, [r4, #3]
 8007b22:	4413      	add	r3, r2
 8007b24:	78a2      	ldrb	r2, [r4, #2]
 8007b26:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007b2a:	602b      	str	r3, [r5, #0]
 8007b2c:	e7e9      	b.n	8007b02 <VL53L0X_RdDWord+0x1a>
 8007b2e:	bf00      	nop
 8007b30:	20001026 	.word	0x20001026

08007b34 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8007b34:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 8007b36:	4b06      	ldr	r3, [pc, #24]	; (8007b50 <VL53L0X_WrByte+0x1c>)
 8007b38:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data;
 8007b3a:	705a      	strb	r2, [r3, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f7ff ff4a 	bl	80079d8 <_I2CWrite>
    
    if (status_int != 0) {
 8007b44:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 8007b46:	bf14      	ite	ne
 8007b48:	f06f 0013 	mvnne.w	r0, #19
 8007b4c:	2000      	moveq	r0, #0
 8007b4e:	bd08      	pop	{r3, pc}
 8007b50:	20001026 	.word	0x20001026

08007b54 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8007b54:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 8007b56:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <VL53L0X_WrWord+0x20>)
 8007b58:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data >> 8;
 8007b5a:	0a11      	lsrs	r1, r2, #8
 8007b5c:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8007b5e:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8007b60:	4619      	mov	r1, r3
 8007b62:	2203      	movs	r2, #3
 8007b64:	f7ff ff38 	bl	80079d8 <_I2CWrite>
    
    if (status_int != 0) {
 8007b68:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 8007b6a:	bf14      	ite	ne
 8007b6c:	f06f 0013 	mvnne.w	r0, #19
 8007b70:	2000      	moveq	r0, #0
 8007b72:	bd08      	pop	{r3, pc}
 8007b74:	20001026 	.word	0x20001026

08007b78 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8007b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b7a:	4615      	mov	r5, r2
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8007b7c:	f10d 0207 	add.w	r2, sp, #7
VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8007b80:	4606      	mov	r6, r0
 8007b82:	460f      	mov	r7, r1
 8007b84:	461c      	mov	r4, r3
    Status = VL53L0X_RdByte(Dev, index, &data);
 8007b86:	f7ff ff46 	bl	8007a16 <VL53L0X_RdByte>
    
    if (Status) {
 8007b8a:	b948      	cbnz	r0, 8007ba0 <VL53L0X_UpdateByte+0x28>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 8007b8c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007b90:	402a      	ands	r2, r5
 8007b92:	4322      	orrs	r2, r4
    Status = VL53L0X_WrByte(Dev, index, data);
 8007b94:	4639      	mov	r1, r7
 8007b96:	4630      	mov	r0, r6
    data = (data & AndData) | OrData;
 8007b98:	f88d 2007 	strb.w	r2, [sp, #7]
    Status = VL53L0X_WrByte(Dev, index, data);
 8007b9c:	f7ff ffca 	bl	8007b34 <VL53L0X_WrByte>
done:
    return Status;
}
 8007ba0:	b003      	add	sp, #12
 8007ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ba4 <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8007ba4:	b508      	push	{r3, lr}
    VL53L0X_Error status = VL53L0X_ERROR_NONE;

    // do nothing
    VL53L0X_OsDelay();
 8007ba6:	2002      	movs	r0, #2
 8007ba8:	f7f9 fe98 	bl	80018dc <HAL_Delay>
    return status;
}
 8007bac:	2000      	movs	r0, #0
 8007bae:	bd08      	pop	{r3, pc}

08007bb0 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t Dev)
{
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	b507      	push	{r0, r1, r2, lr}
 8007bb4:	f10d 0e10 	add.w	lr, sp, #16
 8007bb8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	uint32_t timingBudget = 33000;
	uint8_t preRangeVcselPeriod = 14;
	uint8_t finalRangeVcselPeriod = 10;

                          
  if( Dev.Present){
 8007bbc:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d064      	beq.n	8007c8c <SetupSingleShot+0xdc>
    status=VL53L0X_StaticInit(&Dev);
 8007bc2:	4670      	mov	r0, lr
 8007bc4:	f7fe f934 	bl	8005e30 <VL53L0X_StaticInit>
    if( status ){
 8007bc8:	b110      	cbz	r0, 8007bd0 <SetupSingleShot+0x20>
      printf("VL53L0X_StaticInit failed\n");
 8007bca:	4833      	ldr	r0, [pc, #204]	; (8007c98 <SetupSingleShot+0xe8>)
 8007bcc:	f000 fd9e 	bl	800870c <puts>
    }
    
    
    status = VL53L0X_PerformRefCalibration(&Dev, &VhvSettings, &PhaseCal);
 8007bd0:	f10d 0202 	add.w	r2, sp, #2
 8007bd4:	f10d 0101 	add.w	r1, sp, #1
 8007bd8:	a804      	add	r0, sp, #16
 8007bda:	f7fd fee9 	bl	80059b0 <VL53L0X_PerformRefCalibration>
    if( status ){
 8007bde:	b110      	cbz	r0, 8007be6 <SetupSingleShot+0x36>
      printf("VL53L0X_PerformRefCalibration failed\n");
 8007be0:	482e      	ldr	r0, [pc, #184]	; (8007c9c <SetupSingleShot+0xec>)
 8007be2:	f000 fd93 	bl	800870c <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(&Dev, &refSpadCount, &isApertureSpads);
 8007be6:	f10d 0203 	add.w	r2, sp, #3
 8007bea:	a901      	add	r1, sp, #4
 8007bec:	a804      	add	r0, sp, #16
 8007bee:	f7fe fa24 	bl	800603a <VL53L0X_PerformRefSpadManagement>
    if( status ){
 8007bf2:	b110      	cbz	r0, 8007bfa <SetupSingleShot+0x4a>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 8007bf4:	482a      	ldr	r0, [pc, #168]	; (8007ca0 <SetupSingleShot+0xf0>)
 8007bf6:	f000 fd89 	bl	800870c <puts>
    }
    
    status = VL53L0X_SetDeviceMode(&Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	a804      	add	r0, sp, #16
 8007bfe:	f7fd fc63 	bl	80054c8 <VL53L0X_SetDeviceMode>
    if( status ){
 8007c02:	b110      	cbz	r0, 8007c0a <SetupSingleShot+0x5a>
      printf("VL53L0X_SetDeviceMode failed\n");
 8007c04:	4827      	ldr	r0, [pc, #156]	; (8007ca4 <SetupSingleShot+0xf4>)
 8007c06:	f000 fd81 	bl	800870c <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	a804      	add	r0, sp, #16
 8007c10:	f7fd fd36 	bl	8005680 <VL53L0X_SetLimitCheckEnable>
    if( status ){
 8007c14:	b110      	cbz	r0, 8007c1c <SetupSingleShot+0x6c>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8007c16:	4824      	ldr	r0, [pc, #144]	; (8007ca8 <SetupSingleShot+0xf8>)
 8007c18:	f000 fd78 	bl	800870c <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	4611      	mov	r1, r2
 8007c20:	a804      	add	r0, sp, #16
 8007c22:	f7fd fd2d 	bl	8005680 <VL53L0X_SetLimitCheckEnable>
    if( status ){
 8007c26:	b110      	cbz	r0, 8007c2e <SetupSingleShot+0x7e>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8007c28:	481f      	ldr	r0, [pc, #124]	; (8007ca8 <SetupSingleShot+0xf8>)
 8007c2a:	f000 fd6f 	bl	800870c <puts>
    sigmaLimit = (FixPoint1616_t)(60*65536);
    timingBudget = 33000;
    preRangeVcselPeriod = 18;
    finalRangeVcselPeriod = 14;
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8007c2e:	f641 1299 	movw	r2, #6553	; 0x1999
 8007c32:	2101      	movs	r1, #1
 8007c34:	a804      	add	r0, sp, #16
 8007c36:	f7fd fd70 	bl	800571a <VL53L0X_SetLimitCheckValue>
    
    if( status ){
 8007c3a:	b110      	cbz	r0, 8007c42 <SetupSingleShot+0x92>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8007c3c:	481b      	ldr	r0, [pc, #108]	; (8007cac <SetupSingleShot+0xfc>)
 8007c3e:	f000 fd65 	bl	800870c <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8007c42:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007c46:	2100      	movs	r1, #0
 8007c48:	a804      	add	r0, sp, #16
 8007c4a:	f7fd fd66 	bl	800571a <VL53L0X_SetLimitCheckValue>
    if( status ){
 8007c4e:	b110      	cbz	r0, 8007c56 <SetupSingleShot+0xa6>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8007c50:	4816      	ldr	r0, [pc, #88]	; (8007cac <SetupSingleShot+0xfc>)
 8007c52:	f000 fd5b 	bl	800870c <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&Dev,  timingBudget);
 8007c56:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8007c5a:	a804      	add	r0, sp, #16
 8007c5c:	f7fd fc50 	bl	8005500 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    if( status ){
 8007c60:	b110      	cbz	r0, 8007c68 <SetupSingleShot+0xb8>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 8007c62:	4813      	ldr	r0, [pc, #76]	; (8007cb0 <SetupSingleShot+0x100>)
 8007c64:	f000 fd52 	bl	800870c <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 8007c68:	2212      	movs	r2, #18
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	a804      	add	r0, sp, #16
 8007c6e:	f7fd fc49 	bl	8005504 <VL53L0X_SetVcselPulsePeriod>
    if( status ){
 8007c72:	b110      	cbz	r0, 8007c7a <SetupSingleShot+0xca>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8007c74:	480f      	ldr	r0, [pc, #60]	; (8007cb4 <SetupSingleShot+0x104>)
 8007c76:	f000 fd49 	bl	800870c <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8007c7a:	220e      	movs	r2, #14
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	a804      	add	r0, sp, #16
 8007c80:	f7fd fc40 	bl	8005504 <VL53L0X_SetVcselPulsePeriod>
    if( status ){
 8007c84:	b110      	cbz	r0, 8007c8c <SetupSingleShot+0xdc>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8007c86:	480b      	ldr	r0, [pc, #44]	; (8007cb4 <SetupSingleShot+0x104>)
 8007c88:	f000 fd40 	bl	800870c <puts>
    }
    
    Dev.LeakyFirst=1;
  }
}
 8007c8c:	b003      	add	sp, #12
 8007c8e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c92:	b004      	add	sp, #16
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	0800ada9 	.word	0x0800ada9
 8007c9c:	0800adc3 	.word	0x0800adc3
 8007ca0:	0800ade8 	.word	0x0800ade8
 8007ca4:	0800ae10 	.word	0x0800ae10
 8007ca8:	0800ae2d 	.word	0x0800ae2d
 8007cac:	0800ae50 	.word	0x0800ae50
 8007cb0:	0800ae72 	.word	0x0800ae72
 8007cb4:	0800aea8 	.word	0x0800aea8

08007cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007cf0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007cbc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007cbe:	e003      	b.n	8007cc8 <LoopCopyDataInit>

08007cc0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007cc0:	4b0c      	ldr	r3, [pc, #48]	; (8007cf4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007cc2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007cc4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007cc6:	3104      	adds	r1, #4

08007cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007cc8:	480b      	ldr	r0, [pc, #44]	; (8007cf8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007cca:	4b0c      	ldr	r3, [pc, #48]	; (8007cfc <LoopForever+0xe>)
	adds	r2, r0, r1
 8007ccc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007cce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007cd0:	d3f6      	bcc.n	8007cc0 <CopyDataInit>
	ldr	r2, =_sbss
 8007cd2:	4a0b      	ldr	r2, [pc, #44]	; (8007d00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007cd4:	e002      	b.n	8007cdc <LoopFillZerobss>

08007cd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007cd6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007cd8:	f842 3b04 	str.w	r3, [r2], #4

08007cdc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007cdc:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <LoopForever+0x16>)
	cmp	r2, r3
 8007cde:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007ce0:	d3f9      	bcc.n	8007cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007ce2:	f7fd fbcb 	bl	800547c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007ce6:	f000 f811 	bl	8007d0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007cea:	f7fc fd09 	bl	8004700 <main>

08007cee <LoopForever>:

LoopForever:
    b LoopForever
 8007cee:	e7fe      	b.n	8007cee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007cf0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007cf4:	0800b1d8 	.word	0x0800b1d8
	ldr	r0, =_sdata
 8007cf8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007cfc:	200006e0 	.word	0x200006e0
	ldr	r2, =_sbss
 8007d00:	200006e0 	.word	0x200006e0
	ldr	r3, = _ebss
 8007d04:	2000106c 	.word	0x2000106c

08007d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007d08:	e7fe      	b.n	8007d08 <ADC1_2_IRQHandler>
	...

08007d0c <__libc_init_array>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	4e0d      	ldr	r6, [pc, #52]	; (8007d44 <__libc_init_array+0x38>)
 8007d10:	4c0d      	ldr	r4, [pc, #52]	; (8007d48 <__libc_init_array+0x3c>)
 8007d12:	1ba4      	subs	r4, r4, r6
 8007d14:	10a4      	asrs	r4, r4, #2
 8007d16:	2500      	movs	r5, #0
 8007d18:	42a5      	cmp	r5, r4
 8007d1a:	d109      	bne.n	8007d30 <__libc_init_array+0x24>
 8007d1c:	4e0b      	ldr	r6, [pc, #44]	; (8007d4c <__libc_init_array+0x40>)
 8007d1e:	4c0c      	ldr	r4, [pc, #48]	; (8007d50 <__libc_init_array+0x44>)
 8007d20:	f002 ff08 	bl	800ab34 <_init>
 8007d24:	1ba4      	subs	r4, r4, r6
 8007d26:	10a4      	asrs	r4, r4, #2
 8007d28:	2500      	movs	r5, #0
 8007d2a:	42a5      	cmp	r5, r4
 8007d2c:	d105      	bne.n	8007d3a <__libc_init_array+0x2e>
 8007d2e:	bd70      	pop	{r4, r5, r6, pc}
 8007d30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d34:	4798      	blx	r3
 8007d36:	3501      	adds	r5, #1
 8007d38:	e7ee      	b.n	8007d18 <__libc_init_array+0xc>
 8007d3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d3e:	4798      	blx	r3
 8007d40:	3501      	adds	r5, #1
 8007d42:	e7f2      	b.n	8007d2a <__libc_init_array+0x1e>
 8007d44:	0800b1d0 	.word	0x0800b1d0
 8007d48:	0800b1d0 	.word	0x0800b1d0
 8007d4c:	0800b1d0 	.word	0x0800b1d0
 8007d50:	0800b1d4 	.word	0x0800b1d4

08007d54 <memcpy>:
 8007d54:	b510      	push	{r4, lr}
 8007d56:	1e43      	subs	r3, r0, #1
 8007d58:	440a      	add	r2, r1
 8007d5a:	4291      	cmp	r1, r2
 8007d5c:	d100      	bne.n	8007d60 <memcpy+0xc>
 8007d5e:	bd10      	pop	{r4, pc}
 8007d60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d68:	e7f7      	b.n	8007d5a <memcpy+0x6>

08007d6a <memset>:
 8007d6a:	4402      	add	r2, r0
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d100      	bne.n	8007d74 <memset+0xa>
 8007d72:	4770      	bx	lr
 8007d74:	f803 1b01 	strb.w	r1, [r3], #1
 8007d78:	e7f9      	b.n	8007d6e <memset+0x4>

08007d7a <__cvt>:
 8007d7a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d7e:	ec55 4b10 	vmov	r4, r5, d0
 8007d82:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007d84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d88:	2d00      	cmp	r5, #0
 8007d8a:	460e      	mov	r6, r1
 8007d8c:	4691      	mov	r9, r2
 8007d8e:	4619      	mov	r1, r3
 8007d90:	bfb8      	it	lt
 8007d92:	4622      	movlt	r2, r4
 8007d94:	462b      	mov	r3, r5
 8007d96:	f027 0720 	bic.w	r7, r7, #32
 8007d9a:	bfbb      	ittet	lt
 8007d9c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007da0:	461d      	movlt	r5, r3
 8007da2:	2300      	movge	r3, #0
 8007da4:	232d      	movlt	r3, #45	; 0x2d
 8007da6:	bfb8      	it	lt
 8007da8:	4614      	movlt	r4, r2
 8007daa:	2f46      	cmp	r7, #70	; 0x46
 8007dac:	700b      	strb	r3, [r1, #0]
 8007dae:	d004      	beq.n	8007dba <__cvt+0x40>
 8007db0:	2f45      	cmp	r7, #69	; 0x45
 8007db2:	d100      	bne.n	8007db6 <__cvt+0x3c>
 8007db4:	3601      	adds	r6, #1
 8007db6:	2102      	movs	r1, #2
 8007db8:	e000      	b.n	8007dbc <__cvt+0x42>
 8007dba:	2103      	movs	r1, #3
 8007dbc:	ab03      	add	r3, sp, #12
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	ab02      	add	r3, sp, #8
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	4632      	mov	r2, r6
 8007dc6:	4653      	mov	r3, sl
 8007dc8:	ec45 4b10 	vmov	d0, r4, r5
 8007dcc:	f000 fe20 	bl	8008a10 <_dtoa_r>
 8007dd0:	2f47      	cmp	r7, #71	; 0x47
 8007dd2:	4680      	mov	r8, r0
 8007dd4:	d102      	bne.n	8007ddc <__cvt+0x62>
 8007dd6:	f019 0f01 	tst.w	r9, #1
 8007dda:	d026      	beq.n	8007e2a <__cvt+0xb0>
 8007ddc:	2f46      	cmp	r7, #70	; 0x46
 8007dde:	eb08 0906 	add.w	r9, r8, r6
 8007de2:	d111      	bne.n	8007e08 <__cvt+0x8e>
 8007de4:	f898 3000 	ldrb.w	r3, [r8]
 8007de8:	2b30      	cmp	r3, #48	; 0x30
 8007dea:	d10a      	bne.n	8007e02 <__cvt+0x88>
 8007dec:	2200      	movs	r2, #0
 8007dee:	2300      	movs	r3, #0
 8007df0:	4620      	mov	r0, r4
 8007df2:	4629      	mov	r1, r5
 8007df4:	f7f8 fe64 	bl	8000ac0 <__aeabi_dcmpeq>
 8007df8:	b918      	cbnz	r0, 8007e02 <__cvt+0x88>
 8007dfa:	f1c6 0601 	rsb	r6, r6, #1
 8007dfe:	f8ca 6000 	str.w	r6, [sl]
 8007e02:	f8da 3000 	ldr.w	r3, [sl]
 8007e06:	4499      	add	r9, r3
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	4629      	mov	r1, r5
 8007e10:	f7f8 fe56 	bl	8000ac0 <__aeabi_dcmpeq>
 8007e14:	b938      	cbnz	r0, 8007e26 <__cvt+0xac>
 8007e16:	2230      	movs	r2, #48	; 0x30
 8007e18:	9b03      	ldr	r3, [sp, #12]
 8007e1a:	4599      	cmp	r9, r3
 8007e1c:	d905      	bls.n	8007e2a <__cvt+0xb0>
 8007e1e:	1c59      	adds	r1, r3, #1
 8007e20:	9103      	str	r1, [sp, #12]
 8007e22:	701a      	strb	r2, [r3, #0]
 8007e24:	e7f8      	b.n	8007e18 <__cvt+0x9e>
 8007e26:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e2a:	9b03      	ldr	r3, [sp, #12]
 8007e2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e2e:	eba3 0308 	sub.w	r3, r3, r8
 8007e32:	4640      	mov	r0, r8
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	b004      	add	sp, #16
 8007e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007e3c <__exponent>:
 8007e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2900      	cmp	r1, #0
 8007e42:	bfb8      	it	lt
 8007e44:	4249      	neglt	r1, r1
 8007e46:	f803 2b02 	strb.w	r2, [r3], #2
 8007e4a:	bfb4      	ite	lt
 8007e4c:	222d      	movlt	r2, #45	; 0x2d
 8007e4e:	222b      	movge	r2, #43	; 0x2b
 8007e50:	2909      	cmp	r1, #9
 8007e52:	7042      	strb	r2, [r0, #1]
 8007e54:	dd20      	ble.n	8007e98 <__exponent+0x5c>
 8007e56:	f10d 0207 	add.w	r2, sp, #7
 8007e5a:	4617      	mov	r7, r2
 8007e5c:	260a      	movs	r6, #10
 8007e5e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007e62:	fb06 1115 	mls	r1, r6, r5, r1
 8007e66:	3130      	adds	r1, #48	; 0x30
 8007e68:	2d09      	cmp	r5, #9
 8007e6a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007e6e:	f102 34ff 	add.w	r4, r2, #4294967295
 8007e72:	4629      	mov	r1, r5
 8007e74:	dc09      	bgt.n	8007e8a <__exponent+0x4e>
 8007e76:	3130      	adds	r1, #48	; 0x30
 8007e78:	3a02      	subs	r2, #2
 8007e7a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e7e:	42ba      	cmp	r2, r7
 8007e80:	461c      	mov	r4, r3
 8007e82:	d304      	bcc.n	8007e8e <__exponent+0x52>
 8007e84:	1a20      	subs	r0, r4, r0
 8007e86:	b003      	add	sp, #12
 8007e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e8a:	4622      	mov	r2, r4
 8007e8c:	e7e7      	b.n	8007e5e <__exponent+0x22>
 8007e8e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8007e92:	f803 1b01 	strb.w	r1, [r3], #1
 8007e96:	e7f2      	b.n	8007e7e <__exponent+0x42>
 8007e98:	2230      	movs	r2, #48	; 0x30
 8007e9a:	461c      	mov	r4, r3
 8007e9c:	4411      	add	r1, r2
 8007e9e:	f804 2b02 	strb.w	r2, [r4], #2
 8007ea2:	7059      	strb	r1, [r3, #1]
 8007ea4:	e7ee      	b.n	8007e84 <__exponent+0x48>
	...

08007ea8 <_printf_float>:
 8007ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eac:	b08d      	sub	sp, #52	; 0x34
 8007eae:	460c      	mov	r4, r1
 8007eb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007eb4:	4616      	mov	r6, r2
 8007eb6:	461f      	mov	r7, r3
 8007eb8:	4605      	mov	r5, r0
 8007eba:	f001 fcf3 	bl	80098a4 <_localeconv_r>
 8007ebe:	6803      	ldr	r3, [r0, #0]
 8007ec0:	9304      	str	r3, [sp, #16]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7f8 f984 	bl	80001d0 <strlen>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	930a      	str	r3, [sp, #40]	; 0x28
 8007ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ed0:	9005      	str	r0, [sp, #20]
 8007ed2:	3307      	adds	r3, #7
 8007ed4:	f023 0307 	bic.w	r3, r3, #7
 8007ed8:	f103 0208 	add.w	r2, r3, #8
 8007edc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ee0:	f8d4 b000 	ldr.w	fp, [r4]
 8007ee4:	f8c8 2000 	str.w	r2, [r8]
 8007ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007ef0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007ef4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ef8:	9307      	str	r3, [sp, #28]
 8007efa:	f8cd 8018 	str.w	r8, [sp, #24]
 8007efe:	f04f 32ff 	mov.w	r2, #4294967295
 8007f02:	4ba5      	ldr	r3, [pc, #660]	; (8008198 <_printf_float+0x2f0>)
 8007f04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f08:	f7f8 fe0c 	bl	8000b24 <__aeabi_dcmpun>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	f040 81fb 	bne.w	8008308 <_printf_float+0x460>
 8007f12:	f04f 32ff 	mov.w	r2, #4294967295
 8007f16:	4ba0      	ldr	r3, [pc, #640]	; (8008198 <_printf_float+0x2f0>)
 8007f18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f1c:	f7f8 fde4 	bl	8000ae8 <__aeabi_dcmple>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	f040 81f1 	bne.w	8008308 <_printf_float+0x460>
 8007f26:	2200      	movs	r2, #0
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	4649      	mov	r1, r9
 8007f2e:	f7f8 fdd1 	bl	8000ad4 <__aeabi_dcmplt>
 8007f32:	b110      	cbz	r0, 8007f3a <_printf_float+0x92>
 8007f34:	232d      	movs	r3, #45	; 0x2d
 8007f36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f3a:	4b98      	ldr	r3, [pc, #608]	; (800819c <_printf_float+0x2f4>)
 8007f3c:	4a98      	ldr	r2, [pc, #608]	; (80081a0 <_printf_float+0x2f8>)
 8007f3e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007f42:	bf8c      	ite	hi
 8007f44:	4690      	movhi	r8, r2
 8007f46:	4698      	movls	r8, r3
 8007f48:	2303      	movs	r3, #3
 8007f4a:	f02b 0204 	bic.w	r2, fp, #4
 8007f4e:	6123      	str	r3, [r4, #16]
 8007f50:	6022      	str	r2, [r4, #0]
 8007f52:	f04f 0900 	mov.w	r9, #0
 8007f56:	9700      	str	r7, [sp, #0]
 8007f58:	4633      	mov	r3, r6
 8007f5a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f000 f9e2 	bl	8008328 <_printf_common>
 8007f64:	3001      	adds	r0, #1
 8007f66:	f040 8093 	bne.w	8008090 <_printf_float+0x1e8>
 8007f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6e:	b00d      	add	sp, #52	; 0x34
 8007f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f74:	6861      	ldr	r1, [r4, #4]
 8007f76:	1c4b      	adds	r3, r1, #1
 8007f78:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007f7c:	d13f      	bne.n	8007ffe <_printf_float+0x156>
 8007f7e:	2306      	movs	r3, #6
 8007f80:	6063      	str	r3, [r4, #4]
 8007f82:	2300      	movs	r3, #0
 8007f84:	9303      	str	r3, [sp, #12]
 8007f86:	ab0a      	add	r3, sp, #40	; 0x28
 8007f88:	9302      	str	r3, [sp, #8]
 8007f8a:	ab09      	add	r3, sp, #36	; 0x24
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	ec49 8b10 	vmov	d0, r8, r9
 8007f92:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f96:	6022      	str	r2, [r4, #0]
 8007f98:	f8cd a004 	str.w	sl, [sp, #4]
 8007f9c:	6861      	ldr	r1, [r4, #4]
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f7ff feeb 	bl	8007d7a <__cvt>
 8007fa4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007fa8:	2b47      	cmp	r3, #71	; 0x47
 8007faa:	4680      	mov	r8, r0
 8007fac:	d109      	bne.n	8007fc2 <_printf_float+0x11a>
 8007fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb0:	1cd8      	adds	r0, r3, #3
 8007fb2:	db02      	blt.n	8007fba <_printf_float+0x112>
 8007fb4:	6862      	ldr	r2, [r4, #4]
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	dd57      	ble.n	800806a <_printf_float+0x1c2>
 8007fba:	f1aa 0a02 	sub.w	sl, sl, #2
 8007fbe:	fa5f fa8a 	uxtb.w	sl, sl
 8007fc2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007fc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fc8:	d834      	bhi.n	8008034 <_printf_float+0x18c>
 8007fca:	3901      	subs	r1, #1
 8007fcc:	4652      	mov	r2, sl
 8007fce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007fd2:	9109      	str	r1, [sp, #36]	; 0x24
 8007fd4:	f7ff ff32 	bl	8007e3c <__exponent>
 8007fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fda:	1883      	adds	r3, r0, r2
 8007fdc:	2a01      	cmp	r2, #1
 8007fde:	4681      	mov	r9, r0
 8007fe0:	6123      	str	r3, [r4, #16]
 8007fe2:	dc02      	bgt.n	8007fea <_printf_float+0x142>
 8007fe4:	6822      	ldr	r2, [r4, #0]
 8007fe6:	07d1      	lsls	r1, r2, #31
 8007fe8:	d501      	bpl.n	8007fee <_printf_float+0x146>
 8007fea:	3301      	adds	r3, #1
 8007fec:	6123      	str	r3, [r4, #16]
 8007fee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d0af      	beq.n	8007f56 <_printf_float+0xae>
 8007ff6:	232d      	movs	r3, #45	; 0x2d
 8007ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ffc:	e7ab      	b.n	8007f56 <_printf_float+0xae>
 8007ffe:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008002:	d002      	beq.n	800800a <_printf_float+0x162>
 8008004:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008008:	d1bb      	bne.n	8007f82 <_printf_float+0xda>
 800800a:	b189      	cbz	r1, 8008030 <_printf_float+0x188>
 800800c:	2300      	movs	r3, #0
 800800e:	9303      	str	r3, [sp, #12]
 8008010:	ab0a      	add	r3, sp, #40	; 0x28
 8008012:	9302      	str	r3, [sp, #8]
 8008014:	ab09      	add	r3, sp, #36	; 0x24
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	ec49 8b10 	vmov	d0, r8, r9
 800801c:	6022      	str	r2, [r4, #0]
 800801e:	f8cd a004 	str.w	sl, [sp, #4]
 8008022:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008026:	4628      	mov	r0, r5
 8008028:	f7ff fea7 	bl	8007d7a <__cvt>
 800802c:	4680      	mov	r8, r0
 800802e:	e7be      	b.n	8007fae <_printf_float+0x106>
 8008030:	2301      	movs	r3, #1
 8008032:	e7a5      	b.n	8007f80 <_printf_float+0xd8>
 8008034:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008038:	d119      	bne.n	800806e <_printf_float+0x1c6>
 800803a:	2900      	cmp	r1, #0
 800803c:	6863      	ldr	r3, [r4, #4]
 800803e:	dd0c      	ble.n	800805a <_printf_float+0x1b2>
 8008040:	6121      	str	r1, [r4, #16]
 8008042:	b913      	cbnz	r3, 800804a <_printf_float+0x1a2>
 8008044:	6822      	ldr	r2, [r4, #0]
 8008046:	07d2      	lsls	r2, r2, #31
 8008048:	d502      	bpl.n	8008050 <_printf_float+0x1a8>
 800804a:	3301      	adds	r3, #1
 800804c:	440b      	add	r3, r1
 800804e:	6123      	str	r3, [r4, #16]
 8008050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008052:	65a3      	str	r3, [r4, #88]	; 0x58
 8008054:	f04f 0900 	mov.w	r9, #0
 8008058:	e7c9      	b.n	8007fee <_printf_float+0x146>
 800805a:	b913      	cbnz	r3, 8008062 <_printf_float+0x1ba>
 800805c:	6822      	ldr	r2, [r4, #0]
 800805e:	07d0      	lsls	r0, r2, #31
 8008060:	d501      	bpl.n	8008066 <_printf_float+0x1be>
 8008062:	3302      	adds	r3, #2
 8008064:	e7f3      	b.n	800804e <_printf_float+0x1a6>
 8008066:	2301      	movs	r3, #1
 8008068:	e7f1      	b.n	800804e <_printf_float+0x1a6>
 800806a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800806e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008072:	4293      	cmp	r3, r2
 8008074:	db05      	blt.n	8008082 <_printf_float+0x1da>
 8008076:	6822      	ldr	r2, [r4, #0]
 8008078:	6123      	str	r3, [r4, #16]
 800807a:	07d1      	lsls	r1, r2, #31
 800807c:	d5e8      	bpl.n	8008050 <_printf_float+0x1a8>
 800807e:	3301      	adds	r3, #1
 8008080:	e7e5      	b.n	800804e <_printf_float+0x1a6>
 8008082:	2b00      	cmp	r3, #0
 8008084:	bfd4      	ite	le
 8008086:	f1c3 0302 	rsble	r3, r3, #2
 800808a:	2301      	movgt	r3, #1
 800808c:	4413      	add	r3, r2
 800808e:	e7de      	b.n	800804e <_printf_float+0x1a6>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	055a      	lsls	r2, r3, #21
 8008094:	d407      	bmi.n	80080a6 <_printf_float+0x1fe>
 8008096:	6923      	ldr	r3, [r4, #16]
 8008098:	4642      	mov	r2, r8
 800809a:	4631      	mov	r1, r6
 800809c:	4628      	mov	r0, r5
 800809e:	47b8      	blx	r7
 80080a0:	3001      	adds	r0, #1
 80080a2:	d12b      	bne.n	80080fc <_printf_float+0x254>
 80080a4:	e761      	b.n	8007f6a <_printf_float+0xc2>
 80080a6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80080aa:	f240 80e2 	bls.w	8008272 <_printf_float+0x3ca>
 80080ae:	2200      	movs	r2, #0
 80080b0:	2300      	movs	r3, #0
 80080b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080b6:	f7f8 fd03 	bl	8000ac0 <__aeabi_dcmpeq>
 80080ba:	2800      	cmp	r0, #0
 80080bc:	d03c      	beq.n	8008138 <_printf_float+0x290>
 80080be:	2301      	movs	r3, #1
 80080c0:	4a38      	ldr	r2, [pc, #224]	; (80081a4 <_printf_float+0x2fc>)
 80080c2:	4631      	mov	r1, r6
 80080c4:	4628      	mov	r0, r5
 80080c6:	47b8      	blx	r7
 80080c8:	3001      	adds	r0, #1
 80080ca:	f43f af4e 	beq.w	8007f6a <_printf_float+0xc2>
 80080ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080d2:	429a      	cmp	r2, r3
 80080d4:	db02      	blt.n	80080dc <_printf_float+0x234>
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	07d8      	lsls	r0, r3, #31
 80080da:	d50f      	bpl.n	80080fc <_printf_float+0x254>
 80080dc:	9b05      	ldr	r3, [sp, #20]
 80080de:	9a04      	ldr	r2, [sp, #16]
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f af3f 	beq.w	8007f6a <_printf_float+0xc2>
 80080ec:	f04f 0800 	mov.w	r8, #0
 80080f0:	f104 091a 	add.w	r9, r4, #26
 80080f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080f6:	3b01      	subs	r3, #1
 80080f8:	4598      	cmp	r8, r3
 80080fa:	db12      	blt.n	8008122 <_printf_float+0x27a>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	079b      	lsls	r3, r3, #30
 8008100:	d509      	bpl.n	8008116 <_printf_float+0x26e>
 8008102:	f04f 0800 	mov.w	r8, #0
 8008106:	f104 0919 	add.w	r9, r4, #25
 800810a:	68e3      	ldr	r3, [r4, #12]
 800810c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800810e:	1a9b      	subs	r3, r3, r2
 8008110:	4598      	cmp	r8, r3
 8008112:	f2c0 80ee 	blt.w	80082f2 <_printf_float+0x44a>
 8008116:	68e0      	ldr	r0, [r4, #12]
 8008118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800811a:	4298      	cmp	r0, r3
 800811c:	bfb8      	it	lt
 800811e:	4618      	movlt	r0, r3
 8008120:	e725      	b.n	8007f6e <_printf_float+0xc6>
 8008122:	2301      	movs	r3, #1
 8008124:	464a      	mov	r2, r9
 8008126:	4631      	mov	r1, r6
 8008128:	4628      	mov	r0, r5
 800812a:	47b8      	blx	r7
 800812c:	3001      	adds	r0, #1
 800812e:	f43f af1c 	beq.w	8007f6a <_printf_float+0xc2>
 8008132:	f108 0801 	add.w	r8, r8, #1
 8008136:	e7dd      	b.n	80080f4 <_printf_float+0x24c>
 8008138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800813a:	2b00      	cmp	r3, #0
 800813c:	dc34      	bgt.n	80081a8 <_printf_float+0x300>
 800813e:	2301      	movs	r3, #1
 8008140:	4a18      	ldr	r2, [pc, #96]	; (80081a4 <_printf_float+0x2fc>)
 8008142:	4631      	mov	r1, r6
 8008144:	4628      	mov	r0, r5
 8008146:	47b8      	blx	r7
 8008148:	3001      	adds	r0, #1
 800814a:	f43f af0e 	beq.w	8007f6a <_printf_float+0xc2>
 800814e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008150:	b923      	cbnz	r3, 800815c <_printf_float+0x2b4>
 8008152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008154:	b913      	cbnz	r3, 800815c <_printf_float+0x2b4>
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	07d9      	lsls	r1, r3, #31
 800815a:	d5cf      	bpl.n	80080fc <_printf_float+0x254>
 800815c:	9b05      	ldr	r3, [sp, #20]
 800815e:	9a04      	ldr	r2, [sp, #16]
 8008160:	4631      	mov	r1, r6
 8008162:	4628      	mov	r0, r5
 8008164:	47b8      	blx	r7
 8008166:	3001      	adds	r0, #1
 8008168:	f43f aeff 	beq.w	8007f6a <_printf_float+0xc2>
 800816c:	f04f 0900 	mov.w	r9, #0
 8008170:	f104 0a1a 	add.w	sl, r4, #26
 8008174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008176:	425b      	negs	r3, r3
 8008178:	4599      	cmp	r9, r3
 800817a:	db01      	blt.n	8008180 <_printf_float+0x2d8>
 800817c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800817e:	e78b      	b.n	8008098 <_printf_float+0x1f0>
 8008180:	2301      	movs	r3, #1
 8008182:	4652      	mov	r2, sl
 8008184:	4631      	mov	r1, r6
 8008186:	4628      	mov	r0, r5
 8008188:	47b8      	blx	r7
 800818a:	3001      	adds	r0, #1
 800818c:	f43f aeed 	beq.w	8007f6a <_printf_float+0xc2>
 8008190:	f109 0901 	add.w	r9, r9, #1
 8008194:	e7ee      	b.n	8008174 <_printf_float+0x2cc>
 8008196:	bf00      	nop
 8008198:	7fefffff 	.word	0x7fefffff
 800819c:	0800aecb 	.word	0x0800aecb
 80081a0:	0800aecf 	.word	0x0800aecf
 80081a4:	0800ad72 	.word	0x0800ad72
 80081a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081ac:	429a      	cmp	r2, r3
 80081ae:	bfa8      	it	ge
 80081b0:	461a      	movge	r2, r3
 80081b2:	2a00      	cmp	r2, #0
 80081b4:	4691      	mov	r9, r2
 80081b6:	dc38      	bgt.n	800822a <_printf_float+0x382>
 80081b8:	f104 031a 	add.w	r3, r4, #26
 80081bc:	f04f 0b00 	mov.w	fp, #0
 80081c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081c4:	9306      	str	r3, [sp, #24]
 80081c6:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80081ca:	ebaa 0309 	sub.w	r3, sl, r9
 80081ce:	459b      	cmp	fp, r3
 80081d0:	db33      	blt.n	800823a <_printf_float+0x392>
 80081d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d6:	429a      	cmp	r2, r3
 80081d8:	db3a      	blt.n	8008250 <_printf_float+0x3a8>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	07da      	lsls	r2, r3, #31
 80081de:	d437      	bmi.n	8008250 <_printf_float+0x3a8>
 80081e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081e4:	eba3 020a 	sub.w	r2, r3, sl
 80081e8:	eba3 0901 	sub.w	r9, r3, r1
 80081ec:	4591      	cmp	r9, r2
 80081ee:	bfa8      	it	ge
 80081f0:	4691      	movge	r9, r2
 80081f2:	f1b9 0f00 	cmp.w	r9, #0
 80081f6:	dc33      	bgt.n	8008260 <_printf_float+0x3b8>
 80081f8:	f04f 0800 	mov.w	r8, #0
 80081fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008200:	f104 0a1a 	add.w	sl, r4, #26
 8008204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008208:	1a9b      	subs	r3, r3, r2
 800820a:	eba3 0309 	sub.w	r3, r3, r9
 800820e:	4598      	cmp	r8, r3
 8008210:	f6bf af74 	bge.w	80080fc <_printf_float+0x254>
 8008214:	2301      	movs	r3, #1
 8008216:	4652      	mov	r2, sl
 8008218:	4631      	mov	r1, r6
 800821a:	4628      	mov	r0, r5
 800821c:	47b8      	blx	r7
 800821e:	3001      	adds	r0, #1
 8008220:	f43f aea3 	beq.w	8007f6a <_printf_float+0xc2>
 8008224:	f108 0801 	add.w	r8, r8, #1
 8008228:	e7ec      	b.n	8008204 <_printf_float+0x35c>
 800822a:	4613      	mov	r3, r2
 800822c:	4631      	mov	r1, r6
 800822e:	4642      	mov	r2, r8
 8008230:	4628      	mov	r0, r5
 8008232:	47b8      	blx	r7
 8008234:	3001      	adds	r0, #1
 8008236:	d1bf      	bne.n	80081b8 <_printf_float+0x310>
 8008238:	e697      	b.n	8007f6a <_printf_float+0xc2>
 800823a:	2301      	movs	r3, #1
 800823c:	9a06      	ldr	r2, [sp, #24]
 800823e:	4631      	mov	r1, r6
 8008240:	4628      	mov	r0, r5
 8008242:	47b8      	blx	r7
 8008244:	3001      	adds	r0, #1
 8008246:	f43f ae90 	beq.w	8007f6a <_printf_float+0xc2>
 800824a:	f10b 0b01 	add.w	fp, fp, #1
 800824e:	e7ba      	b.n	80081c6 <_printf_float+0x31e>
 8008250:	9b05      	ldr	r3, [sp, #20]
 8008252:	9a04      	ldr	r2, [sp, #16]
 8008254:	4631      	mov	r1, r6
 8008256:	4628      	mov	r0, r5
 8008258:	47b8      	blx	r7
 800825a:	3001      	adds	r0, #1
 800825c:	d1c0      	bne.n	80081e0 <_printf_float+0x338>
 800825e:	e684      	b.n	8007f6a <_printf_float+0xc2>
 8008260:	464b      	mov	r3, r9
 8008262:	eb08 020a 	add.w	r2, r8, sl
 8008266:	4631      	mov	r1, r6
 8008268:	4628      	mov	r0, r5
 800826a:	47b8      	blx	r7
 800826c:	3001      	adds	r0, #1
 800826e:	d1c3      	bne.n	80081f8 <_printf_float+0x350>
 8008270:	e67b      	b.n	8007f6a <_printf_float+0xc2>
 8008272:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008274:	2a01      	cmp	r2, #1
 8008276:	dc01      	bgt.n	800827c <_printf_float+0x3d4>
 8008278:	07db      	lsls	r3, r3, #31
 800827a:	d537      	bpl.n	80082ec <_printf_float+0x444>
 800827c:	2301      	movs	r3, #1
 800827e:	4642      	mov	r2, r8
 8008280:	4631      	mov	r1, r6
 8008282:	4628      	mov	r0, r5
 8008284:	47b8      	blx	r7
 8008286:	3001      	adds	r0, #1
 8008288:	f43f ae6f 	beq.w	8007f6a <_printf_float+0xc2>
 800828c:	9b05      	ldr	r3, [sp, #20]
 800828e:	9a04      	ldr	r2, [sp, #16]
 8008290:	4631      	mov	r1, r6
 8008292:	4628      	mov	r0, r5
 8008294:	47b8      	blx	r7
 8008296:	3001      	adds	r0, #1
 8008298:	f43f ae67 	beq.w	8007f6a <_printf_float+0xc2>
 800829c:	2200      	movs	r2, #0
 800829e:	2300      	movs	r3, #0
 80082a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082a4:	f7f8 fc0c 	bl	8000ac0 <__aeabi_dcmpeq>
 80082a8:	b158      	cbz	r0, 80082c2 <_printf_float+0x41a>
 80082aa:	f04f 0800 	mov.w	r8, #0
 80082ae:	f104 0a1a 	add.w	sl, r4, #26
 80082b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082b4:	3b01      	subs	r3, #1
 80082b6:	4598      	cmp	r8, r3
 80082b8:	db0d      	blt.n	80082d6 <_printf_float+0x42e>
 80082ba:	464b      	mov	r3, r9
 80082bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082c0:	e6eb      	b.n	800809a <_printf_float+0x1f2>
 80082c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c4:	f108 0201 	add.w	r2, r8, #1
 80082c8:	3b01      	subs	r3, #1
 80082ca:	4631      	mov	r1, r6
 80082cc:	4628      	mov	r0, r5
 80082ce:	47b8      	blx	r7
 80082d0:	3001      	adds	r0, #1
 80082d2:	d1f2      	bne.n	80082ba <_printf_float+0x412>
 80082d4:	e649      	b.n	8007f6a <_printf_float+0xc2>
 80082d6:	2301      	movs	r3, #1
 80082d8:	4652      	mov	r2, sl
 80082da:	4631      	mov	r1, r6
 80082dc:	4628      	mov	r0, r5
 80082de:	47b8      	blx	r7
 80082e0:	3001      	adds	r0, #1
 80082e2:	f43f ae42 	beq.w	8007f6a <_printf_float+0xc2>
 80082e6:	f108 0801 	add.w	r8, r8, #1
 80082ea:	e7e2      	b.n	80082b2 <_printf_float+0x40a>
 80082ec:	2301      	movs	r3, #1
 80082ee:	4642      	mov	r2, r8
 80082f0:	e7eb      	b.n	80082ca <_printf_float+0x422>
 80082f2:	2301      	movs	r3, #1
 80082f4:	464a      	mov	r2, r9
 80082f6:	4631      	mov	r1, r6
 80082f8:	4628      	mov	r0, r5
 80082fa:	47b8      	blx	r7
 80082fc:	3001      	adds	r0, #1
 80082fe:	f43f ae34 	beq.w	8007f6a <_printf_float+0xc2>
 8008302:	f108 0801 	add.w	r8, r8, #1
 8008306:	e700      	b.n	800810a <_printf_float+0x262>
 8008308:	4642      	mov	r2, r8
 800830a:	464b      	mov	r3, r9
 800830c:	4640      	mov	r0, r8
 800830e:	4649      	mov	r1, r9
 8008310:	f7f8 fc08 	bl	8000b24 <__aeabi_dcmpun>
 8008314:	2800      	cmp	r0, #0
 8008316:	f43f ae2d 	beq.w	8007f74 <_printf_float+0xcc>
 800831a:	4b01      	ldr	r3, [pc, #4]	; (8008320 <_printf_float+0x478>)
 800831c:	4a01      	ldr	r2, [pc, #4]	; (8008324 <_printf_float+0x47c>)
 800831e:	e60e      	b.n	8007f3e <_printf_float+0x96>
 8008320:	0800aed3 	.word	0x0800aed3
 8008324:	0800aed7 	.word	0x0800aed7

08008328 <_printf_common>:
 8008328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800832c:	4691      	mov	r9, r2
 800832e:	461f      	mov	r7, r3
 8008330:	688a      	ldr	r2, [r1, #8]
 8008332:	690b      	ldr	r3, [r1, #16]
 8008334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008338:	4293      	cmp	r3, r2
 800833a:	bfb8      	it	lt
 800833c:	4613      	movlt	r3, r2
 800833e:	f8c9 3000 	str.w	r3, [r9]
 8008342:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008346:	4606      	mov	r6, r0
 8008348:	460c      	mov	r4, r1
 800834a:	b112      	cbz	r2, 8008352 <_printf_common+0x2a>
 800834c:	3301      	adds	r3, #1
 800834e:	f8c9 3000 	str.w	r3, [r9]
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	0699      	lsls	r1, r3, #26
 8008356:	bf42      	ittt	mi
 8008358:	f8d9 3000 	ldrmi.w	r3, [r9]
 800835c:	3302      	addmi	r3, #2
 800835e:	f8c9 3000 	strmi.w	r3, [r9]
 8008362:	6825      	ldr	r5, [r4, #0]
 8008364:	f015 0506 	ands.w	r5, r5, #6
 8008368:	d107      	bne.n	800837a <_printf_common+0x52>
 800836a:	f104 0a19 	add.w	sl, r4, #25
 800836e:	68e3      	ldr	r3, [r4, #12]
 8008370:	f8d9 2000 	ldr.w	r2, [r9]
 8008374:	1a9b      	subs	r3, r3, r2
 8008376:	429d      	cmp	r5, r3
 8008378:	db29      	blt.n	80083ce <_printf_common+0xa6>
 800837a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800837e:	6822      	ldr	r2, [r4, #0]
 8008380:	3300      	adds	r3, #0
 8008382:	bf18      	it	ne
 8008384:	2301      	movne	r3, #1
 8008386:	0692      	lsls	r2, r2, #26
 8008388:	d42e      	bmi.n	80083e8 <_printf_common+0xc0>
 800838a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800838e:	4639      	mov	r1, r7
 8008390:	4630      	mov	r0, r6
 8008392:	47c0      	blx	r8
 8008394:	3001      	adds	r0, #1
 8008396:	d021      	beq.n	80083dc <_printf_common+0xb4>
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	68e5      	ldr	r5, [r4, #12]
 800839c:	f8d9 2000 	ldr.w	r2, [r9]
 80083a0:	f003 0306 	and.w	r3, r3, #6
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	bf08      	it	eq
 80083a8:	1aad      	subeq	r5, r5, r2
 80083aa:	68a3      	ldr	r3, [r4, #8]
 80083ac:	6922      	ldr	r2, [r4, #16]
 80083ae:	bf0c      	ite	eq
 80083b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083b4:	2500      	movne	r5, #0
 80083b6:	4293      	cmp	r3, r2
 80083b8:	bfc4      	itt	gt
 80083ba:	1a9b      	subgt	r3, r3, r2
 80083bc:	18ed      	addgt	r5, r5, r3
 80083be:	f04f 0900 	mov.w	r9, #0
 80083c2:	341a      	adds	r4, #26
 80083c4:	454d      	cmp	r5, r9
 80083c6:	d11b      	bne.n	8008400 <_printf_common+0xd8>
 80083c8:	2000      	movs	r0, #0
 80083ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ce:	2301      	movs	r3, #1
 80083d0:	4652      	mov	r2, sl
 80083d2:	4639      	mov	r1, r7
 80083d4:	4630      	mov	r0, r6
 80083d6:	47c0      	blx	r8
 80083d8:	3001      	adds	r0, #1
 80083da:	d103      	bne.n	80083e4 <_printf_common+0xbc>
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e4:	3501      	adds	r5, #1
 80083e6:	e7c2      	b.n	800836e <_printf_common+0x46>
 80083e8:	18e1      	adds	r1, r4, r3
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	2030      	movs	r0, #48	; 0x30
 80083ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083f2:	4422      	add	r2, r4
 80083f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083fc:	3302      	adds	r3, #2
 80083fe:	e7c4      	b.n	800838a <_printf_common+0x62>
 8008400:	2301      	movs	r3, #1
 8008402:	4622      	mov	r2, r4
 8008404:	4639      	mov	r1, r7
 8008406:	4630      	mov	r0, r6
 8008408:	47c0      	blx	r8
 800840a:	3001      	adds	r0, #1
 800840c:	d0e6      	beq.n	80083dc <_printf_common+0xb4>
 800840e:	f109 0901 	add.w	r9, r9, #1
 8008412:	e7d7      	b.n	80083c4 <_printf_common+0x9c>

08008414 <_printf_i>:
 8008414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008418:	4617      	mov	r7, r2
 800841a:	7e0a      	ldrb	r2, [r1, #24]
 800841c:	b085      	sub	sp, #20
 800841e:	2a6e      	cmp	r2, #110	; 0x6e
 8008420:	4698      	mov	r8, r3
 8008422:	4606      	mov	r6, r0
 8008424:	460c      	mov	r4, r1
 8008426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008428:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800842c:	f000 80bc 	beq.w	80085a8 <_printf_i+0x194>
 8008430:	d81a      	bhi.n	8008468 <_printf_i+0x54>
 8008432:	2a63      	cmp	r2, #99	; 0x63
 8008434:	d02e      	beq.n	8008494 <_printf_i+0x80>
 8008436:	d80a      	bhi.n	800844e <_printf_i+0x3a>
 8008438:	2a00      	cmp	r2, #0
 800843a:	f000 80c8 	beq.w	80085ce <_printf_i+0x1ba>
 800843e:	2a58      	cmp	r2, #88	; 0x58
 8008440:	f000 808a 	beq.w	8008558 <_printf_i+0x144>
 8008444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008448:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800844c:	e02a      	b.n	80084a4 <_printf_i+0x90>
 800844e:	2a64      	cmp	r2, #100	; 0x64
 8008450:	d001      	beq.n	8008456 <_printf_i+0x42>
 8008452:	2a69      	cmp	r2, #105	; 0x69
 8008454:	d1f6      	bne.n	8008444 <_printf_i+0x30>
 8008456:	6821      	ldr	r1, [r4, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800845e:	d023      	beq.n	80084a8 <_printf_i+0x94>
 8008460:	1d11      	adds	r1, r2, #4
 8008462:	6019      	str	r1, [r3, #0]
 8008464:	6813      	ldr	r3, [r2, #0]
 8008466:	e027      	b.n	80084b8 <_printf_i+0xa4>
 8008468:	2a73      	cmp	r2, #115	; 0x73
 800846a:	f000 80b4 	beq.w	80085d6 <_printf_i+0x1c2>
 800846e:	d808      	bhi.n	8008482 <_printf_i+0x6e>
 8008470:	2a6f      	cmp	r2, #111	; 0x6f
 8008472:	d02a      	beq.n	80084ca <_printf_i+0xb6>
 8008474:	2a70      	cmp	r2, #112	; 0x70
 8008476:	d1e5      	bne.n	8008444 <_printf_i+0x30>
 8008478:	680a      	ldr	r2, [r1, #0]
 800847a:	f042 0220 	orr.w	r2, r2, #32
 800847e:	600a      	str	r2, [r1, #0]
 8008480:	e003      	b.n	800848a <_printf_i+0x76>
 8008482:	2a75      	cmp	r2, #117	; 0x75
 8008484:	d021      	beq.n	80084ca <_printf_i+0xb6>
 8008486:	2a78      	cmp	r2, #120	; 0x78
 8008488:	d1dc      	bne.n	8008444 <_printf_i+0x30>
 800848a:	2278      	movs	r2, #120	; 0x78
 800848c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008490:	496e      	ldr	r1, [pc, #440]	; (800864c <_printf_i+0x238>)
 8008492:	e064      	b.n	800855e <_printf_i+0x14a>
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800849a:	1d11      	adds	r1, r2, #4
 800849c:	6019      	str	r1, [r3, #0]
 800849e:	6813      	ldr	r3, [r2, #0]
 80084a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084a4:	2301      	movs	r3, #1
 80084a6:	e0a3      	b.n	80085f0 <_printf_i+0x1dc>
 80084a8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80084ac:	f102 0104 	add.w	r1, r2, #4
 80084b0:	6019      	str	r1, [r3, #0]
 80084b2:	d0d7      	beq.n	8008464 <_printf_i+0x50>
 80084b4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	da03      	bge.n	80084c4 <_printf_i+0xb0>
 80084bc:	222d      	movs	r2, #45	; 0x2d
 80084be:	425b      	negs	r3, r3
 80084c0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80084c4:	4962      	ldr	r1, [pc, #392]	; (8008650 <_printf_i+0x23c>)
 80084c6:	220a      	movs	r2, #10
 80084c8:	e017      	b.n	80084fa <_printf_i+0xe6>
 80084ca:	6820      	ldr	r0, [r4, #0]
 80084cc:	6819      	ldr	r1, [r3, #0]
 80084ce:	f010 0f80 	tst.w	r0, #128	; 0x80
 80084d2:	d003      	beq.n	80084dc <_printf_i+0xc8>
 80084d4:	1d08      	adds	r0, r1, #4
 80084d6:	6018      	str	r0, [r3, #0]
 80084d8:	680b      	ldr	r3, [r1, #0]
 80084da:	e006      	b.n	80084ea <_printf_i+0xd6>
 80084dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084e0:	f101 0004 	add.w	r0, r1, #4
 80084e4:	6018      	str	r0, [r3, #0]
 80084e6:	d0f7      	beq.n	80084d8 <_printf_i+0xc4>
 80084e8:	880b      	ldrh	r3, [r1, #0]
 80084ea:	4959      	ldr	r1, [pc, #356]	; (8008650 <_printf_i+0x23c>)
 80084ec:	2a6f      	cmp	r2, #111	; 0x6f
 80084ee:	bf14      	ite	ne
 80084f0:	220a      	movne	r2, #10
 80084f2:	2208      	moveq	r2, #8
 80084f4:	2000      	movs	r0, #0
 80084f6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80084fa:	6865      	ldr	r5, [r4, #4]
 80084fc:	60a5      	str	r5, [r4, #8]
 80084fe:	2d00      	cmp	r5, #0
 8008500:	f2c0 809c 	blt.w	800863c <_printf_i+0x228>
 8008504:	6820      	ldr	r0, [r4, #0]
 8008506:	f020 0004 	bic.w	r0, r0, #4
 800850a:	6020      	str	r0, [r4, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d13f      	bne.n	8008590 <_printf_i+0x17c>
 8008510:	2d00      	cmp	r5, #0
 8008512:	f040 8095 	bne.w	8008640 <_printf_i+0x22c>
 8008516:	4675      	mov	r5, lr
 8008518:	2a08      	cmp	r2, #8
 800851a:	d10b      	bne.n	8008534 <_printf_i+0x120>
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	07da      	lsls	r2, r3, #31
 8008520:	d508      	bpl.n	8008534 <_printf_i+0x120>
 8008522:	6923      	ldr	r3, [r4, #16]
 8008524:	6862      	ldr	r2, [r4, #4]
 8008526:	429a      	cmp	r2, r3
 8008528:	bfde      	ittt	le
 800852a:	2330      	movle	r3, #48	; 0x30
 800852c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008530:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008534:	ebae 0305 	sub.w	r3, lr, r5
 8008538:	6123      	str	r3, [r4, #16]
 800853a:	f8cd 8000 	str.w	r8, [sp]
 800853e:	463b      	mov	r3, r7
 8008540:	aa03      	add	r2, sp, #12
 8008542:	4621      	mov	r1, r4
 8008544:	4630      	mov	r0, r6
 8008546:	f7ff feef 	bl	8008328 <_printf_common>
 800854a:	3001      	adds	r0, #1
 800854c:	d155      	bne.n	80085fa <_printf_i+0x1e6>
 800854e:	f04f 30ff 	mov.w	r0, #4294967295
 8008552:	b005      	add	sp, #20
 8008554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008558:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800855c:	493c      	ldr	r1, [pc, #240]	; (8008650 <_printf_i+0x23c>)
 800855e:	6822      	ldr	r2, [r4, #0]
 8008560:	6818      	ldr	r0, [r3, #0]
 8008562:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008566:	f100 0504 	add.w	r5, r0, #4
 800856a:	601d      	str	r5, [r3, #0]
 800856c:	d001      	beq.n	8008572 <_printf_i+0x15e>
 800856e:	6803      	ldr	r3, [r0, #0]
 8008570:	e002      	b.n	8008578 <_printf_i+0x164>
 8008572:	0655      	lsls	r5, r2, #25
 8008574:	d5fb      	bpl.n	800856e <_printf_i+0x15a>
 8008576:	8803      	ldrh	r3, [r0, #0]
 8008578:	07d0      	lsls	r0, r2, #31
 800857a:	bf44      	itt	mi
 800857c:	f042 0220 	orrmi.w	r2, r2, #32
 8008580:	6022      	strmi	r2, [r4, #0]
 8008582:	b91b      	cbnz	r3, 800858c <_printf_i+0x178>
 8008584:	6822      	ldr	r2, [r4, #0]
 8008586:	f022 0220 	bic.w	r2, r2, #32
 800858a:	6022      	str	r2, [r4, #0]
 800858c:	2210      	movs	r2, #16
 800858e:	e7b1      	b.n	80084f4 <_printf_i+0xe0>
 8008590:	4675      	mov	r5, lr
 8008592:	fbb3 f0f2 	udiv	r0, r3, r2
 8008596:	fb02 3310 	mls	r3, r2, r0, r3
 800859a:	5ccb      	ldrb	r3, [r1, r3]
 800859c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80085a0:	4603      	mov	r3, r0
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d1f5      	bne.n	8008592 <_printf_i+0x17e>
 80085a6:	e7b7      	b.n	8008518 <_printf_i+0x104>
 80085a8:	6808      	ldr	r0, [r1, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	6949      	ldr	r1, [r1, #20]
 80085ae:	f010 0f80 	tst.w	r0, #128	; 0x80
 80085b2:	d004      	beq.n	80085be <_printf_i+0x1aa>
 80085b4:	1d10      	adds	r0, r2, #4
 80085b6:	6018      	str	r0, [r3, #0]
 80085b8:	6813      	ldr	r3, [r2, #0]
 80085ba:	6019      	str	r1, [r3, #0]
 80085bc:	e007      	b.n	80085ce <_printf_i+0x1ba>
 80085be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80085c2:	f102 0004 	add.w	r0, r2, #4
 80085c6:	6018      	str	r0, [r3, #0]
 80085c8:	6813      	ldr	r3, [r2, #0]
 80085ca:	d0f6      	beq.n	80085ba <_printf_i+0x1a6>
 80085cc:	8019      	strh	r1, [r3, #0]
 80085ce:	2300      	movs	r3, #0
 80085d0:	6123      	str	r3, [r4, #16]
 80085d2:	4675      	mov	r5, lr
 80085d4:	e7b1      	b.n	800853a <_printf_i+0x126>
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	1d11      	adds	r1, r2, #4
 80085da:	6019      	str	r1, [r3, #0]
 80085dc:	6815      	ldr	r5, [r2, #0]
 80085de:	6862      	ldr	r2, [r4, #4]
 80085e0:	2100      	movs	r1, #0
 80085e2:	4628      	mov	r0, r5
 80085e4:	f7f7 fdfc 	bl	80001e0 <memchr>
 80085e8:	b108      	cbz	r0, 80085ee <_printf_i+0x1da>
 80085ea:	1b40      	subs	r0, r0, r5
 80085ec:	6060      	str	r0, [r4, #4]
 80085ee:	6863      	ldr	r3, [r4, #4]
 80085f0:	6123      	str	r3, [r4, #16]
 80085f2:	2300      	movs	r3, #0
 80085f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f8:	e79f      	b.n	800853a <_printf_i+0x126>
 80085fa:	6923      	ldr	r3, [r4, #16]
 80085fc:	462a      	mov	r2, r5
 80085fe:	4639      	mov	r1, r7
 8008600:	4630      	mov	r0, r6
 8008602:	47c0      	blx	r8
 8008604:	3001      	adds	r0, #1
 8008606:	d0a2      	beq.n	800854e <_printf_i+0x13a>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	079b      	lsls	r3, r3, #30
 800860c:	d507      	bpl.n	800861e <_printf_i+0x20a>
 800860e:	2500      	movs	r5, #0
 8008610:	f104 0919 	add.w	r9, r4, #25
 8008614:	68e3      	ldr	r3, [r4, #12]
 8008616:	9a03      	ldr	r2, [sp, #12]
 8008618:	1a9b      	subs	r3, r3, r2
 800861a:	429d      	cmp	r5, r3
 800861c:	db05      	blt.n	800862a <_printf_i+0x216>
 800861e:	68e0      	ldr	r0, [r4, #12]
 8008620:	9b03      	ldr	r3, [sp, #12]
 8008622:	4298      	cmp	r0, r3
 8008624:	bfb8      	it	lt
 8008626:	4618      	movlt	r0, r3
 8008628:	e793      	b.n	8008552 <_printf_i+0x13e>
 800862a:	2301      	movs	r3, #1
 800862c:	464a      	mov	r2, r9
 800862e:	4639      	mov	r1, r7
 8008630:	4630      	mov	r0, r6
 8008632:	47c0      	blx	r8
 8008634:	3001      	adds	r0, #1
 8008636:	d08a      	beq.n	800854e <_printf_i+0x13a>
 8008638:	3501      	adds	r5, #1
 800863a:	e7eb      	b.n	8008614 <_printf_i+0x200>
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1a7      	bne.n	8008590 <_printf_i+0x17c>
 8008640:	780b      	ldrb	r3, [r1, #0]
 8008642:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008646:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800864a:	e765      	b.n	8008518 <_printf_i+0x104>
 800864c:	0800aeec 	.word	0x0800aeec
 8008650:	0800aedb 	.word	0x0800aedb

08008654 <_puts_r>:
 8008654:	b570      	push	{r4, r5, r6, lr}
 8008656:	460e      	mov	r6, r1
 8008658:	4605      	mov	r5, r0
 800865a:	b118      	cbz	r0, 8008664 <_puts_r+0x10>
 800865c:	6983      	ldr	r3, [r0, #24]
 800865e:	b90b      	cbnz	r3, 8008664 <_puts_r+0x10>
 8008660:	f001 f896 	bl	8009790 <__sinit>
 8008664:	69ab      	ldr	r3, [r5, #24]
 8008666:	68ac      	ldr	r4, [r5, #8]
 8008668:	b913      	cbnz	r3, 8008670 <_puts_r+0x1c>
 800866a:	4628      	mov	r0, r5
 800866c:	f001 f890 	bl	8009790 <__sinit>
 8008670:	4b23      	ldr	r3, [pc, #140]	; (8008700 <_puts_r+0xac>)
 8008672:	429c      	cmp	r4, r3
 8008674:	d117      	bne.n	80086a6 <_puts_r+0x52>
 8008676:	686c      	ldr	r4, [r5, #4]
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	071b      	lsls	r3, r3, #28
 800867c:	d51d      	bpl.n	80086ba <_puts_r+0x66>
 800867e:	6923      	ldr	r3, [r4, #16]
 8008680:	b1db      	cbz	r3, 80086ba <_puts_r+0x66>
 8008682:	3e01      	subs	r6, #1
 8008684:	68a3      	ldr	r3, [r4, #8]
 8008686:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800868a:	3b01      	subs	r3, #1
 800868c:	60a3      	str	r3, [r4, #8]
 800868e:	b9e9      	cbnz	r1, 80086cc <_puts_r+0x78>
 8008690:	2b00      	cmp	r3, #0
 8008692:	da2e      	bge.n	80086f2 <_puts_r+0x9e>
 8008694:	4622      	mov	r2, r4
 8008696:	210a      	movs	r1, #10
 8008698:	4628      	mov	r0, r5
 800869a:	f000 f86b 	bl	8008774 <__swbuf_r>
 800869e:	3001      	adds	r0, #1
 80086a0:	d011      	beq.n	80086c6 <_puts_r+0x72>
 80086a2:	200a      	movs	r0, #10
 80086a4:	bd70      	pop	{r4, r5, r6, pc}
 80086a6:	4b17      	ldr	r3, [pc, #92]	; (8008704 <_puts_r+0xb0>)
 80086a8:	429c      	cmp	r4, r3
 80086aa:	d101      	bne.n	80086b0 <_puts_r+0x5c>
 80086ac:	68ac      	ldr	r4, [r5, #8]
 80086ae:	e7e3      	b.n	8008678 <_puts_r+0x24>
 80086b0:	4b15      	ldr	r3, [pc, #84]	; (8008708 <_puts_r+0xb4>)
 80086b2:	429c      	cmp	r4, r3
 80086b4:	bf08      	it	eq
 80086b6:	68ec      	ldreq	r4, [r5, #12]
 80086b8:	e7de      	b.n	8008678 <_puts_r+0x24>
 80086ba:	4621      	mov	r1, r4
 80086bc:	4628      	mov	r0, r5
 80086be:	f000 f8ab 	bl	8008818 <__swsetup_r>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d0dd      	beq.n	8008682 <_puts_r+0x2e>
 80086c6:	f04f 30ff 	mov.w	r0, #4294967295
 80086ca:	bd70      	pop	{r4, r5, r6, pc}
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	da04      	bge.n	80086da <_puts_r+0x86>
 80086d0:	69a2      	ldr	r2, [r4, #24]
 80086d2:	4293      	cmp	r3, r2
 80086d4:	db06      	blt.n	80086e4 <_puts_r+0x90>
 80086d6:	290a      	cmp	r1, #10
 80086d8:	d004      	beq.n	80086e4 <_puts_r+0x90>
 80086da:	6823      	ldr	r3, [r4, #0]
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	6022      	str	r2, [r4, #0]
 80086e0:	7019      	strb	r1, [r3, #0]
 80086e2:	e7cf      	b.n	8008684 <_puts_r+0x30>
 80086e4:	4622      	mov	r2, r4
 80086e6:	4628      	mov	r0, r5
 80086e8:	f000 f844 	bl	8008774 <__swbuf_r>
 80086ec:	3001      	adds	r0, #1
 80086ee:	d1c9      	bne.n	8008684 <_puts_r+0x30>
 80086f0:	e7e9      	b.n	80086c6 <_puts_r+0x72>
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	200a      	movs	r0, #10
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	6022      	str	r2, [r4, #0]
 80086fa:	7018      	strb	r0, [r3, #0]
 80086fc:	bd70      	pop	{r4, r5, r6, pc}
 80086fe:	bf00      	nop
 8008700:	0800af2c 	.word	0x0800af2c
 8008704:	0800af4c 	.word	0x0800af4c
 8008708:	0800af0c 	.word	0x0800af0c

0800870c <puts>:
 800870c:	4b02      	ldr	r3, [pc, #8]	; (8008718 <puts+0xc>)
 800870e:	4601      	mov	r1, r0
 8008710:	6818      	ldr	r0, [r3, #0]
 8008712:	f7ff bf9f 	b.w	8008654 <_puts_r>
 8008716:	bf00      	nop
 8008718:	20000510 	.word	0x20000510

0800871c <siprintf>:
 800871c:	b40e      	push	{r1, r2, r3}
 800871e:	b500      	push	{lr}
 8008720:	b09c      	sub	sp, #112	; 0x70
 8008722:	f44f 7102 	mov.w	r1, #520	; 0x208
 8008726:	ab1d      	add	r3, sp, #116	; 0x74
 8008728:	f8ad 1014 	strh.w	r1, [sp, #20]
 800872c:	9002      	str	r0, [sp, #8]
 800872e:	9006      	str	r0, [sp, #24]
 8008730:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008734:	480a      	ldr	r0, [pc, #40]	; (8008760 <siprintf+0x44>)
 8008736:	9104      	str	r1, [sp, #16]
 8008738:	9107      	str	r1, [sp, #28]
 800873a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800873e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008742:	f8ad 1016 	strh.w	r1, [sp, #22]
 8008746:	6800      	ldr	r0, [r0, #0]
 8008748:	9301      	str	r3, [sp, #4]
 800874a:	a902      	add	r1, sp, #8
 800874c:	f001 fd0a 	bl	800a164 <_svfiprintf_r>
 8008750:	9b02      	ldr	r3, [sp, #8]
 8008752:	2200      	movs	r2, #0
 8008754:	701a      	strb	r2, [r3, #0]
 8008756:	b01c      	add	sp, #112	; 0x70
 8008758:	f85d eb04 	ldr.w	lr, [sp], #4
 800875c:	b003      	add	sp, #12
 800875e:	4770      	bx	lr
 8008760:	20000510 	.word	0x20000510

08008764 <strcpy>:
 8008764:	4603      	mov	r3, r0
 8008766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800876a:	f803 2b01 	strb.w	r2, [r3], #1
 800876e:	2a00      	cmp	r2, #0
 8008770:	d1f9      	bne.n	8008766 <strcpy+0x2>
 8008772:	4770      	bx	lr

08008774 <__swbuf_r>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	460e      	mov	r6, r1
 8008778:	4614      	mov	r4, r2
 800877a:	4605      	mov	r5, r0
 800877c:	b118      	cbz	r0, 8008786 <__swbuf_r+0x12>
 800877e:	6983      	ldr	r3, [r0, #24]
 8008780:	b90b      	cbnz	r3, 8008786 <__swbuf_r+0x12>
 8008782:	f001 f805 	bl	8009790 <__sinit>
 8008786:	4b21      	ldr	r3, [pc, #132]	; (800880c <__swbuf_r+0x98>)
 8008788:	429c      	cmp	r4, r3
 800878a:	d12a      	bne.n	80087e2 <__swbuf_r+0x6e>
 800878c:	686c      	ldr	r4, [r5, #4]
 800878e:	69a3      	ldr	r3, [r4, #24]
 8008790:	60a3      	str	r3, [r4, #8]
 8008792:	89a3      	ldrh	r3, [r4, #12]
 8008794:	071a      	lsls	r2, r3, #28
 8008796:	d52e      	bpl.n	80087f6 <__swbuf_r+0x82>
 8008798:	6923      	ldr	r3, [r4, #16]
 800879a:	b363      	cbz	r3, 80087f6 <__swbuf_r+0x82>
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	6820      	ldr	r0, [r4, #0]
 80087a0:	1ac0      	subs	r0, r0, r3
 80087a2:	6963      	ldr	r3, [r4, #20]
 80087a4:	b2f6      	uxtb	r6, r6
 80087a6:	4298      	cmp	r0, r3
 80087a8:	4637      	mov	r7, r6
 80087aa:	db04      	blt.n	80087b6 <__swbuf_r+0x42>
 80087ac:	4621      	mov	r1, r4
 80087ae:	4628      	mov	r0, r5
 80087b0:	f000 ff84 	bl	80096bc <_fflush_r>
 80087b4:	bb28      	cbnz	r0, 8008802 <__swbuf_r+0x8e>
 80087b6:	68a3      	ldr	r3, [r4, #8]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	60a3      	str	r3, [r4, #8]
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	1c5a      	adds	r2, r3, #1
 80087c0:	6022      	str	r2, [r4, #0]
 80087c2:	701e      	strb	r6, [r3, #0]
 80087c4:	6963      	ldr	r3, [r4, #20]
 80087c6:	3001      	adds	r0, #1
 80087c8:	4298      	cmp	r0, r3
 80087ca:	d004      	beq.n	80087d6 <__swbuf_r+0x62>
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	07db      	lsls	r3, r3, #31
 80087d0:	d519      	bpl.n	8008806 <__swbuf_r+0x92>
 80087d2:	2e0a      	cmp	r6, #10
 80087d4:	d117      	bne.n	8008806 <__swbuf_r+0x92>
 80087d6:	4621      	mov	r1, r4
 80087d8:	4628      	mov	r0, r5
 80087da:	f000 ff6f 	bl	80096bc <_fflush_r>
 80087de:	b190      	cbz	r0, 8008806 <__swbuf_r+0x92>
 80087e0:	e00f      	b.n	8008802 <__swbuf_r+0x8e>
 80087e2:	4b0b      	ldr	r3, [pc, #44]	; (8008810 <__swbuf_r+0x9c>)
 80087e4:	429c      	cmp	r4, r3
 80087e6:	d101      	bne.n	80087ec <__swbuf_r+0x78>
 80087e8:	68ac      	ldr	r4, [r5, #8]
 80087ea:	e7d0      	b.n	800878e <__swbuf_r+0x1a>
 80087ec:	4b09      	ldr	r3, [pc, #36]	; (8008814 <__swbuf_r+0xa0>)
 80087ee:	429c      	cmp	r4, r3
 80087f0:	bf08      	it	eq
 80087f2:	68ec      	ldreq	r4, [r5, #12]
 80087f4:	e7cb      	b.n	800878e <__swbuf_r+0x1a>
 80087f6:	4621      	mov	r1, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f000 f80d 	bl	8008818 <__swsetup_r>
 80087fe:	2800      	cmp	r0, #0
 8008800:	d0cc      	beq.n	800879c <__swbuf_r+0x28>
 8008802:	f04f 37ff 	mov.w	r7, #4294967295
 8008806:	4638      	mov	r0, r7
 8008808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800880a:	bf00      	nop
 800880c:	0800af2c 	.word	0x0800af2c
 8008810:	0800af4c 	.word	0x0800af4c
 8008814:	0800af0c 	.word	0x0800af0c

08008818 <__swsetup_r>:
 8008818:	4b32      	ldr	r3, [pc, #200]	; (80088e4 <__swsetup_r+0xcc>)
 800881a:	b570      	push	{r4, r5, r6, lr}
 800881c:	681d      	ldr	r5, [r3, #0]
 800881e:	4606      	mov	r6, r0
 8008820:	460c      	mov	r4, r1
 8008822:	b125      	cbz	r5, 800882e <__swsetup_r+0x16>
 8008824:	69ab      	ldr	r3, [r5, #24]
 8008826:	b913      	cbnz	r3, 800882e <__swsetup_r+0x16>
 8008828:	4628      	mov	r0, r5
 800882a:	f000 ffb1 	bl	8009790 <__sinit>
 800882e:	4b2e      	ldr	r3, [pc, #184]	; (80088e8 <__swsetup_r+0xd0>)
 8008830:	429c      	cmp	r4, r3
 8008832:	d10f      	bne.n	8008854 <__swsetup_r+0x3c>
 8008834:	686c      	ldr	r4, [r5, #4]
 8008836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800883a:	b29a      	uxth	r2, r3
 800883c:	0715      	lsls	r5, r2, #28
 800883e:	d42c      	bmi.n	800889a <__swsetup_r+0x82>
 8008840:	06d0      	lsls	r0, r2, #27
 8008842:	d411      	bmi.n	8008868 <__swsetup_r+0x50>
 8008844:	2209      	movs	r2, #9
 8008846:	6032      	str	r2, [r6, #0]
 8008848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800884c:	81a3      	strh	r3, [r4, #12]
 800884e:	f04f 30ff 	mov.w	r0, #4294967295
 8008852:	bd70      	pop	{r4, r5, r6, pc}
 8008854:	4b25      	ldr	r3, [pc, #148]	; (80088ec <__swsetup_r+0xd4>)
 8008856:	429c      	cmp	r4, r3
 8008858:	d101      	bne.n	800885e <__swsetup_r+0x46>
 800885a:	68ac      	ldr	r4, [r5, #8]
 800885c:	e7eb      	b.n	8008836 <__swsetup_r+0x1e>
 800885e:	4b24      	ldr	r3, [pc, #144]	; (80088f0 <__swsetup_r+0xd8>)
 8008860:	429c      	cmp	r4, r3
 8008862:	bf08      	it	eq
 8008864:	68ec      	ldreq	r4, [r5, #12]
 8008866:	e7e6      	b.n	8008836 <__swsetup_r+0x1e>
 8008868:	0751      	lsls	r1, r2, #29
 800886a:	d512      	bpl.n	8008892 <__swsetup_r+0x7a>
 800886c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800886e:	b141      	cbz	r1, 8008882 <__swsetup_r+0x6a>
 8008870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008874:	4299      	cmp	r1, r3
 8008876:	d002      	beq.n	800887e <__swsetup_r+0x66>
 8008878:	4630      	mov	r0, r6
 800887a:	f001 fb6b 	bl	8009f54 <_free_r>
 800887e:	2300      	movs	r3, #0
 8008880:	6363      	str	r3, [r4, #52]	; 0x34
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008888:	81a3      	strh	r3, [r4, #12]
 800888a:	2300      	movs	r3, #0
 800888c:	6063      	str	r3, [r4, #4]
 800888e:	6923      	ldr	r3, [r4, #16]
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	89a3      	ldrh	r3, [r4, #12]
 8008894:	f043 0308 	orr.w	r3, r3, #8
 8008898:	81a3      	strh	r3, [r4, #12]
 800889a:	6923      	ldr	r3, [r4, #16]
 800889c:	b94b      	cbnz	r3, 80088b2 <__swsetup_r+0x9a>
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088a8:	d003      	beq.n	80088b2 <__swsetup_r+0x9a>
 80088aa:	4621      	mov	r1, r4
 80088ac:	4630      	mov	r0, r6
 80088ae:	f001 f82b 	bl	8009908 <__smakebuf_r>
 80088b2:	89a2      	ldrh	r2, [r4, #12]
 80088b4:	f012 0301 	ands.w	r3, r2, #1
 80088b8:	d00c      	beq.n	80088d4 <__swsetup_r+0xbc>
 80088ba:	2300      	movs	r3, #0
 80088bc:	60a3      	str	r3, [r4, #8]
 80088be:	6963      	ldr	r3, [r4, #20]
 80088c0:	425b      	negs	r3, r3
 80088c2:	61a3      	str	r3, [r4, #24]
 80088c4:	6923      	ldr	r3, [r4, #16]
 80088c6:	b953      	cbnz	r3, 80088de <__swsetup_r+0xc6>
 80088c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80088d0:	d1ba      	bne.n	8008848 <__swsetup_r+0x30>
 80088d2:	bd70      	pop	{r4, r5, r6, pc}
 80088d4:	0792      	lsls	r2, r2, #30
 80088d6:	bf58      	it	pl
 80088d8:	6963      	ldrpl	r3, [r4, #20]
 80088da:	60a3      	str	r3, [r4, #8]
 80088dc:	e7f2      	b.n	80088c4 <__swsetup_r+0xac>
 80088de:	2000      	movs	r0, #0
 80088e0:	e7f7      	b.n	80088d2 <__swsetup_r+0xba>
 80088e2:	bf00      	nop
 80088e4:	20000510 	.word	0x20000510
 80088e8:	0800af2c 	.word	0x0800af2c
 80088ec:	0800af4c 	.word	0x0800af4c
 80088f0:	0800af0c 	.word	0x0800af0c

080088f4 <quorem>:
 80088f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f8:	6903      	ldr	r3, [r0, #16]
 80088fa:	690c      	ldr	r4, [r1, #16]
 80088fc:	429c      	cmp	r4, r3
 80088fe:	4680      	mov	r8, r0
 8008900:	f300 8082 	bgt.w	8008a08 <quorem+0x114>
 8008904:	3c01      	subs	r4, #1
 8008906:	f101 0714 	add.w	r7, r1, #20
 800890a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800890e:	f100 0614 	add.w	r6, r0, #20
 8008912:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008916:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800891a:	eb06 030e 	add.w	r3, r6, lr
 800891e:	3501      	adds	r5, #1
 8008920:	eb07 090e 	add.w	r9, r7, lr
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	fbb0 f5f5 	udiv	r5, r0, r5
 800892a:	b395      	cbz	r5, 8008992 <quorem+0x9e>
 800892c:	f04f 0a00 	mov.w	sl, #0
 8008930:	4638      	mov	r0, r7
 8008932:	46b4      	mov	ip, r6
 8008934:	46d3      	mov	fp, sl
 8008936:	f850 2b04 	ldr.w	r2, [r0], #4
 800893a:	b293      	uxth	r3, r2
 800893c:	fb05 a303 	mla	r3, r5, r3, sl
 8008940:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008944:	b29b      	uxth	r3, r3
 8008946:	ebab 0303 	sub.w	r3, fp, r3
 800894a:	0c12      	lsrs	r2, r2, #16
 800894c:	f8bc b000 	ldrh.w	fp, [ip]
 8008950:	fb05 a202 	mla	r2, r5, r2, sl
 8008954:	fa13 f38b 	uxtah	r3, r3, fp
 8008958:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800895c:	fa1f fb82 	uxth.w	fp, r2
 8008960:	f8dc 2000 	ldr.w	r2, [ip]
 8008964:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008968:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800896c:	b29b      	uxth	r3, r3
 800896e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008972:	4581      	cmp	r9, r0
 8008974:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008978:	f84c 3b04 	str.w	r3, [ip], #4
 800897c:	d2db      	bcs.n	8008936 <quorem+0x42>
 800897e:	f856 300e 	ldr.w	r3, [r6, lr]
 8008982:	b933      	cbnz	r3, 8008992 <quorem+0x9e>
 8008984:	9b01      	ldr	r3, [sp, #4]
 8008986:	3b04      	subs	r3, #4
 8008988:	429e      	cmp	r6, r3
 800898a:	461a      	mov	r2, r3
 800898c:	d330      	bcc.n	80089f0 <quorem+0xfc>
 800898e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008992:	4640      	mov	r0, r8
 8008994:	f001 fa09 	bl	8009daa <__mcmp>
 8008998:	2800      	cmp	r0, #0
 800899a:	db25      	blt.n	80089e8 <quorem+0xf4>
 800899c:	3501      	adds	r5, #1
 800899e:	4630      	mov	r0, r6
 80089a0:	f04f 0e00 	mov.w	lr, #0
 80089a4:	f857 2b04 	ldr.w	r2, [r7], #4
 80089a8:	f8d0 c000 	ldr.w	ip, [r0]
 80089ac:	b293      	uxth	r3, r2
 80089ae:	ebae 0303 	sub.w	r3, lr, r3
 80089b2:	0c12      	lsrs	r2, r2, #16
 80089b4:	fa13 f38c 	uxtah	r3, r3, ip
 80089b8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80089bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089c6:	45b9      	cmp	r9, r7
 80089c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80089cc:	f840 3b04 	str.w	r3, [r0], #4
 80089d0:	d2e8      	bcs.n	80089a4 <quorem+0xb0>
 80089d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80089d6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80089da:	b92a      	cbnz	r2, 80089e8 <quorem+0xf4>
 80089dc:	3b04      	subs	r3, #4
 80089de:	429e      	cmp	r6, r3
 80089e0:	461a      	mov	r2, r3
 80089e2:	d30b      	bcc.n	80089fc <quorem+0x108>
 80089e4:	f8c8 4010 	str.w	r4, [r8, #16]
 80089e8:	4628      	mov	r0, r5
 80089ea:	b003      	add	sp, #12
 80089ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f0:	6812      	ldr	r2, [r2, #0]
 80089f2:	3b04      	subs	r3, #4
 80089f4:	2a00      	cmp	r2, #0
 80089f6:	d1ca      	bne.n	800898e <quorem+0x9a>
 80089f8:	3c01      	subs	r4, #1
 80089fa:	e7c5      	b.n	8008988 <quorem+0x94>
 80089fc:	6812      	ldr	r2, [r2, #0]
 80089fe:	3b04      	subs	r3, #4
 8008a00:	2a00      	cmp	r2, #0
 8008a02:	d1ef      	bne.n	80089e4 <quorem+0xf0>
 8008a04:	3c01      	subs	r4, #1
 8008a06:	e7ea      	b.n	80089de <quorem+0xea>
 8008a08:	2000      	movs	r0, #0
 8008a0a:	e7ee      	b.n	80089ea <quorem+0xf6>
 8008a0c:	0000      	movs	r0, r0
	...

08008a10 <_dtoa_r>:
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	ec57 6b10 	vmov	r6, r7, d0
 8008a18:	b097      	sub	sp, #92	; 0x5c
 8008a1a:	e9cd 6700 	strd	r6, r7, [sp]
 8008a1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a20:	9107      	str	r1, [sp, #28]
 8008a22:	4604      	mov	r4, r0
 8008a24:	920a      	str	r2, [sp, #40]	; 0x28
 8008a26:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a28:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8008a2a:	b93e      	cbnz	r6, 8008a3c <_dtoa_r+0x2c>
 8008a2c:	2010      	movs	r0, #16
 8008a2e:	f000 ffab 	bl	8009988 <malloc>
 8008a32:	6260      	str	r0, [r4, #36]	; 0x24
 8008a34:	6046      	str	r6, [r0, #4]
 8008a36:	6086      	str	r6, [r0, #8]
 8008a38:	6006      	str	r6, [r0, #0]
 8008a3a:	60c6      	str	r6, [r0, #12]
 8008a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a3e:	6819      	ldr	r1, [r3, #0]
 8008a40:	b151      	cbz	r1, 8008a58 <_dtoa_r+0x48>
 8008a42:	685a      	ldr	r2, [r3, #4]
 8008a44:	604a      	str	r2, [r1, #4]
 8008a46:	2301      	movs	r3, #1
 8008a48:	4093      	lsls	r3, r2
 8008a4a:	608b      	str	r3, [r1, #8]
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f000 ffd7 	bl	8009a00 <_Bfree>
 8008a52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a54:	2200      	movs	r2, #0
 8008a56:	601a      	str	r2, [r3, #0]
 8008a58:	9b01      	ldr	r3, [sp, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bfbf      	itttt	lt
 8008a5e:	2301      	movlt	r3, #1
 8008a60:	602b      	strlt	r3, [r5, #0]
 8008a62:	9b01      	ldrlt	r3, [sp, #4]
 8008a64:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a68:	bfb2      	itee	lt
 8008a6a:	9301      	strlt	r3, [sp, #4]
 8008a6c:	2300      	movge	r3, #0
 8008a6e:	602b      	strge	r3, [r5, #0]
 8008a70:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008a74:	4ba8      	ldr	r3, [pc, #672]	; (8008d18 <_dtoa_r+0x308>)
 8008a76:	ea33 0308 	bics.w	r3, r3, r8
 8008a7a:	d11b      	bne.n	8008ab4 <_dtoa_r+0xa4>
 8008a7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	9b00      	ldr	r3, [sp, #0]
 8008a86:	b923      	cbnz	r3, 8008a92 <_dtoa_r+0x82>
 8008a88:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	f000 8578 	beq.w	8009582 <_dtoa_r+0xb72>
 8008a92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a94:	b953      	cbnz	r3, 8008aac <_dtoa_r+0x9c>
 8008a96:	4ba1      	ldr	r3, [pc, #644]	; (8008d1c <_dtoa_r+0x30c>)
 8008a98:	e021      	b.n	8008ade <_dtoa_r+0xce>
 8008a9a:	4ba1      	ldr	r3, [pc, #644]	; (8008d20 <_dtoa_r+0x310>)
 8008a9c:	9302      	str	r3, [sp, #8]
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008aa2:	6013      	str	r3, [r2, #0]
 8008aa4:	9802      	ldr	r0, [sp, #8]
 8008aa6:	b017      	add	sp, #92	; 0x5c
 8008aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aac:	4b9b      	ldr	r3, [pc, #620]	; (8008d1c <_dtoa_r+0x30c>)
 8008aae:	9302      	str	r3, [sp, #8]
 8008ab0:	3303      	adds	r3, #3
 8008ab2:	e7f5      	b.n	8008aa0 <_dtoa_r+0x90>
 8008ab4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2300      	movs	r3, #0
 8008abc:	4630      	mov	r0, r6
 8008abe:	4639      	mov	r1, r7
 8008ac0:	f7f7 fffe 	bl	8000ac0 <__aeabi_dcmpeq>
 8008ac4:	4681      	mov	r9, r0
 8008ac6:	b160      	cbz	r0, 8008ae2 <_dtoa_r+0xd2>
 8008ac8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008aca:	2301      	movs	r3, #1
 8008acc:	6013      	str	r3, [r2, #0]
 8008ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 8553 	beq.w	800957c <_dtoa_r+0xb6c>
 8008ad6:	4b93      	ldr	r3, [pc, #588]	; (8008d24 <_dtoa_r+0x314>)
 8008ad8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ada:	6013      	str	r3, [r2, #0]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	9302      	str	r3, [sp, #8]
 8008ae0:	e7e0      	b.n	8008aa4 <_dtoa_r+0x94>
 8008ae2:	aa14      	add	r2, sp, #80	; 0x50
 8008ae4:	a915      	add	r1, sp, #84	; 0x54
 8008ae6:	ec47 6b10 	vmov	d0, r6, r7
 8008aea:	4620      	mov	r0, r4
 8008aec:	f001 f9d5 	bl	8009e9a <__d2b>
 8008af0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008af4:	4682      	mov	sl, r0
 8008af6:	2d00      	cmp	r5, #0
 8008af8:	d07e      	beq.n	8008bf8 <_dtoa_r+0x1e8>
 8008afa:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008afe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008b02:	4630      	mov	r0, r6
 8008b04:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008b08:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b0c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8008b10:	2200      	movs	r2, #0
 8008b12:	4b85      	ldr	r3, [pc, #532]	; (8008d28 <_dtoa_r+0x318>)
 8008b14:	f7f7 fbb8 	bl	8000288 <__aeabi_dsub>
 8008b18:	a379      	add	r3, pc, #484	; (adr r3, 8008d00 <_dtoa_r+0x2f0>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	f7f7 fd67 	bl	80005f0 <__aeabi_dmul>
 8008b22:	a379      	add	r3, pc, #484	; (adr r3, 8008d08 <_dtoa_r+0x2f8>)
 8008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b28:	f7f7 fbb0 	bl	800028c <__adddf3>
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	4628      	mov	r0, r5
 8008b30:	460f      	mov	r7, r1
 8008b32:	f7f7 fcf7 	bl	8000524 <__aeabi_i2d>
 8008b36:	a376      	add	r3, pc, #472	; (adr r3, 8008d10 <_dtoa_r+0x300>)
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	f7f7 fd58 	bl	80005f0 <__aeabi_dmul>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4630      	mov	r0, r6
 8008b46:	4639      	mov	r1, r7
 8008b48:	f7f7 fba0 	bl	800028c <__adddf3>
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	460f      	mov	r7, r1
 8008b50:	f7f7 fffe 	bl	8000b50 <__aeabi_d2iz>
 8008b54:	2200      	movs	r2, #0
 8008b56:	4683      	mov	fp, r0
 8008b58:	2300      	movs	r3, #0
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	4639      	mov	r1, r7
 8008b5e:	f7f7 ffb9 	bl	8000ad4 <__aeabi_dcmplt>
 8008b62:	b158      	cbz	r0, 8008b7c <_dtoa_r+0x16c>
 8008b64:	4658      	mov	r0, fp
 8008b66:	f7f7 fcdd 	bl	8000524 <__aeabi_i2d>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4630      	mov	r0, r6
 8008b70:	4639      	mov	r1, r7
 8008b72:	f7f7 ffa5 	bl	8000ac0 <__aeabi_dcmpeq>
 8008b76:	b908      	cbnz	r0, 8008b7c <_dtoa_r+0x16c>
 8008b78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b7c:	f1bb 0f16 	cmp.w	fp, #22
 8008b80:	d859      	bhi.n	8008c36 <_dtoa_r+0x226>
 8008b82:	496a      	ldr	r1, [pc, #424]	; (8008d2c <_dtoa_r+0x31c>)
 8008b84:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8008b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b90:	f7f7 ffbe 	bl	8000b10 <__aeabi_dcmpgt>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	d050      	beq.n	8008c3a <_dtoa_r+0x22a>
 8008b98:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	930e      	str	r3, [sp, #56]	; 0x38
 8008ba0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ba2:	1b5d      	subs	r5, r3, r5
 8008ba4:	1e6b      	subs	r3, r5, #1
 8008ba6:	9306      	str	r3, [sp, #24]
 8008ba8:	bf45      	ittet	mi
 8008baa:	f1c5 0301 	rsbmi	r3, r5, #1
 8008bae:	9305      	strmi	r3, [sp, #20]
 8008bb0:	2300      	movpl	r3, #0
 8008bb2:	2300      	movmi	r3, #0
 8008bb4:	bf4c      	ite	mi
 8008bb6:	9306      	strmi	r3, [sp, #24]
 8008bb8:	9305      	strpl	r3, [sp, #20]
 8008bba:	f1bb 0f00 	cmp.w	fp, #0
 8008bbe:	db3e      	blt.n	8008c3e <_dtoa_r+0x22e>
 8008bc0:	9b06      	ldr	r3, [sp, #24]
 8008bc2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008bc6:	445b      	add	r3, fp
 8008bc8:	9306      	str	r3, [sp, #24]
 8008bca:	2300      	movs	r3, #0
 8008bcc:	9308      	str	r3, [sp, #32]
 8008bce:	9b07      	ldr	r3, [sp, #28]
 8008bd0:	2b09      	cmp	r3, #9
 8008bd2:	f200 80af 	bhi.w	8008d34 <_dtoa_r+0x324>
 8008bd6:	2b05      	cmp	r3, #5
 8008bd8:	bfc4      	itt	gt
 8008bda:	3b04      	subgt	r3, #4
 8008bdc:	9307      	strgt	r3, [sp, #28]
 8008bde:	9b07      	ldr	r3, [sp, #28]
 8008be0:	f1a3 0302 	sub.w	r3, r3, #2
 8008be4:	bfcc      	ite	gt
 8008be6:	2600      	movgt	r6, #0
 8008be8:	2601      	movle	r6, #1
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	f200 80ae 	bhi.w	8008d4c <_dtoa_r+0x33c>
 8008bf0:	e8df f003 	tbb	[pc, r3]
 8008bf4:	772f8482 	.word	0x772f8482
 8008bf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bfa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8008bfc:	441d      	add	r5, r3
 8008bfe:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c02:	2b20      	cmp	r3, #32
 8008c04:	dd11      	ble.n	8008c2a <_dtoa_r+0x21a>
 8008c06:	9a00      	ldr	r2, [sp, #0]
 8008c08:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008c0c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8008c10:	fa22 f000 	lsr.w	r0, r2, r0
 8008c14:	fa08 f303 	lsl.w	r3, r8, r3
 8008c18:	4318      	orrs	r0, r3
 8008c1a:	f7f7 fc73 	bl	8000504 <__aeabi_ui2d>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008c24:	3d01      	subs	r5, #1
 8008c26:	9312      	str	r3, [sp, #72]	; 0x48
 8008c28:	e772      	b.n	8008b10 <_dtoa_r+0x100>
 8008c2a:	f1c3 0020 	rsb	r0, r3, #32
 8008c2e:	9b00      	ldr	r3, [sp, #0]
 8008c30:	fa03 f000 	lsl.w	r0, r3, r0
 8008c34:	e7f1      	b.n	8008c1a <_dtoa_r+0x20a>
 8008c36:	2301      	movs	r3, #1
 8008c38:	e7b1      	b.n	8008b9e <_dtoa_r+0x18e>
 8008c3a:	900e      	str	r0, [sp, #56]	; 0x38
 8008c3c:	e7b0      	b.n	8008ba0 <_dtoa_r+0x190>
 8008c3e:	9b05      	ldr	r3, [sp, #20]
 8008c40:	eba3 030b 	sub.w	r3, r3, fp
 8008c44:	9305      	str	r3, [sp, #20]
 8008c46:	f1cb 0300 	rsb	r3, fp, #0
 8008c4a:	9308      	str	r3, [sp, #32]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c50:	e7bd      	b.n	8008bce <_dtoa_r+0x1be>
 8008c52:	2301      	movs	r3, #1
 8008c54:	9309      	str	r3, [sp, #36]	; 0x24
 8008c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	dd7a      	ble.n	8008d52 <_dtoa_r+0x342>
 8008c5c:	9304      	str	r3, [sp, #16]
 8008c5e:	9303      	str	r3, [sp, #12]
 8008c60:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008c62:	2200      	movs	r2, #0
 8008c64:	606a      	str	r2, [r5, #4]
 8008c66:	2104      	movs	r1, #4
 8008c68:	f101 0214 	add.w	r2, r1, #20
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d975      	bls.n	8008d5c <_dtoa_r+0x34c>
 8008c70:	6869      	ldr	r1, [r5, #4]
 8008c72:	4620      	mov	r0, r4
 8008c74:	f000 fe90 	bl	8009998 <_Balloc>
 8008c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c7a:	6028      	str	r0, [r5, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	9302      	str	r3, [sp, #8]
 8008c80:	9b03      	ldr	r3, [sp, #12]
 8008c82:	2b0e      	cmp	r3, #14
 8008c84:	f200 80e5 	bhi.w	8008e52 <_dtoa_r+0x442>
 8008c88:	2e00      	cmp	r6, #0
 8008c8a:	f000 80e2 	beq.w	8008e52 <_dtoa_r+0x442>
 8008c8e:	ed9d 7b00 	vldr	d7, [sp]
 8008c92:	f1bb 0f00 	cmp.w	fp, #0
 8008c96:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008c9a:	dd74      	ble.n	8008d86 <_dtoa_r+0x376>
 8008c9c:	4a23      	ldr	r2, [pc, #140]	; (8008d2c <_dtoa_r+0x31c>)
 8008c9e:	f00b 030f 	and.w	r3, fp, #15
 8008ca2:	ea4f 162b 	mov.w	r6, fp, asr #4
 8008ca6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008caa:	06f0      	lsls	r0, r6, #27
 8008cac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cb0:	d559      	bpl.n	8008d66 <_dtoa_r+0x356>
 8008cb2:	4b1f      	ldr	r3, [pc, #124]	; (8008d30 <_dtoa_r+0x320>)
 8008cb4:	ec51 0b17 	vmov	r0, r1, d7
 8008cb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cbc:	f7f7 fdc2 	bl	8000844 <__aeabi_ddiv>
 8008cc0:	e9cd 0100 	strd	r0, r1, [sp]
 8008cc4:	f006 060f 	and.w	r6, r6, #15
 8008cc8:	2503      	movs	r5, #3
 8008cca:	4f19      	ldr	r7, [pc, #100]	; (8008d30 <_dtoa_r+0x320>)
 8008ccc:	2e00      	cmp	r6, #0
 8008cce:	d14c      	bne.n	8008d6a <_dtoa_r+0x35a>
 8008cd0:	4642      	mov	r2, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cd8:	f7f7 fdb4 	bl	8000844 <__aeabi_ddiv>
 8008cdc:	e9cd 0100 	strd	r0, r1, [sp]
 8008ce0:	e06a      	b.n	8008db8 <_dtoa_r+0x3a8>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ce8:	445b      	add	r3, fp
 8008cea:	9304      	str	r3, [sp, #16]
 8008cec:	3301      	adds	r3, #1
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	9303      	str	r3, [sp, #12]
 8008cf2:	bfb8      	it	lt
 8008cf4:	2301      	movlt	r3, #1
 8008cf6:	e7b3      	b.n	8008c60 <_dtoa_r+0x250>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	e7ab      	b.n	8008c54 <_dtoa_r+0x244>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	e7f1      	b.n	8008ce4 <_dtoa_r+0x2d4>
 8008d00:	636f4361 	.word	0x636f4361
 8008d04:	3fd287a7 	.word	0x3fd287a7
 8008d08:	8b60c8b3 	.word	0x8b60c8b3
 8008d0c:	3fc68a28 	.word	0x3fc68a28
 8008d10:	509f79fb 	.word	0x509f79fb
 8008d14:	3fd34413 	.word	0x3fd34413
 8008d18:	7ff00000 	.word	0x7ff00000
 8008d1c:	0800af06 	.word	0x0800af06
 8008d20:	0800aefd 	.word	0x0800aefd
 8008d24:	0800ad73 	.word	0x0800ad73
 8008d28:	3ff80000 	.word	0x3ff80000
 8008d2c:	0800af98 	.word	0x0800af98
 8008d30:	0800af70 	.word	0x0800af70
 8008d34:	2601      	movs	r6, #1
 8008d36:	2300      	movs	r3, #0
 8008d38:	9307      	str	r3, [sp, #28]
 8008d3a:	9609      	str	r6, [sp, #36]	; 0x24
 8008d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d40:	9304      	str	r3, [sp, #16]
 8008d42:	9303      	str	r3, [sp, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	2312      	movs	r3, #18
 8008d48:	920a      	str	r2, [sp, #40]	; 0x28
 8008d4a:	e789      	b.n	8008c60 <_dtoa_r+0x250>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d50:	e7f4      	b.n	8008d3c <_dtoa_r+0x32c>
 8008d52:	2301      	movs	r3, #1
 8008d54:	9304      	str	r3, [sp, #16]
 8008d56:	9303      	str	r3, [sp, #12]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	e7f5      	b.n	8008d48 <_dtoa_r+0x338>
 8008d5c:	686a      	ldr	r2, [r5, #4]
 8008d5e:	3201      	adds	r2, #1
 8008d60:	606a      	str	r2, [r5, #4]
 8008d62:	0049      	lsls	r1, r1, #1
 8008d64:	e780      	b.n	8008c68 <_dtoa_r+0x258>
 8008d66:	2502      	movs	r5, #2
 8008d68:	e7af      	b.n	8008cca <_dtoa_r+0x2ba>
 8008d6a:	07f1      	lsls	r1, r6, #31
 8008d6c:	d508      	bpl.n	8008d80 <_dtoa_r+0x370>
 8008d6e:	4640      	mov	r0, r8
 8008d70:	4649      	mov	r1, r9
 8008d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d76:	f7f7 fc3b 	bl	80005f0 <__aeabi_dmul>
 8008d7a:	3501      	adds	r5, #1
 8008d7c:	4680      	mov	r8, r0
 8008d7e:	4689      	mov	r9, r1
 8008d80:	1076      	asrs	r6, r6, #1
 8008d82:	3708      	adds	r7, #8
 8008d84:	e7a2      	b.n	8008ccc <_dtoa_r+0x2bc>
 8008d86:	f000 809d 	beq.w	8008ec4 <_dtoa_r+0x4b4>
 8008d8a:	f1cb 0600 	rsb	r6, fp, #0
 8008d8e:	4b9f      	ldr	r3, [pc, #636]	; (800900c <_dtoa_r+0x5fc>)
 8008d90:	4f9f      	ldr	r7, [pc, #636]	; (8009010 <_dtoa_r+0x600>)
 8008d92:	f006 020f 	and.w	r2, r6, #15
 8008d96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008da2:	f7f7 fc25 	bl	80005f0 <__aeabi_dmul>
 8008da6:	e9cd 0100 	strd	r0, r1, [sp]
 8008daa:	1136      	asrs	r6, r6, #4
 8008dac:	2300      	movs	r3, #0
 8008dae:	2502      	movs	r5, #2
 8008db0:	2e00      	cmp	r6, #0
 8008db2:	d17c      	bne.n	8008eae <_dtoa_r+0x49e>
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d191      	bne.n	8008cdc <_dtoa_r+0x2cc>
 8008db8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 8084 	beq.w	8008ec8 <_dtoa_r+0x4b8>
 8008dc0:	e9dd 8900 	ldrd	r8, r9, [sp]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	4b93      	ldr	r3, [pc, #588]	; (8009014 <_dtoa_r+0x604>)
 8008dc8:	4640      	mov	r0, r8
 8008dca:	4649      	mov	r1, r9
 8008dcc:	f7f7 fe82 	bl	8000ad4 <__aeabi_dcmplt>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d079      	beq.n	8008ec8 <_dtoa_r+0x4b8>
 8008dd4:	9b03      	ldr	r3, [sp, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d076      	beq.n	8008ec8 <_dtoa_r+0x4b8>
 8008dda:	9b04      	ldr	r3, [sp, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	dd34      	ble.n	8008e4a <_dtoa_r+0x43a>
 8008de0:	2200      	movs	r2, #0
 8008de2:	4b8d      	ldr	r3, [pc, #564]	; (8009018 <_dtoa_r+0x608>)
 8008de4:	4640      	mov	r0, r8
 8008de6:	4649      	mov	r1, r9
 8008de8:	f7f7 fc02 	bl	80005f0 <__aeabi_dmul>
 8008dec:	e9cd 0100 	strd	r0, r1, [sp]
 8008df0:	9e04      	ldr	r6, [sp, #16]
 8008df2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008df6:	3501      	adds	r5, #1
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f7f7 fb93 	bl	8000524 <__aeabi_i2d>
 8008dfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e02:	f7f7 fbf5 	bl	80005f0 <__aeabi_dmul>
 8008e06:	2200      	movs	r2, #0
 8008e08:	4b84      	ldr	r3, [pc, #528]	; (800901c <_dtoa_r+0x60c>)
 8008e0a:	f7f7 fa3f 	bl	800028c <__adddf3>
 8008e0e:	4680      	mov	r8, r0
 8008e10:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8008e14:	2e00      	cmp	r6, #0
 8008e16:	d15a      	bne.n	8008ece <_dtoa_r+0x4be>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	4b81      	ldr	r3, [pc, #516]	; (8009020 <_dtoa_r+0x610>)
 8008e1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e20:	f7f7 fa32 	bl	8000288 <__aeabi_dsub>
 8008e24:	4642      	mov	r2, r8
 8008e26:	464b      	mov	r3, r9
 8008e28:	e9cd 0100 	strd	r0, r1, [sp]
 8008e2c:	f7f7 fe70 	bl	8000b10 <__aeabi_dcmpgt>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	f040 829b 	bne.w	800936c <_dtoa_r+0x95c>
 8008e36:	4642      	mov	r2, r8
 8008e38:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e40:	f7f7 fe48 	bl	8000ad4 <__aeabi_dcmplt>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	f040 828f 	bne.w	8009368 <_dtoa_r+0x958>
 8008e4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e4e:	e9cd 2300 	strd	r2, r3, [sp]
 8008e52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f2c0 8150 	blt.w	80090fa <_dtoa_r+0x6ea>
 8008e5a:	f1bb 0f0e 	cmp.w	fp, #14
 8008e5e:	f300 814c 	bgt.w	80090fa <_dtoa_r+0x6ea>
 8008e62:	4b6a      	ldr	r3, [pc, #424]	; (800900c <_dtoa_r+0x5fc>)
 8008e64:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f280 80da 	bge.w	8009028 <_dtoa_r+0x618>
 8008e74:	9b03      	ldr	r3, [sp, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f300 80d6 	bgt.w	8009028 <_dtoa_r+0x618>
 8008e7c:	f040 8273 	bne.w	8009366 <_dtoa_r+0x956>
 8008e80:	2200      	movs	r2, #0
 8008e82:	4b67      	ldr	r3, [pc, #412]	; (8009020 <_dtoa_r+0x610>)
 8008e84:	4640      	mov	r0, r8
 8008e86:	4649      	mov	r1, r9
 8008e88:	f7f7 fbb2 	bl	80005f0 <__aeabi_dmul>
 8008e8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e90:	f7f7 fe34 	bl	8000afc <__aeabi_dcmpge>
 8008e94:	9e03      	ldr	r6, [sp, #12]
 8008e96:	4637      	mov	r7, r6
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	f040 824a 	bne.w	8009332 <_dtoa_r+0x922>
 8008e9e:	9b02      	ldr	r3, [sp, #8]
 8008ea0:	9a02      	ldr	r2, [sp, #8]
 8008ea2:	1c5d      	adds	r5, r3, #1
 8008ea4:	2331      	movs	r3, #49	; 0x31
 8008ea6:	7013      	strb	r3, [r2, #0]
 8008ea8:	f10b 0b01 	add.w	fp, fp, #1
 8008eac:	e245      	b.n	800933a <_dtoa_r+0x92a>
 8008eae:	07f2      	lsls	r2, r6, #31
 8008eb0:	d505      	bpl.n	8008ebe <_dtoa_r+0x4ae>
 8008eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eb6:	f7f7 fb9b 	bl	80005f0 <__aeabi_dmul>
 8008eba:	3501      	adds	r5, #1
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	1076      	asrs	r6, r6, #1
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	e775      	b.n	8008db0 <_dtoa_r+0x3a0>
 8008ec4:	2502      	movs	r5, #2
 8008ec6:	e777      	b.n	8008db8 <_dtoa_r+0x3a8>
 8008ec8:	465f      	mov	r7, fp
 8008eca:	9e03      	ldr	r6, [sp, #12]
 8008ecc:	e794      	b.n	8008df8 <_dtoa_r+0x3e8>
 8008ece:	9a02      	ldr	r2, [sp, #8]
 8008ed0:	4b4e      	ldr	r3, [pc, #312]	; (800900c <_dtoa_r+0x5fc>)
 8008ed2:	4432      	add	r2, r6
 8008ed4:	9213      	str	r2, [sp, #76]	; 0x4c
 8008ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ed8:	1e71      	subs	r1, r6, #1
 8008eda:	2a00      	cmp	r2, #0
 8008edc:	d048      	beq.n	8008f70 <_dtoa_r+0x560>
 8008ede:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	494e      	ldr	r1, [pc, #312]	; (8009024 <_dtoa_r+0x614>)
 8008eea:	f7f7 fcab 	bl	8000844 <__aeabi_ddiv>
 8008eee:	4642      	mov	r2, r8
 8008ef0:	464b      	mov	r3, r9
 8008ef2:	f7f7 f9c9 	bl	8000288 <__aeabi_dsub>
 8008ef6:	9d02      	ldr	r5, [sp, #8]
 8008ef8:	4680      	mov	r8, r0
 8008efa:	4689      	mov	r9, r1
 8008efc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f00:	f7f7 fe26 	bl	8000b50 <__aeabi_d2iz>
 8008f04:	4606      	mov	r6, r0
 8008f06:	f7f7 fb0d 	bl	8000524 <__aeabi_i2d>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f12:	f7f7 f9b9 	bl	8000288 <__aeabi_dsub>
 8008f16:	3630      	adds	r6, #48	; 0x30
 8008f18:	f805 6b01 	strb.w	r6, [r5], #1
 8008f1c:	4642      	mov	r2, r8
 8008f1e:	464b      	mov	r3, r9
 8008f20:	e9cd 0100 	strd	r0, r1, [sp]
 8008f24:	f7f7 fdd6 	bl	8000ad4 <__aeabi_dcmplt>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d165      	bne.n	8008ff8 <_dtoa_r+0x5e8>
 8008f2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f30:	2000      	movs	r0, #0
 8008f32:	4938      	ldr	r1, [pc, #224]	; (8009014 <_dtoa_r+0x604>)
 8008f34:	f7f7 f9a8 	bl	8000288 <__aeabi_dsub>
 8008f38:	4642      	mov	r2, r8
 8008f3a:	464b      	mov	r3, r9
 8008f3c:	f7f7 fdca 	bl	8000ad4 <__aeabi_dcmplt>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	f040 80ba 	bne.w	80090ba <_dtoa_r+0x6aa>
 8008f46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f48:	429d      	cmp	r5, r3
 8008f4a:	f43f af7e 	beq.w	8008e4a <_dtoa_r+0x43a>
 8008f4e:	2200      	movs	r2, #0
 8008f50:	4b31      	ldr	r3, [pc, #196]	; (8009018 <_dtoa_r+0x608>)
 8008f52:	4640      	mov	r0, r8
 8008f54:	4649      	mov	r1, r9
 8008f56:	f7f7 fb4b 	bl	80005f0 <__aeabi_dmul>
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	4680      	mov	r8, r0
 8008f5e:	4689      	mov	r9, r1
 8008f60:	4b2d      	ldr	r3, [pc, #180]	; (8009018 <_dtoa_r+0x608>)
 8008f62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f66:	f7f7 fb43 	bl	80005f0 <__aeabi_dmul>
 8008f6a:	e9cd 0100 	strd	r0, r1, [sp]
 8008f6e:	e7c5      	b.n	8008efc <_dtoa_r+0x4ec>
 8008f70:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8008f74:	4642      	mov	r2, r8
 8008f76:	464b      	mov	r3, r9
 8008f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f7c:	f7f7 fb38 	bl	80005f0 <__aeabi_dmul>
 8008f80:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008f84:	9d02      	ldr	r5, [sp, #8]
 8008f86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f8a:	f7f7 fde1 	bl	8000b50 <__aeabi_d2iz>
 8008f8e:	4606      	mov	r6, r0
 8008f90:	f7f7 fac8 	bl	8000524 <__aeabi_i2d>
 8008f94:	3630      	adds	r6, #48	; 0x30
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f9e:	f7f7 f973 	bl	8000288 <__aeabi_dsub>
 8008fa2:	f805 6b01 	strb.w	r6, [r5], #1
 8008fa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fa8:	42ab      	cmp	r3, r5
 8008faa:	4680      	mov	r8, r0
 8008fac:	4689      	mov	r9, r1
 8008fae:	f04f 0200 	mov.w	r2, #0
 8008fb2:	d125      	bne.n	8009000 <_dtoa_r+0x5f0>
 8008fb4:	4b1b      	ldr	r3, [pc, #108]	; (8009024 <_dtoa_r+0x614>)
 8008fb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008fba:	f7f7 f967 	bl	800028c <__adddf3>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	4649      	mov	r1, r9
 8008fc6:	f7f7 fda3 	bl	8000b10 <__aeabi_dcmpgt>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	d175      	bne.n	80090ba <_dtoa_r+0x6aa>
 8008fce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	4913      	ldr	r1, [pc, #76]	; (8009024 <_dtoa_r+0x614>)
 8008fd6:	f7f7 f957 	bl	8000288 <__aeabi_dsub>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4640      	mov	r0, r8
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	f7f7 fd77 	bl	8000ad4 <__aeabi_dcmplt>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f43f af2f 	beq.w	8008e4a <_dtoa_r+0x43a>
 8008fec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ff0:	2b30      	cmp	r3, #48	; 0x30
 8008ff2:	f105 32ff 	add.w	r2, r5, #4294967295
 8008ff6:	d001      	beq.n	8008ffc <_dtoa_r+0x5ec>
 8008ff8:	46bb      	mov	fp, r7
 8008ffa:	e04d      	b.n	8009098 <_dtoa_r+0x688>
 8008ffc:	4615      	mov	r5, r2
 8008ffe:	e7f5      	b.n	8008fec <_dtoa_r+0x5dc>
 8009000:	4b05      	ldr	r3, [pc, #20]	; (8009018 <_dtoa_r+0x608>)
 8009002:	f7f7 faf5 	bl	80005f0 <__aeabi_dmul>
 8009006:	e9cd 0100 	strd	r0, r1, [sp]
 800900a:	e7bc      	b.n	8008f86 <_dtoa_r+0x576>
 800900c:	0800af98 	.word	0x0800af98
 8009010:	0800af70 	.word	0x0800af70
 8009014:	3ff00000 	.word	0x3ff00000
 8009018:	40240000 	.word	0x40240000
 800901c:	401c0000 	.word	0x401c0000
 8009020:	40140000 	.word	0x40140000
 8009024:	3fe00000 	.word	0x3fe00000
 8009028:	e9dd 6700 	ldrd	r6, r7, [sp]
 800902c:	9d02      	ldr	r5, [sp, #8]
 800902e:	4642      	mov	r2, r8
 8009030:	464b      	mov	r3, r9
 8009032:	4630      	mov	r0, r6
 8009034:	4639      	mov	r1, r7
 8009036:	f7f7 fc05 	bl	8000844 <__aeabi_ddiv>
 800903a:	f7f7 fd89 	bl	8000b50 <__aeabi_d2iz>
 800903e:	9000      	str	r0, [sp, #0]
 8009040:	f7f7 fa70 	bl	8000524 <__aeabi_i2d>
 8009044:	4642      	mov	r2, r8
 8009046:	464b      	mov	r3, r9
 8009048:	f7f7 fad2 	bl	80005f0 <__aeabi_dmul>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4630      	mov	r0, r6
 8009052:	4639      	mov	r1, r7
 8009054:	f7f7 f918 	bl	8000288 <__aeabi_dsub>
 8009058:	9e00      	ldr	r6, [sp, #0]
 800905a:	9f03      	ldr	r7, [sp, #12]
 800905c:	3630      	adds	r6, #48	; 0x30
 800905e:	f805 6b01 	strb.w	r6, [r5], #1
 8009062:	9e02      	ldr	r6, [sp, #8]
 8009064:	1bae      	subs	r6, r5, r6
 8009066:	42b7      	cmp	r7, r6
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	d138      	bne.n	80090e0 <_dtoa_r+0x6d0>
 800906e:	f7f7 f90d 	bl	800028c <__adddf3>
 8009072:	4606      	mov	r6, r0
 8009074:	460f      	mov	r7, r1
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	4640      	mov	r0, r8
 800907c:	4649      	mov	r1, r9
 800907e:	f7f7 fd29 	bl	8000ad4 <__aeabi_dcmplt>
 8009082:	b9c8      	cbnz	r0, 80090b8 <_dtoa_r+0x6a8>
 8009084:	4632      	mov	r2, r6
 8009086:	463b      	mov	r3, r7
 8009088:	4640      	mov	r0, r8
 800908a:	4649      	mov	r1, r9
 800908c:	f7f7 fd18 	bl	8000ac0 <__aeabi_dcmpeq>
 8009090:	b110      	cbz	r0, 8009098 <_dtoa_r+0x688>
 8009092:	9b00      	ldr	r3, [sp, #0]
 8009094:	07db      	lsls	r3, r3, #31
 8009096:	d40f      	bmi.n	80090b8 <_dtoa_r+0x6a8>
 8009098:	4651      	mov	r1, sl
 800909a:	4620      	mov	r0, r4
 800909c:	f000 fcb0 	bl	8009a00 <_Bfree>
 80090a0:	2300      	movs	r3, #0
 80090a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090a4:	702b      	strb	r3, [r5, #0]
 80090a6:	f10b 0301 	add.w	r3, fp, #1
 80090aa:	6013      	str	r3, [r2, #0]
 80090ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f43f acf8 	beq.w	8008aa4 <_dtoa_r+0x94>
 80090b4:	601d      	str	r5, [r3, #0]
 80090b6:	e4f5      	b.n	8008aa4 <_dtoa_r+0x94>
 80090b8:	465f      	mov	r7, fp
 80090ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80090be:	2a39      	cmp	r2, #57	; 0x39
 80090c0:	f105 33ff 	add.w	r3, r5, #4294967295
 80090c4:	d106      	bne.n	80090d4 <_dtoa_r+0x6c4>
 80090c6:	9a02      	ldr	r2, [sp, #8]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d107      	bne.n	80090dc <_dtoa_r+0x6cc>
 80090cc:	2330      	movs	r3, #48	; 0x30
 80090ce:	7013      	strb	r3, [r2, #0]
 80090d0:	3701      	adds	r7, #1
 80090d2:	4613      	mov	r3, r2
 80090d4:	781a      	ldrb	r2, [r3, #0]
 80090d6:	3201      	adds	r2, #1
 80090d8:	701a      	strb	r2, [r3, #0]
 80090da:	e78d      	b.n	8008ff8 <_dtoa_r+0x5e8>
 80090dc:	461d      	mov	r5, r3
 80090de:	e7ec      	b.n	80090ba <_dtoa_r+0x6aa>
 80090e0:	2200      	movs	r2, #0
 80090e2:	4ba4      	ldr	r3, [pc, #656]	; (8009374 <_dtoa_r+0x964>)
 80090e4:	f7f7 fa84 	bl	80005f0 <__aeabi_dmul>
 80090e8:	2200      	movs	r2, #0
 80090ea:	2300      	movs	r3, #0
 80090ec:	4606      	mov	r6, r0
 80090ee:	460f      	mov	r7, r1
 80090f0:	f7f7 fce6 	bl	8000ac0 <__aeabi_dcmpeq>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d09a      	beq.n	800902e <_dtoa_r+0x61e>
 80090f8:	e7ce      	b.n	8009098 <_dtoa_r+0x688>
 80090fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090fc:	2a00      	cmp	r2, #0
 80090fe:	f000 80cd 	beq.w	800929c <_dtoa_r+0x88c>
 8009102:	9a07      	ldr	r2, [sp, #28]
 8009104:	2a01      	cmp	r2, #1
 8009106:	f300 80af 	bgt.w	8009268 <_dtoa_r+0x858>
 800910a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800910c:	2a00      	cmp	r2, #0
 800910e:	f000 80a7 	beq.w	8009260 <_dtoa_r+0x850>
 8009112:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009116:	9e08      	ldr	r6, [sp, #32]
 8009118:	9d05      	ldr	r5, [sp, #20]
 800911a:	9a05      	ldr	r2, [sp, #20]
 800911c:	441a      	add	r2, r3
 800911e:	9205      	str	r2, [sp, #20]
 8009120:	9a06      	ldr	r2, [sp, #24]
 8009122:	2101      	movs	r1, #1
 8009124:	441a      	add	r2, r3
 8009126:	4620      	mov	r0, r4
 8009128:	9206      	str	r2, [sp, #24]
 800912a:	f000 fd09 	bl	8009b40 <__i2b>
 800912e:	4607      	mov	r7, r0
 8009130:	2d00      	cmp	r5, #0
 8009132:	dd0c      	ble.n	800914e <_dtoa_r+0x73e>
 8009134:	9b06      	ldr	r3, [sp, #24]
 8009136:	2b00      	cmp	r3, #0
 8009138:	dd09      	ble.n	800914e <_dtoa_r+0x73e>
 800913a:	42ab      	cmp	r3, r5
 800913c:	9a05      	ldr	r2, [sp, #20]
 800913e:	bfa8      	it	ge
 8009140:	462b      	movge	r3, r5
 8009142:	1ad2      	subs	r2, r2, r3
 8009144:	9205      	str	r2, [sp, #20]
 8009146:	9a06      	ldr	r2, [sp, #24]
 8009148:	1aed      	subs	r5, r5, r3
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	9306      	str	r3, [sp, #24]
 800914e:	9b08      	ldr	r3, [sp, #32]
 8009150:	b1f3      	cbz	r3, 8009190 <_dtoa_r+0x780>
 8009152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009154:	2b00      	cmp	r3, #0
 8009156:	f000 80a5 	beq.w	80092a4 <_dtoa_r+0x894>
 800915a:	2e00      	cmp	r6, #0
 800915c:	dd10      	ble.n	8009180 <_dtoa_r+0x770>
 800915e:	4639      	mov	r1, r7
 8009160:	4632      	mov	r2, r6
 8009162:	4620      	mov	r0, r4
 8009164:	f000 fd82 	bl	8009c6c <__pow5mult>
 8009168:	4652      	mov	r2, sl
 800916a:	4601      	mov	r1, r0
 800916c:	4607      	mov	r7, r0
 800916e:	4620      	mov	r0, r4
 8009170:	f000 fcef 	bl	8009b52 <__multiply>
 8009174:	4651      	mov	r1, sl
 8009176:	4680      	mov	r8, r0
 8009178:	4620      	mov	r0, r4
 800917a:	f000 fc41 	bl	8009a00 <_Bfree>
 800917e:	46c2      	mov	sl, r8
 8009180:	9b08      	ldr	r3, [sp, #32]
 8009182:	1b9a      	subs	r2, r3, r6
 8009184:	d004      	beq.n	8009190 <_dtoa_r+0x780>
 8009186:	4651      	mov	r1, sl
 8009188:	4620      	mov	r0, r4
 800918a:	f000 fd6f 	bl	8009c6c <__pow5mult>
 800918e:	4682      	mov	sl, r0
 8009190:	2101      	movs	r1, #1
 8009192:	4620      	mov	r0, r4
 8009194:	f000 fcd4 	bl	8009b40 <__i2b>
 8009198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800919a:	2b00      	cmp	r3, #0
 800919c:	4606      	mov	r6, r0
 800919e:	f340 8083 	ble.w	80092a8 <_dtoa_r+0x898>
 80091a2:	461a      	mov	r2, r3
 80091a4:	4601      	mov	r1, r0
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 fd60 	bl	8009c6c <__pow5mult>
 80091ac:	9b07      	ldr	r3, [sp, #28]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	4606      	mov	r6, r0
 80091b2:	dd7c      	ble.n	80092ae <_dtoa_r+0x89e>
 80091b4:	f04f 0800 	mov.w	r8, #0
 80091b8:	6933      	ldr	r3, [r6, #16]
 80091ba:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091be:	6918      	ldr	r0, [r3, #16]
 80091c0:	f000 fc70 	bl	8009aa4 <__hi0bits>
 80091c4:	f1c0 0020 	rsb	r0, r0, #32
 80091c8:	9b06      	ldr	r3, [sp, #24]
 80091ca:	4418      	add	r0, r3
 80091cc:	f010 001f 	ands.w	r0, r0, #31
 80091d0:	f000 8096 	beq.w	8009300 <_dtoa_r+0x8f0>
 80091d4:	f1c0 0320 	rsb	r3, r0, #32
 80091d8:	2b04      	cmp	r3, #4
 80091da:	f340 8087 	ble.w	80092ec <_dtoa_r+0x8dc>
 80091de:	9b05      	ldr	r3, [sp, #20]
 80091e0:	f1c0 001c 	rsb	r0, r0, #28
 80091e4:	4403      	add	r3, r0
 80091e6:	9305      	str	r3, [sp, #20]
 80091e8:	9b06      	ldr	r3, [sp, #24]
 80091ea:	4405      	add	r5, r0
 80091ec:	4403      	add	r3, r0
 80091ee:	9306      	str	r3, [sp, #24]
 80091f0:	9b05      	ldr	r3, [sp, #20]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	dd05      	ble.n	8009202 <_dtoa_r+0x7f2>
 80091f6:	4651      	mov	r1, sl
 80091f8:	461a      	mov	r2, r3
 80091fa:	4620      	mov	r0, r4
 80091fc:	f000 fd84 	bl	8009d08 <__lshift>
 8009200:	4682      	mov	sl, r0
 8009202:	9b06      	ldr	r3, [sp, #24]
 8009204:	2b00      	cmp	r3, #0
 8009206:	dd05      	ble.n	8009214 <_dtoa_r+0x804>
 8009208:	4631      	mov	r1, r6
 800920a:	461a      	mov	r2, r3
 800920c:	4620      	mov	r0, r4
 800920e:	f000 fd7b 	bl	8009d08 <__lshift>
 8009212:	4606      	mov	r6, r0
 8009214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009216:	2b00      	cmp	r3, #0
 8009218:	d074      	beq.n	8009304 <_dtoa_r+0x8f4>
 800921a:	4631      	mov	r1, r6
 800921c:	4650      	mov	r0, sl
 800921e:	f000 fdc4 	bl	8009daa <__mcmp>
 8009222:	2800      	cmp	r0, #0
 8009224:	da6e      	bge.n	8009304 <_dtoa_r+0x8f4>
 8009226:	2300      	movs	r3, #0
 8009228:	4651      	mov	r1, sl
 800922a:	220a      	movs	r2, #10
 800922c:	4620      	mov	r0, r4
 800922e:	f000 fbfe 	bl	8009a2e <__multadd>
 8009232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009234:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009238:	4682      	mov	sl, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 81a8 	beq.w	8009590 <_dtoa_r+0xb80>
 8009240:	2300      	movs	r3, #0
 8009242:	4639      	mov	r1, r7
 8009244:	220a      	movs	r2, #10
 8009246:	4620      	mov	r0, r4
 8009248:	f000 fbf1 	bl	8009a2e <__multadd>
 800924c:	9b04      	ldr	r3, [sp, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	4607      	mov	r7, r0
 8009252:	f300 80c8 	bgt.w	80093e6 <_dtoa_r+0x9d6>
 8009256:	9b07      	ldr	r3, [sp, #28]
 8009258:	2b02      	cmp	r3, #2
 800925a:	f340 80c4 	ble.w	80093e6 <_dtoa_r+0x9d6>
 800925e:	e059      	b.n	8009314 <_dtoa_r+0x904>
 8009260:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009262:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009266:	e756      	b.n	8009116 <_dtoa_r+0x706>
 8009268:	9b03      	ldr	r3, [sp, #12]
 800926a:	1e5e      	subs	r6, r3, #1
 800926c:	9b08      	ldr	r3, [sp, #32]
 800926e:	42b3      	cmp	r3, r6
 8009270:	bfbf      	itttt	lt
 8009272:	9b08      	ldrlt	r3, [sp, #32]
 8009274:	9608      	strlt	r6, [sp, #32]
 8009276:	1af2      	sublt	r2, r6, r3
 8009278:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800927a:	bfb6      	itet	lt
 800927c:	189b      	addlt	r3, r3, r2
 800927e:	1b9e      	subge	r6, r3, r6
 8009280:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8009282:	9b03      	ldr	r3, [sp, #12]
 8009284:	bfb8      	it	lt
 8009286:	2600      	movlt	r6, #0
 8009288:	2b00      	cmp	r3, #0
 800928a:	bfb9      	ittee	lt
 800928c:	9b05      	ldrlt	r3, [sp, #20]
 800928e:	9a03      	ldrlt	r2, [sp, #12]
 8009290:	9d05      	ldrge	r5, [sp, #20]
 8009292:	9b03      	ldrge	r3, [sp, #12]
 8009294:	bfbc      	itt	lt
 8009296:	1a9d      	sublt	r5, r3, r2
 8009298:	2300      	movlt	r3, #0
 800929a:	e73e      	b.n	800911a <_dtoa_r+0x70a>
 800929c:	9e08      	ldr	r6, [sp, #32]
 800929e:	9d05      	ldr	r5, [sp, #20]
 80092a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80092a2:	e745      	b.n	8009130 <_dtoa_r+0x720>
 80092a4:	9a08      	ldr	r2, [sp, #32]
 80092a6:	e76e      	b.n	8009186 <_dtoa_r+0x776>
 80092a8:	9b07      	ldr	r3, [sp, #28]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	dc19      	bgt.n	80092e2 <_dtoa_r+0x8d2>
 80092ae:	9b00      	ldr	r3, [sp, #0]
 80092b0:	b9bb      	cbnz	r3, 80092e2 <_dtoa_r+0x8d2>
 80092b2:	9b01      	ldr	r3, [sp, #4]
 80092b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092b8:	b99b      	cbnz	r3, 80092e2 <_dtoa_r+0x8d2>
 80092ba:	9b01      	ldr	r3, [sp, #4]
 80092bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092c0:	0d1b      	lsrs	r3, r3, #20
 80092c2:	051b      	lsls	r3, r3, #20
 80092c4:	b183      	cbz	r3, 80092e8 <_dtoa_r+0x8d8>
 80092c6:	9b05      	ldr	r3, [sp, #20]
 80092c8:	3301      	adds	r3, #1
 80092ca:	9305      	str	r3, [sp, #20]
 80092cc:	9b06      	ldr	r3, [sp, #24]
 80092ce:	3301      	adds	r3, #1
 80092d0:	9306      	str	r3, [sp, #24]
 80092d2:	f04f 0801 	mov.w	r8, #1
 80092d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f47f af6d 	bne.w	80091b8 <_dtoa_r+0x7a8>
 80092de:	2001      	movs	r0, #1
 80092e0:	e772      	b.n	80091c8 <_dtoa_r+0x7b8>
 80092e2:	f04f 0800 	mov.w	r8, #0
 80092e6:	e7f6      	b.n	80092d6 <_dtoa_r+0x8c6>
 80092e8:	4698      	mov	r8, r3
 80092ea:	e7f4      	b.n	80092d6 <_dtoa_r+0x8c6>
 80092ec:	d080      	beq.n	80091f0 <_dtoa_r+0x7e0>
 80092ee:	9a05      	ldr	r2, [sp, #20]
 80092f0:	331c      	adds	r3, #28
 80092f2:	441a      	add	r2, r3
 80092f4:	9205      	str	r2, [sp, #20]
 80092f6:	9a06      	ldr	r2, [sp, #24]
 80092f8:	441a      	add	r2, r3
 80092fa:	441d      	add	r5, r3
 80092fc:	4613      	mov	r3, r2
 80092fe:	e776      	b.n	80091ee <_dtoa_r+0x7de>
 8009300:	4603      	mov	r3, r0
 8009302:	e7f4      	b.n	80092ee <_dtoa_r+0x8de>
 8009304:	9b03      	ldr	r3, [sp, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	dc36      	bgt.n	8009378 <_dtoa_r+0x968>
 800930a:	9b07      	ldr	r3, [sp, #28]
 800930c:	2b02      	cmp	r3, #2
 800930e:	dd33      	ble.n	8009378 <_dtoa_r+0x968>
 8009310:	9b03      	ldr	r3, [sp, #12]
 8009312:	9304      	str	r3, [sp, #16]
 8009314:	9b04      	ldr	r3, [sp, #16]
 8009316:	b963      	cbnz	r3, 8009332 <_dtoa_r+0x922>
 8009318:	4631      	mov	r1, r6
 800931a:	2205      	movs	r2, #5
 800931c:	4620      	mov	r0, r4
 800931e:	f000 fb86 	bl	8009a2e <__multadd>
 8009322:	4601      	mov	r1, r0
 8009324:	4606      	mov	r6, r0
 8009326:	4650      	mov	r0, sl
 8009328:	f000 fd3f 	bl	8009daa <__mcmp>
 800932c:	2800      	cmp	r0, #0
 800932e:	f73f adb6 	bgt.w	8008e9e <_dtoa_r+0x48e>
 8009332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009334:	9d02      	ldr	r5, [sp, #8]
 8009336:	ea6f 0b03 	mvn.w	fp, r3
 800933a:	2300      	movs	r3, #0
 800933c:	9303      	str	r3, [sp, #12]
 800933e:	4631      	mov	r1, r6
 8009340:	4620      	mov	r0, r4
 8009342:	f000 fb5d 	bl	8009a00 <_Bfree>
 8009346:	2f00      	cmp	r7, #0
 8009348:	f43f aea6 	beq.w	8009098 <_dtoa_r+0x688>
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	b12b      	cbz	r3, 800935c <_dtoa_r+0x94c>
 8009350:	42bb      	cmp	r3, r7
 8009352:	d003      	beq.n	800935c <_dtoa_r+0x94c>
 8009354:	4619      	mov	r1, r3
 8009356:	4620      	mov	r0, r4
 8009358:	f000 fb52 	bl	8009a00 <_Bfree>
 800935c:	4639      	mov	r1, r7
 800935e:	4620      	mov	r0, r4
 8009360:	f000 fb4e 	bl	8009a00 <_Bfree>
 8009364:	e698      	b.n	8009098 <_dtoa_r+0x688>
 8009366:	2600      	movs	r6, #0
 8009368:	4637      	mov	r7, r6
 800936a:	e7e2      	b.n	8009332 <_dtoa_r+0x922>
 800936c:	46bb      	mov	fp, r7
 800936e:	4637      	mov	r7, r6
 8009370:	e595      	b.n	8008e9e <_dtoa_r+0x48e>
 8009372:	bf00      	nop
 8009374:	40240000 	.word	0x40240000
 8009378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800937a:	bb93      	cbnz	r3, 80093e2 <_dtoa_r+0x9d2>
 800937c:	9b03      	ldr	r3, [sp, #12]
 800937e:	9304      	str	r3, [sp, #16]
 8009380:	9d02      	ldr	r5, [sp, #8]
 8009382:	4631      	mov	r1, r6
 8009384:	4650      	mov	r0, sl
 8009386:	f7ff fab5 	bl	80088f4 <quorem>
 800938a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800938e:	f805 9b01 	strb.w	r9, [r5], #1
 8009392:	9b02      	ldr	r3, [sp, #8]
 8009394:	9a04      	ldr	r2, [sp, #16]
 8009396:	1aeb      	subs	r3, r5, r3
 8009398:	429a      	cmp	r2, r3
 800939a:	f300 80dc 	bgt.w	8009556 <_dtoa_r+0xb46>
 800939e:	9b02      	ldr	r3, [sp, #8]
 80093a0:	2a01      	cmp	r2, #1
 80093a2:	bfac      	ite	ge
 80093a4:	189b      	addge	r3, r3, r2
 80093a6:	3301      	addlt	r3, #1
 80093a8:	4698      	mov	r8, r3
 80093aa:	2300      	movs	r3, #0
 80093ac:	9303      	str	r3, [sp, #12]
 80093ae:	4651      	mov	r1, sl
 80093b0:	2201      	movs	r2, #1
 80093b2:	4620      	mov	r0, r4
 80093b4:	f000 fca8 	bl	8009d08 <__lshift>
 80093b8:	4631      	mov	r1, r6
 80093ba:	4682      	mov	sl, r0
 80093bc:	f000 fcf5 	bl	8009daa <__mcmp>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	f300 808d 	bgt.w	80094e0 <_dtoa_r+0xad0>
 80093c6:	d103      	bne.n	80093d0 <_dtoa_r+0x9c0>
 80093c8:	f019 0f01 	tst.w	r9, #1
 80093cc:	f040 8088 	bne.w	80094e0 <_dtoa_r+0xad0>
 80093d0:	4645      	mov	r5, r8
 80093d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093d6:	2b30      	cmp	r3, #48	; 0x30
 80093d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80093dc:	d1af      	bne.n	800933e <_dtoa_r+0x92e>
 80093de:	4615      	mov	r5, r2
 80093e0:	e7f7      	b.n	80093d2 <_dtoa_r+0x9c2>
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	9304      	str	r3, [sp, #16]
 80093e6:	2d00      	cmp	r5, #0
 80093e8:	dd05      	ble.n	80093f6 <_dtoa_r+0x9e6>
 80093ea:	4639      	mov	r1, r7
 80093ec:	462a      	mov	r2, r5
 80093ee:	4620      	mov	r0, r4
 80093f0:	f000 fc8a 	bl	8009d08 <__lshift>
 80093f4:	4607      	mov	r7, r0
 80093f6:	f1b8 0f00 	cmp.w	r8, #0
 80093fa:	d04c      	beq.n	8009496 <_dtoa_r+0xa86>
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 faca 	bl	8009998 <_Balloc>
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	3202      	adds	r2, #2
 8009408:	4605      	mov	r5, r0
 800940a:	0092      	lsls	r2, r2, #2
 800940c:	f107 010c 	add.w	r1, r7, #12
 8009410:	300c      	adds	r0, #12
 8009412:	f7fe fc9f 	bl	8007d54 <memcpy>
 8009416:	2201      	movs	r2, #1
 8009418:	4629      	mov	r1, r5
 800941a:	4620      	mov	r0, r4
 800941c:	f000 fc74 	bl	8009d08 <__lshift>
 8009420:	9b00      	ldr	r3, [sp, #0]
 8009422:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009426:	9703      	str	r7, [sp, #12]
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	4607      	mov	r7, r0
 800942e:	9305      	str	r3, [sp, #20]
 8009430:	4631      	mov	r1, r6
 8009432:	4650      	mov	r0, sl
 8009434:	f7ff fa5e 	bl	80088f4 <quorem>
 8009438:	9903      	ldr	r1, [sp, #12]
 800943a:	4605      	mov	r5, r0
 800943c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009440:	4650      	mov	r0, sl
 8009442:	f000 fcb2 	bl	8009daa <__mcmp>
 8009446:	463a      	mov	r2, r7
 8009448:	9000      	str	r0, [sp, #0]
 800944a:	4631      	mov	r1, r6
 800944c:	4620      	mov	r0, r4
 800944e:	f000 fcc6 	bl	8009dde <__mdiff>
 8009452:	68c3      	ldr	r3, [r0, #12]
 8009454:	4602      	mov	r2, r0
 8009456:	bb03      	cbnz	r3, 800949a <_dtoa_r+0xa8a>
 8009458:	4601      	mov	r1, r0
 800945a:	9006      	str	r0, [sp, #24]
 800945c:	4650      	mov	r0, sl
 800945e:	f000 fca4 	bl	8009daa <__mcmp>
 8009462:	9a06      	ldr	r2, [sp, #24]
 8009464:	4603      	mov	r3, r0
 8009466:	4611      	mov	r1, r2
 8009468:	4620      	mov	r0, r4
 800946a:	9306      	str	r3, [sp, #24]
 800946c:	f000 fac8 	bl	8009a00 <_Bfree>
 8009470:	9b06      	ldr	r3, [sp, #24]
 8009472:	b9a3      	cbnz	r3, 800949e <_dtoa_r+0xa8e>
 8009474:	9a07      	ldr	r2, [sp, #28]
 8009476:	b992      	cbnz	r2, 800949e <_dtoa_r+0xa8e>
 8009478:	9a05      	ldr	r2, [sp, #20]
 800947a:	b982      	cbnz	r2, 800949e <_dtoa_r+0xa8e>
 800947c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009480:	d029      	beq.n	80094d6 <_dtoa_r+0xac6>
 8009482:	9b00      	ldr	r3, [sp, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	dd01      	ble.n	800948c <_dtoa_r+0xa7c>
 8009488:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800948c:	f108 0501 	add.w	r5, r8, #1
 8009490:	f888 9000 	strb.w	r9, [r8]
 8009494:	e753      	b.n	800933e <_dtoa_r+0x92e>
 8009496:	4638      	mov	r0, r7
 8009498:	e7c2      	b.n	8009420 <_dtoa_r+0xa10>
 800949a:	2301      	movs	r3, #1
 800949c:	e7e3      	b.n	8009466 <_dtoa_r+0xa56>
 800949e:	9a00      	ldr	r2, [sp, #0]
 80094a0:	2a00      	cmp	r2, #0
 80094a2:	db04      	blt.n	80094ae <_dtoa_r+0xa9e>
 80094a4:	d125      	bne.n	80094f2 <_dtoa_r+0xae2>
 80094a6:	9a07      	ldr	r2, [sp, #28]
 80094a8:	bb1a      	cbnz	r2, 80094f2 <_dtoa_r+0xae2>
 80094aa:	9a05      	ldr	r2, [sp, #20]
 80094ac:	bb0a      	cbnz	r2, 80094f2 <_dtoa_r+0xae2>
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	ddec      	ble.n	800948c <_dtoa_r+0xa7c>
 80094b2:	4651      	mov	r1, sl
 80094b4:	2201      	movs	r2, #1
 80094b6:	4620      	mov	r0, r4
 80094b8:	f000 fc26 	bl	8009d08 <__lshift>
 80094bc:	4631      	mov	r1, r6
 80094be:	4682      	mov	sl, r0
 80094c0:	f000 fc73 	bl	8009daa <__mcmp>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	dc03      	bgt.n	80094d0 <_dtoa_r+0xac0>
 80094c8:	d1e0      	bne.n	800948c <_dtoa_r+0xa7c>
 80094ca:	f019 0f01 	tst.w	r9, #1
 80094ce:	d0dd      	beq.n	800948c <_dtoa_r+0xa7c>
 80094d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80094d4:	d1d8      	bne.n	8009488 <_dtoa_r+0xa78>
 80094d6:	2339      	movs	r3, #57	; 0x39
 80094d8:	f888 3000 	strb.w	r3, [r8]
 80094dc:	f108 0801 	add.w	r8, r8, #1
 80094e0:	4645      	mov	r5, r8
 80094e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094e6:	2b39      	cmp	r3, #57	; 0x39
 80094e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80094ec:	d03b      	beq.n	8009566 <_dtoa_r+0xb56>
 80094ee:	3301      	adds	r3, #1
 80094f0:	e040      	b.n	8009574 <_dtoa_r+0xb64>
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f108 0501 	add.w	r5, r8, #1
 80094f8:	dd05      	ble.n	8009506 <_dtoa_r+0xaf6>
 80094fa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80094fe:	d0ea      	beq.n	80094d6 <_dtoa_r+0xac6>
 8009500:	f109 0901 	add.w	r9, r9, #1
 8009504:	e7c4      	b.n	8009490 <_dtoa_r+0xa80>
 8009506:	9b02      	ldr	r3, [sp, #8]
 8009508:	9a04      	ldr	r2, [sp, #16]
 800950a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800950e:	1aeb      	subs	r3, r5, r3
 8009510:	4293      	cmp	r3, r2
 8009512:	46a8      	mov	r8, r5
 8009514:	f43f af4b 	beq.w	80093ae <_dtoa_r+0x99e>
 8009518:	4651      	mov	r1, sl
 800951a:	2300      	movs	r3, #0
 800951c:	220a      	movs	r2, #10
 800951e:	4620      	mov	r0, r4
 8009520:	f000 fa85 	bl	8009a2e <__multadd>
 8009524:	9b03      	ldr	r3, [sp, #12]
 8009526:	9903      	ldr	r1, [sp, #12]
 8009528:	42bb      	cmp	r3, r7
 800952a:	4682      	mov	sl, r0
 800952c:	f04f 0300 	mov.w	r3, #0
 8009530:	f04f 020a 	mov.w	r2, #10
 8009534:	4620      	mov	r0, r4
 8009536:	d104      	bne.n	8009542 <_dtoa_r+0xb32>
 8009538:	f000 fa79 	bl	8009a2e <__multadd>
 800953c:	9003      	str	r0, [sp, #12]
 800953e:	4607      	mov	r7, r0
 8009540:	e776      	b.n	8009430 <_dtoa_r+0xa20>
 8009542:	f000 fa74 	bl	8009a2e <__multadd>
 8009546:	2300      	movs	r3, #0
 8009548:	9003      	str	r0, [sp, #12]
 800954a:	220a      	movs	r2, #10
 800954c:	4639      	mov	r1, r7
 800954e:	4620      	mov	r0, r4
 8009550:	f000 fa6d 	bl	8009a2e <__multadd>
 8009554:	e7f3      	b.n	800953e <_dtoa_r+0xb2e>
 8009556:	4651      	mov	r1, sl
 8009558:	2300      	movs	r3, #0
 800955a:	220a      	movs	r2, #10
 800955c:	4620      	mov	r0, r4
 800955e:	f000 fa66 	bl	8009a2e <__multadd>
 8009562:	4682      	mov	sl, r0
 8009564:	e70d      	b.n	8009382 <_dtoa_r+0x972>
 8009566:	9b02      	ldr	r3, [sp, #8]
 8009568:	4293      	cmp	r3, r2
 800956a:	d105      	bne.n	8009578 <_dtoa_r+0xb68>
 800956c:	9a02      	ldr	r2, [sp, #8]
 800956e:	f10b 0b01 	add.w	fp, fp, #1
 8009572:	2331      	movs	r3, #49	; 0x31
 8009574:	7013      	strb	r3, [r2, #0]
 8009576:	e6e2      	b.n	800933e <_dtoa_r+0x92e>
 8009578:	4615      	mov	r5, r2
 800957a:	e7b2      	b.n	80094e2 <_dtoa_r+0xad2>
 800957c:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <_dtoa_r+0xb94>)
 800957e:	f7ff baae 	b.w	8008ade <_dtoa_r+0xce>
 8009582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009584:	2b00      	cmp	r3, #0
 8009586:	f47f aa88 	bne.w	8008a9a <_dtoa_r+0x8a>
 800958a:	4b07      	ldr	r3, [pc, #28]	; (80095a8 <_dtoa_r+0xb98>)
 800958c:	f7ff baa7 	b.w	8008ade <_dtoa_r+0xce>
 8009590:	9b04      	ldr	r3, [sp, #16]
 8009592:	2b00      	cmp	r3, #0
 8009594:	f73f aef4 	bgt.w	8009380 <_dtoa_r+0x970>
 8009598:	9b07      	ldr	r3, [sp, #28]
 800959a:	2b02      	cmp	r3, #2
 800959c:	f77f aef0 	ble.w	8009380 <_dtoa_r+0x970>
 80095a0:	e6b8      	b.n	8009314 <_dtoa_r+0x904>
 80095a2:	bf00      	nop
 80095a4:	0800ad72 	.word	0x0800ad72
 80095a8:	0800aefd 	.word	0x0800aefd

080095ac <__sflush_r>:
 80095ac:	898a      	ldrh	r2, [r1, #12]
 80095ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095b2:	4605      	mov	r5, r0
 80095b4:	0710      	lsls	r0, r2, #28
 80095b6:	460c      	mov	r4, r1
 80095b8:	d45a      	bmi.n	8009670 <__sflush_r+0xc4>
 80095ba:	684b      	ldr	r3, [r1, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	dc05      	bgt.n	80095cc <__sflush_r+0x20>
 80095c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	dc02      	bgt.n	80095cc <__sflush_r+0x20>
 80095c6:	2000      	movs	r0, #0
 80095c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095ce:	2e00      	cmp	r6, #0
 80095d0:	d0f9      	beq.n	80095c6 <__sflush_r+0x1a>
 80095d2:	2300      	movs	r3, #0
 80095d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095d8:	682f      	ldr	r7, [r5, #0]
 80095da:	602b      	str	r3, [r5, #0]
 80095dc:	d033      	beq.n	8009646 <__sflush_r+0x9a>
 80095de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095e0:	89a3      	ldrh	r3, [r4, #12]
 80095e2:	075a      	lsls	r2, r3, #29
 80095e4:	d505      	bpl.n	80095f2 <__sflush_r+0x46>
 80095e6:	6863      	ldr	r3, [r4, #4]
 80095e8:	1ac0      	subs	r0, r0, r3
 80095ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095ec:	b10b      	cbz	r3, 80095f2 <__sflush_r+0x46>
 80095ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095f0:	1ac0      	subs	r0, r0, r3
 80095f2:	2300      	movs	r3, #0
 80095f4:	4602      	mov	r2, r0
 80095f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095f8:	6a21      	ldr	r1, [r4, #32]
 80095fa:	4628      	mov	r0, r5
 80095fc:	47b0      	blx	r6
 80095fe:	1c43      	adds	r3, r0, #1
 8009600:	89a3      	ldrh	r3, [r4, #12]
 8009602:	d106      	bne.n	8009612 <__sflush_r+0x66>
 8009604:	6829      	ldr	r1, [r5, #0]
 8009606:	291d      	cmp	r1, #29
 8009608:	d84b      	bhi.n	80096a2 <__sflush_r+0xf6>
 800960a:	4a2b      	ldr	r2, [pc, #172]	; (80096b8 <__sflush_r+0x10c>)
 800960c:	40ca      	lsrs	r2, r1
 800960e:	07d6      	lsls	r6, r2, #31
 8009610:	d547      	bpl.n	80096a2 <__sflush_r+0xf6>
 8009612:	2200      	movs	r2, #0
 8009614:	6062      	str	r2, [r4, #4]
 8009616:	04d9      	lsls	r1, r3, #19
 8009618:	6922      	ldr	r2, [r4, #16]
 800961a:	6022      	str	r2, [r4, #0]
 800961c:	d504      	bpl.n	8009628 <__sflush_r+0x7c>
 800961e:	1c42      	adds	r2, r0, #1
 8009620:	d101      	bne.n	8009626 <__sflush_r+0x7a>
 8009622:	682b      	ldr	r3, [r5, #0]
 8009624:	b903      	cbnz	r3, 8009628 <__sflush_r+0x7c>
 8009626:	6560      	str	r0, [r4, #84]	; 0x54
 8009628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800962a:	602f      	str	r7, [r5, #0]
 800962c:	2900      	cmp	r1, #0
 800962e:	d0ca      	beq.n	80095c6 <__sflush_r+0x1a>
 8009630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009634:	4299      	cmp	r1, r3
 8009636:	d002      	beq.n	800963e <__sflush_r+0x92>
 8009638:	4628      	mov	r0, r5
 800963a:	f000 fc8b 	bl	8009f54 <_free_r>
 800963e:	2000      	movs	r0, #0
 8009640:	6360      	str	r0, [r4, #52]	; 0x34
 8009642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009646:	6a21      	ldr	r1, [r4, #32]
 8009648:	2301      	movs	r3, #1
 800964a:	4628      	mov	r0, r5
 800964c:	47b0      	blx	r6
 800964e:	1c41      	adds	r1, r0, #1
 8009650:	d1c6      	bne.n	80095e0 <__sflush_r+0x34>
 8009652:	682b      	ldr	r3, [r5, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d0c3      	beq.n	80095e0 <__sflush_r+0x34>
 8009658:	2b1d      	cmp	r3, #29
 800965a:	d001      	beq.n	8009660 <__sflush_r+0xb4>
 800965c:	2b16      	cmp	r3, #22
 800965e:	d101      	bne.n	8009664 <__sflush_r+0xb8>
 8009660:	602f      	str	r7, [r5, #0]
 8009662:	e7b0      	b.n	80095c6 <__sflush_r+0x1a>
 8009664:	89a3      	ldrh	r3, [r4, #12]
 8009666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800966a:	81a3      	strh	r3, [r4, #12]
 800966c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009670:	690f      	ldr	r7, [r1, #16]
 8009672:	2f00      	cmp	r7, #0
 8009674:	d0a7      	beq.n	80095c6 <__sflush_r+0x1a>
 8009676:	0793      	lsls	r3, r2, #30
 8009678:	680e      	ldr	r6, [r1, #0]
 800967a:	bf08      	it	eq
 800967c:	694b      	ldreq	r3, [r1, #20]
 800967e:	600f      	str	r7, [r1, #0]
 8009680:	bf18      	it	ne
 8009682:	2300      	movne	r3, #0
 8009684:	eba6 0807 	sub.w	r8, r6, r7
 8009688:	608b      	str	r3, [r1, #8]
 800968a:	f1b8 0f00 	cmp.w	r8, #0
 800968e:	dd9a      	ble.n	80095c6 <__sflush_r+0x1a>
 8009690:	4643      	mov	r3, r8
 8009692:	463a      	mov	r2, r7
 8009694:	6a21      	ldr	r1, [r4, #32]
 8009696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009698:	4628      	mov	r0, r5
 800969a:	47b0      	blx	r6
 800969c:	2800      	cmp	r0, #0
 800969e:	dc07      	bgt.n	80096b0 <__sflush_r+0x104>
 80096a0:	89a3      	ldrh	r3, [r4, #12]
 80096a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096a6:	81a3      	strh	r3, [r4, #12]
 80096a8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b0:	4407      	add	r7, r0
 80096b2:	eba8 0800 	sub.w	r8, r8, r0
 80096b6:	e7e8      	b.n	800968a <__sflush_r+0xde>
 80096b8:	20400001 	.word	0x20400001

080096bc <_fflush_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	690b      	ldr	r3, [r1, #16]
 80096c0:	4605      	mov	r5, r0
 80096c2:	460c      	mov	r4, r1
 80096c4:	b1db      	cbz	r3, 80096fe <_fflush_r+0x42>
 80096c6:	b118      	cbz	r0, 80096d0 <_fflush_r+0x14>
 80096c8:	6983      	ldr	r3, [r0, #24]
 80096ca:	b90b      	cbnz	r3, 80096d0 <_fflush_r+0x14>
 80096cc:	f000 f860 	bl	8009790 <__sinit>
 80096d0:	4b0c      	ldr	r3, [pc, #48]	; (8009704 <_fflush_r+0x48>)
 80096d2:	429c      	cmp	r4, r3
 80096d4:	d109      	bne.n	80096ea <_fflush_r+0x2e>
 80096d6:	686c      	ldr	r4, [r5, #4]
 80096d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096dc:	b17b      	cbz	r3, 80096fe <_fflush_r+0x42>
 80096de:	4621      	mov	r1, r4
 80096e0:	4628      	mov	r0, r5
 80096e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096e6:	f7ff bf61 	b.w	80095ac <__sflush_r>
 80096ea:	4b07      	ldr	r3, [pc, #28]	; (8009708 <_fflush_r+0x4c>)
 80096ec:	429c      	cmp	r4, r3
 80096ee:	d101      	bne.n	80096f4 <_fflush_r+0x38>
 80096f0:	68ac      	ldr	r4, [r5, #8]
 80096f2:	e7f1      	b.n	80096d8 <_fflush_r+0x1c>
 80096f4:	4b05      	ldr	r3, [pc, #20]	; (800970c <_fflush_r+0x50>)
 80096f6:	429c      	cmp	r4, r3
 80096f8:	bf08      	it	eq
 80096fa:	68ec      	ldreq	r4, [r5, #12]
 80096fc:	e7ec      	b.n	80096d8 <_fflush_r+0x1c>
 80096fe:	2000      	movs	r0, #0
 8009700:	bd38      	pop	{r3, r4, r5, pc}
 8009702:	bf00      	nop
 8009704:	0800af2c 	.word	0x0800af2c
 8009708:	0800af4c 	.word	0x0800af4c
 800970c:	0800af0c 	.word	0x0800af0c

08009710 <_cleanup_r>:
 8009710:	4901      	ldr	r1, [pc, #4]	; (8009718 <_cleanup_r+0x8>)
 8009712:	f000 b8a9 	b.w	8009868 <_fwalk_reent>
 8009716:	bf00      	nop
 8009718:	080096bd 	.word	0x080096bd

0800971c <std.isra.0>:
 800971c:	2300      	movs	r3, #0
 800971e:	b510      	push	{r4, lr}
 8009720:	4604      	mov	r4, r0
 8009722:	6003      	str	r3, [r0, #0]
 8009724:	6043      	str	r3, [r0, #4]
 8009726:	6083      	str	r3, [r0, #8]
 8009728:	8181      	strh	r1, [r0, #12]
 800972a:	6643      	str	r3, [r0, #100]	; 0x64
 800972c:	81c2      	strh	r2, [r0, #14]
 800972e:	6103      	str	r3, [r0, #16]
 8009730:	6143      	str	r3, [r0, #20]
 8009732:	6183      	str	r3, [r0, #24]
 8009734:	4619      	mov	r1, r3
 8009736:	2208      	movs	r2, #8
 8009738:	305c      	adds	r0, #92	; 0x5c
 800973a:	f7fe fb16 	bl	8007d6a <memset>
 800973e:	4b05      	ldr	r3, [pc, #20]	; (8009754 <std.isra.0+0x38>)
 8009740:	6263      	str	r3, [r4, #36]	; 0x24
 8009742:	4b05      	ldr	r3, [pc, #20]	; (8009758 <std.isra.0+0x3c>)
 8009744:	62a3      	str	r3, [r4, #40]	; 0x28
 8009746:	4b05      	ldr	r3, [pc, #20]	; (800975c <std.isra.0+0x40>)
 8009748:	62e3      	str	r3, [r4, #44]	; 0x2c
 800974a:	4b05      	ldr	r3, [pc, #20]	; (8009760 <std.isra.0+0x44>)
 800974c:	6224      	str	r4, [r4, #32]
 800974e:	6323      	str	r3, [r4, #48]	; 0x30
 8009750:	bd10      	pop	{r4, pc}
 8009752:	bf00      	nop
 8009754:	0800a36d 	.word	0x0800a36d
 8009758:	0800a38f 	.word	0x0800a38f
 800975c:	0800a3c7 	.word	0x0800a3c7
 8009760:	0800a3eb 	.word	0x0800a3eb

08009764 <__sfmoreglue>:
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	1e4a      	subs	r2, r1, #1
 8009768:	2568      	movs	r5, #104	; 0x68
 800976a:	4355      	muls	r5, r2
 800976c:	460e      	mov	r6, r1
 800976e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009772:	f000 fc3d 	bl	8009ff0 <_malloc_r>
 8009776:	4604      	mov	r4, r0
 8009778:	b140      	cbz	r0, 800978c <__sfmoreglue+0x28>
 800977a:	2100      	movs	r1, #0
 800977c:	e880 0042 	stmia.w	r0, {r1, r6}
 8009780:	300c      	adds	r0, #12
 8009782:	60a0      	str	r0, [r4, #8]
 8009784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009788:	f7fe faef 	bl	8007d6a <memset>
 800978c:	4620      	mov	r0, r4
 800978e:	bd70      	pop	{r4, r5, r6, pc}

08009790 <__sinit>:
 8009790:	6983      	ldr	r3, [r0, #24]
 8009792:	b510      	push	{r4, lr}
 8009794:	4604      	mov	r4, r0
 8009796:	bb33      	cbnz	r3, 80097e6 <__sinit+0x56>
 8009798:	6483      	str	r3, [r0, #72]	; 0x48
 800979a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800979c:	6503      	str	r3, [r0, #80]	; 0x50
 800979e:	4b12      	ldr	r3, [pc, #72]	; (80097e8 <__sinit+0x58>)
 80097a0:	4a12      	ldr	r2, [pc, #72]	; (80097ec <__sinit+0x5c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6282      	str	r2, [r0, #40]	; 0x28
 80097a6:	4298      	cmp	r0, r3
 80097a8:	bf04      	itt	eq
 80097aa:	2301      	moveq	r3, #1
 80097ac:	6183      	streq	r3, [r0, #24]
 80097ae:	f000 f81f 	bl	80097f0 <__sfp>
 80097b2:	6060      	str	r0, [r4, #4]
 80097b4:	4620      	mov	r0, r4
 80097b6:	f000 f81b 	bl	80097f0 <__sfp>
 80097ba:	60a0      	str	r0, [r4, #8]
 80097bc:	4620      	mov	r0, r4
 80097be:	f000 f817 	bl	80097f0 <__sfp>
 80097c2:	2200      	movs	r2, #0
 80097c4:	60e0      	str	r0, [r4, #12]
 80097c6:	2104      	movs	r1, #4
 80097c8:	6860      	ldr	r0, [r4, #4]
 80097ca:	f7ff ffa7 	bl	800971c <std.isra.0>
 80097ce:	2201      	movs	r2, #1
 80097d0:	2109      	movs	r1, #9
 80097d2:	68a0      	ldr	r0, [r4, #8]
 80097d4:	f7ff ffa2 	bl	800971c <std.isra.0>
 80097d8:	2202      	movs	r2, #2
 80097da:	2112      	movs	r1, #18
 80097dc:	68e0      	ldr	r0, [r4, #12]
 80097de:	f7ff ff9d 	bl	800971c <std.isra.0>
 80097e2:	2301      	movs	r3, #1
 80097e4:	61a3      	str	r3, [r4, #24]
 80097e6:	bd10      	pop	{r4, pc}
 80097e8:	0800af6c 	.word	0x0800af6c
 80097ec:	08009711 	.word	0x08009711

080097f0 <__sfp>:
 80097f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f2:	4b1c      	ldr	r3, [pc, #112]	; (8009864 <__sfp+0x74>)
 80097f4:	681e      	ldr	r6, [r3, #0]
 80097f6:	69b3      	ldr	r3, [r6, #24]
 80097f8:	4607      	mov	r7, r0
 80097fa:	b913      	cbnz	r3, 8009802 <__sfp+0x12>
 80097fc:	4630      	mov	r0, r6
 80097fe:	f7ff ffc7 	bl	8009790 <__sinit>
 8009802:	3648      	adds	r6, #72	; 0x48
 8009804:	68b4      	ldr	r4, [r6, #8]
 8009806:	6873      	ldr	r3, [r6, #4]
 8009808:	3b01      	subs	r3, #1
 800980a:	d503      	bpl.n	8009814 <__sfp+0x24>
 800980c:	6833      	ldr	r3, [r6, #0]
 800980e:	b133      	cbz	r3, 800981e <__sfp+0x2e>
 8009810:	6836      	ldr	r6, [r6, #0]
 8009812:	e7f7      	b.n	8009804 <__sfp+0x14>
 8009814:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009818:	b16d      	cbz	r5, 8009836 <__sfp+0x46>
 800981a:	3468      	adds	r4, #104	; 0x68
 800981c:	e7f4      	b.n	8009808 <__sfp+0x18>
 800981e:	2104      	movs	r1, #4
 8009820:	4638      	mov	r0, r7
 8009822:	f7ff ff9f 	bl	8009764 <__sfmoreglue>
 8009826:	6030      	str	r0, [r6, #0]
 8009828:	2800      	cmp	r0, #0
 800982a:	d1f1      	bne.n	8009810 <__sfp+0x20>
 800982c:	230c      	movs	r3, #12
 800982e:	603b      	str	r3, [r7, #0]
 8009830:	4604      	mov	r4, r0
 8009832:	4620      	mov	r0, r4
 8009834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800983a:	81e3      	strh	r3, [r4, #14]
 800983c:	2301      	movs	r3, #1
 800983e:	81a3      	strh	r3, [r4, #12]
 8009840:	6665      	str	r5, [r4, #100]	; 0x64
 8009842:	6025      	str	r5, [r4, #0]
 8009844:	60a5      	str	r5, [r4, #8]
 8009846:	6065      	str	r5, [r4, #4]
 8009848:	6125      	str	r5, [r4, #16]
 800984a:	6165      	str	r5, [r4, #20]
 800984c:	61a5      	str	r5, [r4, #24]
 800984e:	2208      	movs	r2, #8
 8009850:	4629      	mov	r1, r5
 8009852:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009856:	f7fe fa88 	bl	8007d6a <memset>
 800985a:	6365      	str	r5, [r4, #52]	; 0x34
 800985c:	63a5      	str	r5, [r4, #56]	; 0x38
 800985e:	64a5      	str	r5, [r4, #72]	; 0x48
 8009860:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009862:	e7e6      	b.n	8009832 <__sfp+0x42>
 8009864:	0800af6c 	.word	0x0800af6c

08009868 <_fwalk_reent>:
 8009868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800986c:	4680      	mov	r8, r0
 800986e:	4689      	mov	r9, r1
 8009870:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009874:	2600      	movs	r6, #0
 8009876:	b914      	cbnz	r4, 800987e <_fwalk_reent+0x16>
 8009878:	4630      	mov	r0, r6
 800987a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800987e:	68a5      	ldr	r5, [r4, #8]
 8009880:	6867      	ldr	r7, [r4, #4]
 8009882:	3f01      	subs	r7, #1
 8009884:	d501      	bpl.n	800988a <_fwalk_reent+0x22>
 8009886:	6824      	ldr	r4, [r4, #0]
 8009888:	e7f5      	b.n	8009876 <_fwalk_reent+0xe>
 800988a:	89ab      	ldrh	r3, [r5, #12]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d907      	bls.n	80098a0 <_fwalk_reent+0x38>
 8009890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009894:	3301      	adds	r3, #1
 8009896:	d003      	beq.n	80098a0 <_fwalk_reent+0x38>
 8009898:	4629      	mov	r1, r5
 800989a:	4640      	mov	r0, r8
 800989c:	47c8      	blx	r9
 800989e:	4306      	orrs	r6, r0
 80098a0:	3568      	adds	r5, #104	; 0x68
 80098a2:	e7ee      	b.n	8009882 <_fwalk_reent+0x1a>

080098a4 <_localeconv_r>:
 80098a4:	4b04      	ldr	r3, [pc, #16]	; (80098b8 <_localeconv_r+0x14>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6a18      	ldr	r0, [r3, #32]
 80098aa:	4b04      	ldr	r3, [pc, #16]	; (80098bc <_localeconv_r+0x18>)
 80098ac:	2800      	cmp	r0, #0
 80098ae:	bf08      	it	eq
 80098b0:	4618      	moveq	r0, r3
 80098b2:	30f0      	adds	r0, #240	; 0xf0
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	20000510 	.word	0x20000510
 80098bc:	20000574 	.word	0x20000574

080098c0 <__swhatbuf_r>:
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	460e      	mov	r6, r1
 80098c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c8:	2900      	cmp	r1, #0
 80098ca:	b090      	sub	sp, #64	; 0x40
 80098cc:	4614      	mov	r4, r2
 80098ce:	461d      	mov	r5, r3
 80098d0:	da07      	bge.n	80098e2 <__swhatbuf_r+0x22>
 80098d2:	2300      	movs	r3, #0
 80098d4:	602b      	str	r3, [r5, #0]
 80098d6:	89b3      	ldrh	r3, [r6, #12]
 80098d8:	061a      	lsls	r2, r3, #24
 80098da:	d410      	bmi.n	80098fe <__swhatbuf_r+0x3e>
 80098dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098e0:	e00e      	b.n	8009900 <__swhatbuf_r+0x40>
 80098e2:	aa01      	add	r2, sp, #4
 80098e4:	f000 fda8 	bl	800a438 <_fstat_r>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	dbf2      	blt.n	80098d2 <__swhatbuf_r+0x12>
 80098ec:	9a02      	ldr	r2, [sp, #8]
 80098ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098f6:	425a      	negs	r2, r3
 80098f8:	415a      	adcs	r2, r3
 80098fa:	602a      	str	r2, [r5, #0]
 80098fc:	e7ee      	b.n	80098dc <__swhatbuf_r+0x1c>
 80098fe:	2340      	movs	r3, #64	; 0x40
 8009900:	2000      	movs	r0, #0
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	b010      	add	sp, #64	; 0x40
 8009906:	bd70      	pop	{r4, r5, r6, pc}

08009908 <__smakebuf_r>:
 8009908:	898b      	ldrh	r3, [r1, #12]
 800990a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800990c:	079d      	lsls	r5, r3, #30
 800990e:	4606      	mov	r6, r0
 8009910:	460c      	mov	r4, r1
 8009912:	d507      	bpl.n	8009924 <__smakebuf_r+0x1c>
 8009914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009918:	6023      	str	r3, [r4, #0]
 800991a:	6123      	str	r3, [r4, #16]
 800991c:	2301      	movs	r3, #1
 800991e:	6163      	str	r3, [r4, #20]
 8009920:	b002      	add	sp, #8
 8009922:	bd70      	pop	{r4, r5, r6, pc}
 8009924:	ab01      	add	r3, sp, #4
 8009926:	466a      	mov	r2, sp
 8009928:	f7ff ffca 	bl	80098c0 <__swhatbuf_r>
 800992c:	9900      	ldr	r1, [sp, #0]
 800992e:	4605      	mov	r5, r0
 8009930:	4630      	mov	r0, r6
 8009932:	f000 fb5d 	bl	8009ff0 <_malloc_r>
 8009936:	b948      	cbnz	r0, 800994c <__smakebuf_r+0x44>
 8009938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800993c:	059a      	lsls	r2, r3, #22
 800993e:	d4ef      	bmi.n	8009920 <__smakebuf_r+0x18>
 8009940:	f023 0303 	bic.w	r3, r3, #3
 8009944:	f043 0302 	orr.w	r3, r3, #2
 8009948:	81a3      	strh	r3, [r4, #12]
 800994a:	e7e3      	b.n	8009914 <__smakebuf_r+0xc>
 800994c:	4b0d      	ldr	r3, [pc, #52]	; (8009984 <__smakebuf_r+0x7c>)
 800994e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	6020      	str	r0, [r4, #0]
 8009954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009958:	81a3      	strh	r3, [r4, #12]
 800995a:	9b00      	ldr	r3, [sp, #0]
 800995c:	6163      	str	r3, [r4, #20]
 800995e:	9b01      	ldr	r3, [sp, #4]
 8009960:	6120      	str	r0, [r4, #16]
 8009962:	b15b      	cbz	r3, 800997c <__smakebuf_r+0x74>
 8009964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009968:	4630      	mov	r0, r6
 800996a:	f000 fd77 	bl	800a45c <_isatty_r>
 800996e:	b128      	cbz	r0, 800997c <__smakebuf_r+0x74>
 8009970:	89a3      	ldrh	r3, [r4, #12]
 8009972:	f023 0303 	bic.w	r3, r3, #3
 8009976:	f043 0301 	orr.w	r3, r3, #1
 800997a:	81a3      	strh	r3, [r4, #12]
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	431d      	orrs	r5, r3
 8009980:	81a5      	strh	r5, [r4, #12]
 8009982:	e7cd      	b.n	8009920 <__smakebuf_r+0x18>
 8009984:	08009711 	.word	0x08009711

08009988 <malloc>:
 8009988:	4b02      	ldr	r3, [pc, #8]	; (8009994 <malloc+0xc>)
 800998a:	4601      	mov	r1, r0
 800998c:	6818      	ldr	r0, [r3, #0]
 800998e:	f000 bb2f 	b.w	8009ff0 <_malloc_r>
 8009992:	bf00      	nop
 8009994:	20000510 	.word	0x20000510

08009998 <_Balloc>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800999c:	4604      	mov	r4, r0
 800999e:	460e      	mov	r6, r1
 80099a0:	b93d      	cbnz	r5, 80099b2 <_Balloc+0x1a>
 80099a2:	2010      	movs	r0, #16
 80099a4:	f7ff fff0 	bl	8009988 <malloc>
 80099a8:	6260      	str	r0, [r4, #36]	; 0x24
 80099aa:	6045      	str	r5, [r0, #4]
 80099ac:	6085      	str	r5, [r0, #8]
 80099ae:	6005      	str	r5, [r0, #0]
 80099b0:	60c5      	str	r5, [r0, #12]
 80099b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80099b4:	68eb      	ldr	r3, [r5, #12]
 80099b6:	b183      	cbz	r3, 80099da <_Balloc+0x42>
 80099b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80099c0:	b9b8      	cbnz	r0, 80099f2 <_Balloc+0x5a>
 80099c2:	2101      	movs	r1, #1
 80099c4:	fa01 f506 	lsl.w	r5, r1, r6
 80099c8:	1d6a      	adds	r2, r5, #5
 80099ca:	0092      	lsls	r2, r2, #2
 80099cc:	4620      	mov	r0, r4
 80099ce:	f000 fab3 	bl	8009f38 <_calloc_r>
 80099d2:	b160      	cbz	r0, 80099ee <_Balloc+0x56>
 80099d4:	6046      	str	r6, [r0, #4]
 80099d6:	6085      	str	r5, [r0, #8]
 80099d8:	e00e      	b.n	80099f8 <_Balloc+0x60>
 80099da:	2221      	movs	r2, #33	; 0x21
 80099dc:	2104      	movs	r1, #4
 80099de:	4620      	mov	r0, r4
 80099e0:	f000 faaa 	bl	8009f38 <_calloc_r>
 80099e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099e6:	60e8      	str	r0, [r5, #12]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1e4      	bne.n	80099b8 <_Balloc+0x20>
 80099ee:	2000      	movs	r0, #0
 80099f0:	bd70      	pop	{r4, r5, r6, pc}
 80099f2:	6802      	ldr	r2, [r0, #0]
 80099f4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80099f8:	2300      	movs	r3, #0
 80099fa:	6103      	str	r3, [r0, #16]
 80099fc:	60c3      	str	r3, [r0, #12]
 80099fe:	bd70      	pop	{r4, r5, r6, pc}

08009a00 <_Bfree>:
 8009a00:	b570      	push	{r4, r5, r6, lr}
 8009a02:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009a04:	4606      	mov	r6, r0
 8009a06:	460d      	mov	r5, r1
 8009a08:	b93c      	cbnz	r4, 8009a1a <_Bfree+0x1a>
 8009a0a:	2010      	movs	r0, #16
 8009a0c:	f7ff ffbc 	bl	8009988 <malloc>
 8009a10:	6270      	str	r0, [r6, #36]	; 0x24
 8009a12:	6044      	str	r4, [r0, #4]
 8009a14:	6084      	str	r4, [r0, #8]
 8009a16:	6004      	str	r4, [r0, #0]
 8009a18:	60c4      	str	r4, [r0, #12]
 8009a1a:	b13d      	cbz	r5, 8009a2c <_Bfree+0x2c>
 8009a1c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009a1e:	686a      	ldr	r2, [r5, #4]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a26:	6029      	str	r1, [r5, #0]
 8009a28:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009a2c:	bd70      	pop	{r4, r5, r6, pc}

08009a2e <__multadd>:
 8009a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a32:	690d      	ldr	r5, [r1, #16]
 8009a34:	461f      	mov	r7, r3
 8009a36:	4606      	mov	r6, r0
 8009a38:	460c      	mov	r4, r1
 8009a3a:	f101 0e14 	add.w	lr, r1, #20
 8009a3e:	2300      	movs	r3, #0
 8009a40:	f8de 0000 	ldr.w	r0, [lr]
 8009a44:	b281      	uxth	r1, r0
 8009a46:	fb02 7101 	mla	r1, r2, r1, r7
 8009a4a:	0c0f      	lsrs	r7, r1, #16
 8009a4c:	0c00      	lsrs	r0, r0, #16
 8009a4e:	fb02 7000 	mla	r0, r2, r0, r7
 8009a52:	b289      	uxth	r1, r1
 8009a54:	3301      	adds	r3, #1
 8009a56:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009a5a:	429d      	cmp	r5, r3
 8009a5c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009a60:	f84e 1b04 	str.w	r1, [lr], #4
 8009a64:	dcec      	bgt.n	8009a40 <__multadd+0x12>
 8009a66:	b1d7      	cbz	r7, 8009a9e <__multadd+0x70>
 8009a68:	68a3      	ldr	r3, [r4, #8]
 8009a6a:	429d      	cmp	r5, r3
 8009a6c:	db12      	blt.n	8009a94 <__multadd+0x66>
 8009a6e:	6861      	ldr	r1, [r4, #4]
 8009a70:	4630      	mov	r0, r6
 8009a72:	3101      	adds	r1, #1
 8009a74:	f7ff ff90 	bl	8009998 <_Balloc>
 8009a78:	6922      	ldr	r2, [r4, #16]
 8009a7a:	3202      	adds	r2, #2
 8009a7c:	f104 010c 	add.w	r1, r4, #12
 8009a80:	4680      	mov	r8, r0
 8009a82:	0092      	lsls	r2, r2, #2
 8009a84:	300c      	adds	r0, #12
 8009a86:	f7fe f965 	bl	8007d54 <memcpy>
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	f7ff ffb7 	bl	8009a00 <_Bfree>
 8009a92:	4644      	mov	r4, r8
 8009a94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a98:	3501      	adds	r5, #1
 8009a9a:	615f      	str	r7, [r3, #20]
 8009a9c:	6125      	str	r5, [r4, #16]
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009aa4 <__hi0bits>:
 8009aa4:	0c02      	lsrs	r2, r0, #16
 8009aa6:	0412      	lsls	r2, r2, #16
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	b9b2      	cbnz	r2, 8009ada <__hi0bits+0x36>
 8009aac:	0403      	lsls	r3, r0, #16
 8009aae:	2010      	movs	r0, #16
 8009ab0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009ab4:	bf04      	itt	eq
 8009ab6:	021b      	lsleq	r3, r3, #8
 8009ab8:	3008      	addeq	r0, #8
 8009aba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009abe:	bf04      	itt	eq
 8009ac0:	011b      	lsleq	r3, r3, #4
 8009ac2:	3004      	addeq	r0, #4
 8009ac4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009ac8:	bf04      	itt	eq
 8009aca:	009b      	lsleq	r3, r3, #2
 8009acc:	3002      	addeq	r0, #2
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	db06      	blt.n	8009ae0 <__hi0bits+0x3c>
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	d503      	bpl.n	8009ade <__hi0bits+0x3a>
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	4770      	bx	lr
 8009ada:	2000      	movs	r0, #0
 8009adc:	e7e8      	b.n	8009ab0 <__hi0bits+0xc>
 8009ade:	2020      	movs	r0, #32
 8009ae0:	4770      	bx	lr

08009ae2 <__lo0bits>:
 8009ae2:	6803      	ldr	r3, [r0, #0]
 8009ae4:	f013 0207 	ands.w	r2, r3, #7
 8009ae8:	4601      	mov	r1, r0
 8009aea:	d00b      	beq.n	8009b04 <__lo0bits+0x22>
 8009aec:	07da      	lsls	r2, r3, #31
 8009aee:	d423      	bmi.n	8009b38 <__lo0bits+0x56>
 8009af0:	0798      	lsls	r0, r3, #30
 8009af2:	bf49      	itett	mi
 8009af4:	085b      	lsrmi	r3, r3, #1
 8009af6:	089b      	lsrpl	r3, r3, #2
 8009af8:	2001      	movmi	r0, #1
 8009afa:	600b      	strmi	r3, [r1, #0]
 8009afc:	bf5c      	itt	pl
 8009afe:	600b      	strpl	r3, [r1, #0]
 8009b00:	2002      	movpl	r0, #2
 8009b02:	4770      	bx	lr
 8009b04:	b298      	uxth	r0, r3
 8009b06:	b9a8      	cbnz	r0, 8009b34 <__lo0bits+0x52>
 8009b08:	0c1b      	lsrs	r3, r3, #16
 8009b0a:	2010      	movs	r0, #16
 8009b0c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b10:	bf04      	itt	eq
 8009b12:	0a1b      	lsreq	r3, r3, #8
 8009b14:	3008      	addeq	r0, #8
 8009b16:	071a      	lsls	r2, r3, #28
 8009b18:	bf04      	itt	eq
 8009b1a:	091b      	lsreq	r3, r3, #4
 8009b1c:	3004      	addeq	r0, #4
 8009b1e:	079a      	lsls	r2, r3, #30
 8009b20:	bf04      	itt	eq
 8009b22:	089b      	lsreq	r3, r3, #2
 8009b24:	3002      	addeq	r0, #2
 8009b26:	07da      	lsls	r2, r3, #31
 8009b28:	d402      	bmi.n	8009b30 <__lo0bits+0x4e>
 8009b2a:	085b      	lsrs	r3, r3, #1
 8009b2c:	d006      	beq.n	8009b3c <__lo0bits+0x5a>
 8009b2e:	3001      	adds	r0, #1
 8009b30:	600b      	str	r3, [r1, #0]
 8009b32:	4770      	bx	lr
 8009b34:	4610      	mov	r0, r2
 8009b36:	e7e9      	b.n	8009b0c <__lo0bits+0x2a>
 8009b38:	2000      	movs	r0, #0
 8009b3a:	4770      	bx	lr
 8009b3c:	2020      	movs	r0, #32
 8009b3e:	4770      	bx	lr

08009b40 <__i2b>:
 8009b40:	b510      	push	{r4, lr}
 8009b42:	460c      	mov	r4, r1
 8009b44:	2101      	movs	r1, #1
 8009b46:	f7ff ff27 	bl	8009998 <_Balloc>
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	6144      	str	r4, [r0, #20]
 8009b4e:	6102      	str	r2, [r0, #16]
 8009b50:	bd10      	pop	{r4, pc}

08009b52 <__multiply>:
 8009b52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b56:	4614      	mov	r4, r2
 8009b58:	690a      	ldr	r2, [r1, #16]
 8009b5a:	6923      	ldr	r3, [r4, #16]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	bfb8      	it	lt
 8009b60:	460b      	movlt	r3, r1
 8009b62:	4689      	mov	r9, r1
 8009b64:	bfbc      	itt	lt
 8009b66:	46a1      	movlt	r9, r4
 8009b68:	461c      	movlt	r4, r3
 8009b6a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009b6e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009b72:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009b76:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009b7a:	eb07 060a 	add.w	r6, r7, sl
 8009b7e:	429e      	cmp	r6, r3
 8009b80:	bfc8      	it	gt
 8009b82:	3101      	addgt	r1, #1
 8009b84:	f7ff ff08 	bl	8009998 <_Balloc>
 8009b88:	f100 0514 	add.w	r5, r0, #20
 8009b8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b90:	462b      	mov	r3, r5
 8009b92:	2200      	movs	r2, #0
 8009b94:	4543      	cmp	r3, r8
 8009b96:	d316      	bcc.n	8009bc6 <__multiply+0x74>
 8009b98:	f104 0214 	add.w	r2, r4, #20
 8009b9c:	f109 0114 	add.w	r1, r9, #20
 8009ba0:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8009ba4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	9c01      	ldr	r4, [sp, #4]
 8009bac:	4294      	cmp	r4, r2
 8009bae:	4613      	mov	r3, r2
 8009bb0:	d80c      	bhi.n	8009bcc <__multiply+0x7a>
 8009bb2:	2e00      	cmp	r6, #0
 8009bb4:	dd03      	ble.n	8009bbe <__multiply+0x6c>
 8009bb6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d054      	beq.n	8009c68 <__multiply+0x116>
 8009bbe:	6106      	str	r6, [r0, #16]
 8009bc0:	b003      	add	sp, #12
 8009bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc6:	f843 2b04 	str.w	r2, [r3], #4
 8009bca:	e7e3      	b.n	8009b94 <__multiply+0x42>
 8009bcc:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bd0:	3204      	adds	r2, #4
 8009bd2:	f1ba 0f00 	cmp.w	sl, #0
 8009bd6:	d020      	beq.n	8009c1a <__multiply+0xc8>
 8009bd8:	46ae      	mov	lr, r5
 8009bda:	4689      	mov	r9, r1
 8009bdc:	f04f 0c00 	mov.w	ip, #0
 8009be0:	f859 4b04 	ldr.w	r4, [r9], #4
 8009be4:	f8be b000 	ldrh.w	fp, [lr]
 8009be8:	b2a3      	uxth	r3, r4
 8009bea:	fb0a b303 	mla	r3, sl, r3, fp
 8009bee:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8009bf2:	f8de 4000 	ldr.w	r4, [lr]
 8009bf6:	4463      	add	r3, ip
 8009bf8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8009bfc:	fb0a c40b 	mla	r4, sl, fp, ip
 8009c00:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009c0a:	454f      	cmp	r7, r9
 8009c0c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8009c10:	f84e 3b04 	str.w	r3, [lr], #4
 8009c14:	d8e4      	bhi.n	8009be0 <__multiply+0x8e>
 8009c16:	f8ce c000 	str.w	ip, [lr]
 8009c1a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8009c1e:	f1b9 0f00 	cmp.w	r9, #0
 8009c22:	d01f      	beq.n	8009c64 <__multiply+0x112>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	46ae      	mov	lr, r5
 8009c28:	468c      	mov	ip, r1
 8009c2a:	f04f 0a00 	mov.w	sl, #0
 8009c2e:	f8bc 4000 	ldrh.w	r4, [ip]
 8009c32:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009c36:	fb09 b404 	mla	r4, r9, r4, fp
 8009c3a:	44a2      	add	sl, r4
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8009c42:	f84e 3b04 	str.w	r3, [lr], #4
 8009c46:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c4a:	f8be 4000 	ldrh.w	r4, [lr]
 8009c4e:	0c1b      	lsrs	r3, r3, #16
 8009c50:	fb09 4303 	mla	r3, r9, r3, r4
 8009c54:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8009c58:	4567      	cmp	r7, ip
 8009c5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c5e:	d8e6      	bhi.n	8009c2e <__multiply+0xdc>
 8009c60:	f8ce 3000 	str.w	r3, [lr]
 8009c64:	3504      	adds	r5, #4
 8009c66:	e7a0      	b.n	8009baa <__multiply+0x58>
 8009c68:	3e01      	subs	r6, #1
 8009c6a:	e7a2      	b.n	8009bb2 <__multiply+0x60>

08009c6c <__pow5mult>:
 8009c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c70:	4615      	mov	r5, r2
 8009c72:	f012 0203 	ands.w	r2, r2, #3
 8009c76:	4606      	mov	r6, r0
 8009c78:	460f      	mov	r7, r1
 8009c7a:	d007      	beq.n	8009c8c <__pow5mult+0x20>
 8009c7c:	3a01      	subs	r2, #1
 8009c7e:	4c21      	ldr	r4, [pc, #132]	; (8009d04 <__pow5mult+0x98>)
 8009c80:	2300      	movs	r3, #0
 8009c82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c86:	f7ff fed2 	bl	8009a2e <__multadd>
 8009c8a:	4607      	mov	r7, r0
 8009c8c:	10ad      	asrs	r5, r5, #2
 8009c8e:	d035      	beq.n	8009cfc <__pow5mult+0x90>
 8009c90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c92:	b93c      	cbnz	r4, 8009ca4 <__pow5mult+0x38>
 8009c94:	2010      	movs	r0, #16
 8009c96:	f7ff fe77 	bl	8009988 <malloc>
 8009c9a:	6270      	str	r0, [r6, #36]	; 0x24
 8009c9c:	6044      	str	r4, [r0, #4]
 8009c9e:	6084      	str	r4, [r0, #8]
 8009ca0:	6004      	str	r4, [r0, #0]
 8009ca2:	60c4      	str	r4, [r0, #12]
 8009ca4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ca8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cac:	b94c      	cbnz	r4, 8009cc2 <__pow5mult+0x56>
 8009cae:	f240 2171 	movw	r1, #625	; 0x271
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f7ff ff44 	bl	8009b40 <__i2b>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	6003      	str	r3, [r0, #0]
 8009cc2:	f04f 0800 	mov.w	r8, #0
 8009cc6:	07eb      	lsls	r3, r5, #31
 8009cc8:	d50a      	bpl.n	8009ce0 <__pow5mult+0x74>
 8009cca:	4639      	mov	r1, r7
 8009ccc:	4622      	mov	r2, r4
 8009cce:	4630      	mov	r0, r6
 8009cd0:	f7ff ff3f 	bl	8009b52 <__multiply>
 8009cd4:	4639      	mov	r1, r7
 8009cd6:	4681      	mov	r9, r0
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f7ff fe91 	bl	8009a00 <_Bfree>
 8009cde:	464f      	mov	r7, r9
 8009ce0:	106d      	asrs	r5, r5, #1
 8009ce2:	d00b      	beq.n	8009cfc <__pow5mult+0x90>
 8009ce4:	6820      	ldr	r0, [r4, #0]
 8009ce6:	b938      	cbnz	r0, 8009cf8 <__pow5mult+0x8c>
 8009ce8:	4622      	mov	r2, r4
 8009cea:	4621      	mov	r1, r4
 8009cec:	4630      	mov	r0, r6
 8009cee:	f7ff ff30 	bl	8009b52 <__multiply>
 8009cf2:	6020      	str	r0, [r4, #0]
 8009cf4:	f8c0 8000 	str.w	r8, [r0]
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	e7e4      	b.n	8009cc6 <__pow5mult+0x5a>
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d02:	bf00      	nop
 8009d04:	0800b060 	.word	0x0800b060

08009d08 <__lshift>:
 8009d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d0c:	460c      	mov	r4, r1
 8009d0e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d12:	6923      	ldr	r3, [r4, #16]
 8009d14:	6849      	ldr	r1, [r1, #4]
 8009d16:	eb0a 0903 	add.w	r9, sl, r3
 8009d1a:	68a3      	ldr	r3, [r4, #8]
 8009d1c:	4607      	mov	r7, r0
 8009d1e:	4616      	mov	r6, r2
 8009d20:	f109 0501 	add.w	r5, r9, #1
 8009d24:	42ab      	cmp	r3, r5
 8009d26:	db31      	blt.n	8009d8c <__lshift+0x84>
 8009d28:	4638      	mov	r0, r7
 8009d2a:	f7ff fe35 	bl	8009998 <_Balloc>
 8009d2e:	2200      	movs	r2, #0
 8009d30:	4680      	mov	r8, r0
 8009d32:	f100 0314 	add.w	r3, r0, #20
 8009d36:	4611      	mov	r1, r2
 8009d38:	4552      	cmp	r2, sl
 8009d3a:	db2a      	blt.n	8009d92 <__lshift+0x8a>
 8009d3c:	6920      	ldr	r0, [r4, #16]
 8009d3e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d42:	f104 0114 	add.w	r1, r4, #20
 8009d46:	f016 021f 	ands.w	r2, r6, #31
 8009d4a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8009d4e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8009d52:	d022      	beq.n	8009d9a <__lshift+0x92>
 8009d54:	f1c2 0c20 	rsb	ip, r2, #32
 8009d58:	2000      	movs	r0, #0
 8009d5a:	680e      	ldr	r6, [r1, #0]
 8009d5c:	4096      	lsls	r6, r2
 8009d5e:	4330      	orrs	r0, r6
 8009d60:	f843 0b04 	str.w	r0, [r3], #4
 8009d64:	f851 0b04 	ldr.w	r0, [r1], #4
 8009d68:	458e      	cmp	lr, r1
 8009d6a:	fa20 f00c 	lsr.w	r0, r0, ip
 8009d6e:	d8f4      	bhi.n	8009d5a <__lshift+0x52>
 8009d70:	6018      	str	r0, [r3, #0]
 8009d72:	b108      	cbz	r0, 8009d78 <__lshift+0x70>
 8009d74:	f109 0502 	add.w	r5, r9, #2
 8009d78:	3d01      	subs	r5, #1
 8009d7a:	4638      	mov	r0, r7
 8009d7c:	f8c8 5010 	str.w	r5, [r8, #16]
 8009d80:	4621      	mov	r1, r4
 8009d82:	f7ff fe3d 	bl	8009a00 <_Bfree>
 8009d86:	4640      	mov	r0, r8
 8009d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d8c:	3101      	adds	r1, #1
 8009d8e:	005b      	lsls	r3, r3, #1
 8009d90:	e7c8      	b.n	8009d24 <__lshift+0x1c>
 8009d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009d96:	3201      	adds	r2, #1
 8009d98:	e7ce      	b.n	8009d38 <__lshift+0x30>
 8009d9a:	3b04      	subs	r3, #4
 8009d9c:	f851 2b04 	ldr.w	r2, [r1], #4
 8009da0:	f843 2f04 	str.w	r2, [r3, #4]!
 8009da4:	458e      	cmp	lr, r1
 8009da6:	d8f9      	bhi.n	8009d9c <__lshift+0x94>
 8009da8:	e7e6      	b.n	8009d78 <__lshift+0x70>

08009daa <__mcmp>:
 8009daa:	6903      	ldr	r3, [r0, #16]
 8009dac:	690a      	ldr	r2, [r1, #16]
 8009dae:	1a9b      	subs	r3, r3, r2
 8009db0:	b530      	push	{r4, r5, lr}
 8009db2:	d10c      	bne.n	8009dce <__mcmp+0x24>
 8009db4:	0092      	lsls	r2, r2, #2
 8009db6:	3014      	adds	r0, #20
 8009db8:	3114      	adds	r1, #20
 8009dba:	1884      	adds	r4, r0, r2
 8009dbc:	4411      	add	r1, r2
 8009dbe:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009dc2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009dc6:	4295      	cmp	r5, r2
 8009dc8:	d003      	beq.n	8009dd2 <__mcmp+0x28>
 8009dca:	d305      	bcc.n	8009dd8 <__mcmp+0x2e>
 8009dcc:	2301      	movs	r3, #1
 8009dce:	4618      	mov	r0, r3
 8009dd0:	bd30      	pop	{r4, r5, pc}
 8009dd2:	42a0      	cmp	r0, r4
 8009dd4:	d3f3      	bcc.n	8009dbe <__mcmp+0x14>
 8009dd6:	e7fa      	b.n	8009dce <__mcmp+0x24>
 8009dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ddc:	e7f7      	b.n	8009dce <__mcmp+0x24>

08009dde <__mdiff>:
 8009dde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de2:	460d      	mov	r5, r1
 8009de4:	4607      	mov	r7, r0
 8009de6:	4611      	mov	r1, r2
 8009de8:	4628      	mov	r0, r5
 8009dea:	4614      	mov	r4, r2
 8009dec:	f7ff ffdd 	bl	8009daa <__mcmp>
 8009df0:	1e06      	subs	r6, r0, #0
 8009df2:	d108      	bne.n	8009e06 <__mdiff+0x28>
 8009df4:	4631      	mov	r1, r6
 8009df6:	4638      	mov	r0, r7
 8009df8:	f7ff fdce 	bl	8009998 <_Balloc>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	6103      	str	r3, [r0, #16]
 8009e00:	6146      	str	r6, [r0, #20]
 8009e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e06:	bfa4      	itt	ge
 8009e08:	4623      	movge	r3, r4
 8009e0a:	462c      	movge	r4, r5
 8009e0c:	4638      	mov	r0, r7
 8009e0e:	6861      	ldr	r1, [r4, #4]
 8009e10:	bfa6      	itte	ge
 8009e12:	461d      	movge	r5, r3
 8009e14:	2600      	movge	r6, #0
 8009e16:	2601      	movlt	r6, #1
 8009e18:	f7ff fdbe 	bl	8009998 <_Balloc>
 8009e1c:	692b      	ldr	r3, [r5, #16]
 8009e1e:	60c6      	str	r6, [r0, #12]
 8009e20:	6926      	ldr	r6, [r4, #16]
 8009e22:	f105 0914 	add.w	r9, r5, #20
 8009e26:	f104 0214 	add.w	r2, r4, #20
 8009e2a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009e2e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009e32:	f100 0514 	add.w	r5, r0, #20
 8009e36:	f04f 0c00 	mov.w	ip, #0
 8009e3a:	f852 ab04 	ldr.w	sl, [r2], #4
 8009e3e:	f859 4b04 	ldr.w	r4, [r9], #4
 8009e42:	fa1c f18a 	uxtah	r1, ip, sl
 8009e46:	b2a3      	uxth	r3, r4
 8009e48:	1ac9      	subs	r1, r1, r3
 8009e4a:	0c23      	lsrs	r3, r4, #16
 8009e4c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009e50:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009e54:	b289      	uxth	r1, r1
 8009e56:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009e5a:	45c8      	cmp	r8, r9
 8009e5c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009e60:	4696      	mov	lr, r2
 8009e62:	f845 3b04 	str.w	r3, [r5], #4
 8009e66:	d8e8      	bhi.n	8009e3a <__mdiff+0x5c>
 8009e68:	45be      	cmp	lr, r7
 8009e6a:	d305      	bcc.n	8009e78 <__mdiff+0x9a>
 8009e6c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009e70:	b18b      	cbz	r3, 8009e96 <__mdiff+0xb8>
 8009e72:	6106      	str	r6, [r0, #16]
 8009e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e78:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009e7c:	fa1c f381 	uxtah	r3, ip, r1
 8009e80:	141a      	asrs	r2, r3, #16
 8009e82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e90:	f845 3b04 	str.w	r3, [r5], #4
 8009e94:	e7e8      	b.n	8009e68 <__mdiff+0x8a>
 8009e96:	3e01      	subs	r6, #1
 8009e98:	e7e8      	b.n	8009e6c <__mdiff+0x8e>

08009e9a <__d2b>:
 8009e9a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e9e:	460e      	mov	r6, r1
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	ec59 8b10 	vmov	r8, r9, d0
 8009ea6:	4615      	mov	r5, r2
 8009ea8:	f7ff fd76 	bl	8009998 <_Balloc>
 8009eac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009eb0:	4607      	mov	r7, r0
 8009eb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009eb6:	bb34      	cbnz	r4, 8009f06 <__d2b+0x6c>
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	f1b8 0f00 	cmp.w	r8, #0
 8009ebe:	d027      	beq.n	8009f10 <__d2b+0x76>
 8009ec0:	a802      	add	r0, sp, #8
 8009ec2:	f840 8d08 	str.w	r8, [r0, #-8]!
 8009ec6:	f7ff fe0c 	bl	8009ae2 <__lo0bits>
 8009eca:	9900      	ldr	r1, [sp, #0]
 8009ecc:	b1f0      	cbz	r0, 8009f0c <__d2b+0x72>
 8009ece:	9a01      	ldr	r2, [sp, #4]
 8009ed0:	f1c0 0320 	rsb	r3, r0, #32
 8009ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed8:	430b      	orrs	r3, r1
 8009eda:	40c2      	lsrs	r2, r0
 8009edc:	617b      	str	r3, [r7, #20]
 8009ede:	9201      	str	r2, [sp, #4]
 8009ee0:	9b01      	ldr	r3, [sp, #4]
 8009ee2:	61bb      	str	r3, [r7, #24]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	bf14      	ite	ne
 8009ee8:	2102      	movne	r1, #2
 8009eea:	2101      	moveq	r1, #1
 8009eec:	6139      	str	r1, [r7, #16]
 8009eee:	b1c4      	cbz	r4, 8009f22 <__d2b+0x88>
 8009ef0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009ef4:	4404      	add	r4, r0
 8009ef6:	6034      	str	r4, [r6, #0]
 8009ef8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009efc:	6028      	str	r0, [r5, #0]
 8009efe:	4638      	mov	r0, r7
 8009f00:	b003      	add	sp, #12
 8009f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f0a:	e7d5      	b.n	8009eb8 <__d2b+0x1e>
 8009f0c:	6179      	str	r1, [r7, #20]
 8009f0e:	e7e7      	b.n	8009ee0 <__d2b+0x46>
 8009f10:	a801      	add	r0, sp, #4
 8009f12:	f7ff fde6 	bl	8009ae2 <__lo0bits>
 8009f16:	9b01      	ldr	r3, [sp, #4]
 8009f18:	617b      	str	r3, [r7, #20]
 8009f1a:	2101      	movs	r1, #1
 8009f1c:	6139      	str	r1, [r7, #16]
 8009f1e:	3020      	adds	r0, #32
 8009f20:	e7e5      	b.n	8009eee <__d2b+0x54>
 8009f22:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009f26:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f2a:	6030      	str	r0, [r6, #0]
 8009f2c:	6918      	ldr	r0, [r3, #16]
 8009f2e:	f7ff fdb9 	bl	8009aa4 <__hi0bits>
 8009f32:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009f36:	e7e1      	b.n	8009efc <__d2b+0x62>

08009f38 <_calloc_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	fb02 f401 	mul.w	r4, r2, r1
 8009f3e:	4621      	mov	r1, r4
 8009f40:	f000 f856 	bl	8009ff0 <_malloc_r>
 8009f44:	4605      	mov	r5, r0
 8009f46:	b118      	cbz	r0, 8009f50 <_calloc_r+0x18>
 8009f48:	4622      	mov	r2, r4
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	f7fd ff0d 	bl	8007d6a <memset>
 8009f50:	4628      	mov	r0, r5
 8009f52:	bd38      	pop	{r3, r4, r5, pc}

08009f54 <_free_r>:
 8009f54:	b538      	push	{r3, r4, r5, lr}
 8009f56:	4605      	mov	r5, r0
 8009f58:	2900      	cmp	r1, #0
 8009f5a:	d045      	beq.n	8009fe8 <_free_r+0x94>
 8009f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f60:	1f0c      	subs	r4, r1, #4
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	bfb8      	it	lt
 8009f66:	18e4      	addlt	r4, r4, r3
 8009f68:	f000 fac6 	bl	800a4f8 <__malloc_lock>
 8009f6c:	4a1f      	ldr	r2, [pc, #124]	; (8009fec <_free_r+0x98>)
 8009f6e:	6813      	ldr	r3, [r2, #0]
 8009f70:	4610      	mov	r0, r2
 8009f72:	b933      	cbnz	r3, 8009f82 <_free_r+0x2e>
 8009f74:	6063      	str	r3, [r4, #4]
 8009f76:	6014      	str	r4, [r2, #0]
 8009f78:	4628      	mov	r0, r5
 8009f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f7e:	f000 babc 	b.w	800a4fa <__malloc_unlock>
 8009f82:	42a3      	cmp	r3, r4
 8009f84:	d90c      	bls.n	8009fa0 <_free_r+0x4c>
 8009f86:	6821      	ldr	r1, [r4, #0]
 8009f88:	1862      	adds	r2, r4, r1
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	bf04      	itt	eq
 8009f8e:	681a      	ldreq	r2, [r3, #0]
 8009f90:	685b      	ldreq	r3, [r3, #4]
 8009f92:	6063      	str	r3, [r4, #4]
 8009f94:	bf04      	itt	eq
 8009f96:	1852      	addeq	r2, r2, r1
 8009f98:	6022      	streq	r2, [r4, #0]
 8009f9a:	6004      	str	r4, [r0, #0]
 8009f9c:	e7ec      	b.n	8009f78 <_free_r+0x24>
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	685a      	ldr	r2, [r3, #4]
 8009fa2:	b10a      	cbz	r2, 8009fa8 <_free_r+0x54>
 8009fa4:	42a2      	cmp	r2, r4
 8009fa6:	d9fa      	bls.n	8009f9e <_free_r+0x4a>
 8009fa8:	6819      	ldr	r1, [r3, #0]
 8009faa:	1858      	adds	r0, r3, r1
 8009fac:	42a0      	cmp	r0, r4
 8009fae:	d10b      	bne.n	8009fc8 <_free_r+0x74>
 8009fb0:	6820      	ldr	r0, [r4, #0]
 8009fb2:	4401      	add	r1, r0
 8009fb4:	1858      	adds	r0, r3, r1
 8009fb6:	4282      	cmp	r2, r0
 8009fb8:	6019      	str	r1, [r3, #0]
 8009fba:	d1dd      	bne.n	8009f78 <_free_r+0x24>
 8009fbc:	6810      	ldr	r0, [r2, #0]
 8009fbe:	6852      	ldr	r2, [r2, #4]
 8009fc0:	605a      	str	r2, [r3, #4]
 8009fc2:	4401      	add	r1, r0
 8009fc4:	6019      	str	r1, [r3, #0]
 8009fc6:	e7d7      	b.n	8009f78 <_free_r+0x24>
 8009fc8:	d902      	bls.n	8009fd0 <_free_r+0x7c>
 8009fca:	230c      	movs	r3, #12
 8009fcc:	602b      	str	r3, [r5, #0]
 8009fce:	e7d3      	b.n	8009f78 <_free_r+0x24>
 8009fd0:	6820      	ldr	r0, [r4, #0]
 8009fd2:	1821      	adds	r1, r4, r0
 8009fd4:	428a      	cmp	r2, r1
 8009fd6:	bf04      	itt	eq
 8009fd8:	6811      	ldreq	r1, [r2, #0]
 8009fda:	6852      	ldreq	r2, [r2, #4]
 8009fdc:	6062      	str	r2, [r4, #4]
 8009fde:	bf04      	itt	eq
 8009fe0:	1809      	addeq	r1, r1, r0
 8009fe2:	6021      	streq	r1, [r4, #0]
 8009fe4:	605c      	str	r4, [r3, #4]
 8009fe6:	e7c7      	b.n	8009f78 <_free_r+0x24>
 8009fe8:	bd38      	pop	{r3, r4, r5, pc}
 8009fea:	bf00      	nop
 8009fec:	20000758 	.word	0x20000758

08009ff0 <_malloc_r>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	1ccd      	adds	r5, r1, #3
 8009ff4:	f025 0503 	bic.w	r5, r5, #3
 8009ff8:	3508      	adds	r5, #8
 8009ffa:	2d0c      	cmp	r5, #12
 8009ffc:	bf38      	it	cc
 8009ffe:	250c      	movcc	r5, #12
 800a000:	2d00      	cmp	r5, #0
 800a002:	4606      	mov	r6, r0
 800a004:	db01      	blt.n	800a00a <_malloc_r+0x1a>
 800a006:	42a9      	cmp	r1, r5
 800a008:	d903      	bls.n	800a012 <_malloc_r+0x22>
 800a00a:	230c      	movs	r3, #12
 800a00c:	6033      	str	r3, [r6, #0]
 800a00e:	2000      	movs	r0, #0
 800a010:	bd70      	pop	{r4, r5, r6, pc}
 800a012:	f000 fa71 	bl	800a4f8 <__malloc_lock>
 800a016:	4a23      	ldr	r2, [pc, #140]	; (800a0a4 <_malloc_r+0xb4>)
 800a018:	6814      	ldr	r4, [r2, #0]
 800a01a:	4621      	mov	r1, r4
 800a01c:	b991      	cbnz	r1, 800a044 <_malloc_r+0x54>
 800a01e:	4c22      	ldr	r4, [pc, #136]	; (800a0a8 <_malloc_r+0xb8>)
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	b91b      	cbnz	r3, 800a02c <_malloc_r+0x3c>
 800a024:	4630      	mov	r0, r6
 800a026:	f000 f991 	bl	800a34c <_sbrk_r>
 800a02a:	6020      	str	r0, [r4, #0]
 800a02c:	4629      	mov	r1, r5
 800a02e:	4630      	mov	r0, r6
 800a030:	f000 f98c 	bl	800a34c <_sbrk_r>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d126      	bne.n	800a086 <_malloc_r+0x96>
 800a038:	230c      	movs	r3, #12
 800a03a:	6033      	str	r3, [r6, #0]
 800a03c:	4630      	mov	r0, r6
 800a03e:	f000 fa5c 	bl	800a4fa <__malloc_unlock>
 800a042:	e7e4      	b.n	800a00e <_malloc_r+0x1e>
 800a044:	680b      	ldr	r3, [r1, #0]
 800a046:	1b5b      	subs	r3, r3, r5
 800a048:	d41a      	bmi.n	800a080 <_malloc_r+0x90>
 800a04a:	2b0b      	cmp	r3, #11
 800a04c:	d90f      	bls.n	800a06e <_malloc_r+0x7e>
 800a04e:	600b      	str	r3, [r1, #0]
 800a050:	50cd      	str	r5, [r1, r3]
 800a052:	18cc      	adds	r4, r1, r3
 800a054:	4630      	mov	r0, r6
 800a056:	f000 fa50 	bl	800a4fa <__malloc_unlock>
 800a05a:	f104 000b 	add.w	r0, r4, #11
 800a05e:	1d23      	adds	r3, r4, #4
 800a060:	f020 0007 	bic.w	r0, r0, #7
 800a064:	1ac3      	subs	r3, r0, r3
 800a066:	d01b      	beq.n	800a0a0 <_malloc_r+0xb0>
 800a068:	425a      	negs	r2, r3
 800a06a:	50e2      	str	r2, [r4, r3]
 800a06c:	bd70      	pop	{r4, r5, r6, pc}
 800a06e:	428c      	cmp	r4, r1
 800a070:	bf0d      	iteet	eq
 800a072:	6863      	ldreq	r3, [r4, #4]
 800a074:	684b      	ldrne	r3, [r1, #4]
 800a076:	6063      	strne	r3, [r4, #4]
 800a078:	6013      	streq	r3, [r2, #0]
 800a07a:	bf18      	it	ne
 800a07c:	460c      	movne	r4, r1
 800a07e:	e7e9      	b.n	800a054 <_malloc_r+0x64>
 800a080:	460c      	mov	r4, r1
 800a082:	6849      	ldr	r1, [r1, #4]
 800a084:	e7ca      	b.n	800a01c <_malloc_r+0x2c>
 800a086:	1cc4      	adds	r4, r0, #3
 800a088:	f024 0403 	bic.w	r4, r4, #3
 800a08c:	42a0      	cmp	r0, r4
 800a08e:	d005      	beq.n	800a09c <_malloc_r+0xac>
 800a090:	1a21      	subs	r1, r4, r0
 800a092:	4630      	mov	r0, r6
 800a094:	f000 f95a 	bl	800a34c <_sbrk_r>
 800a098:	3001      	adds	r0, #1
 800a09a:	d0cd      	beq.n	800a038 <_malloc_r+0x48>
 800a09c:	6025      	str	r5, [r4, #0]
 800a09e:	e7d9      	b.n	800a054 <_malloc_r+0x64>
 800a0a0:	bd70      	pop	{r4, r5, r6, pc}
 800a0a2:	bf00      	nop
 800a0a4:	20000758 	.word	0x20000758
 800a0a8:	2000075c 	.word	0x2000075c

0800a0ac <__ssputs_r>:
 800a0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b0:	688e      	ldr	r6, [r1, #8]
 800a0b2:	429e      	cmp	r6, r3
 800a0b4:	4682      	mov	sl, r0
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	4691      	mov	r9, r2
 800a0ba:	4698      	mov	r8, r3
 800a0bc:	d835      	bhi.n	800a12a <__ssputs_r+0x7e>
 800a0be:	898a      	ldrh	r2, [r1, #12]
 800a0c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0c4:	d031      	beq.n	800a12a <__ssputs_r+0x7e>
 800a0c6:	6825      	ldr	r5, [r4, #0]
 800a0c8:	6909      	ldr	r1, [r1, #16]
 800a0ca:	1a6f      	subs	r7, r5, r1
 800a0cc:	6965      	ldr	r5, [r4, #20]
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0d4:	fb95 f5f3 	sdiv	r5, r5, r3
 800a0d8:	f108 0301 	add.w	r3, r8, #1
 800a0dc:	443b      	add	r3, r7
 800a0de:	429d      	cmp	r5, r3
 800a0e0:	bf38      	it	cc
 800a0e2:	461d      	movcc	r5, r3
 800a0e4:	0553      	lsls	r3, r2, #21
 800a0e6:	d531      	bpl.n	800a14c <__ssputs_r+0xa0>
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	f7ff ff81 	bl	8009ff0 <_malloc_r>
 800a0ee:	4606      	mov	r6, r0
 800a0f0:	b950      	cbnz	r0, 800a108 <__ssputs_r+0x5c>
 800a0f2:	230c      	movs	r3, #12
 800a0f4:	f8ca 3000 	str.w	r3, [sl]
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0fe:	81a3      	strh	r3, [r4, #12]
 800a100:	f04f 30ff 	mov.w	r0, #4294967295
 800a104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a108:	463a      	mov	r2, r7
 800a10a:	6921      	ldr	r1, [r4, #16]
 800a10c:	f7fd fe22 	bl	8007d54 <memcpy>
 800a110:	89a3      	ldrh	r3, [r4, #12]
 800a112:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a11a:	81a3      	strh	r3, [r4, #12]
 800a11c:	6126      	str	r6, [r4, #16]
 800a11e:	6165      	str	r5, [r4, #20]
 800a120:	443e      	add	r6, r7
 800a122:	1bed      	subs	r5, r5, r7
 800a124:	6026      	str	r6, [r4, #0]
 800a126:	60a5      	str	r5, [r4, #8]
 800a128:	4646      	mov	r6, r8
 800a12a:	4546      	cmp	r6, r8
 800a12c:	bf28      	it	cs
 800a12e:	4646      	movcs	r6, r8
 800a130:	4632      	mov	r2, r6
 800a132:	4649      	mov	r1, r9
 800a134:	6820      	ldr	r0, [r4, #0]
 800a136:	f000 f9c5 	bl	800a4c4 <memmove>
 800a13a:	68a3      	ldr	r3, [r4, #8]
 800a13c:	1b9b      	subs	r3, r3, r6
 800a13e:	60a3      	str	r3, [r4, #8]
 800a140:	6823      	ldr	r3, [r4, #0]
 800a142:	441e      	add	r6, r3
 800a144:	6026      	str	r6, [r4, #0]
 800a146:	2000      	movs	r0, #0
 800a148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a14c:	462a      	mov	r2, r5
 800a14e:	f000 f9d5 	bl	800a4fc <_realloc_r>
 800a152:	4606      	mov	r6, r0
 800a154:	2800      	cmp	r0, #0
 800a156:	d1e1      	bne.n	800a11c <__ssputs_r+0x70>
 800a158:	6921      	ldr	r1, [r4, #16]
 800a15a:	4650      	mov	r0, sl
 800a15c:	f7ff fefa 	bl	8009f54 <_free_r>
 800a160:	e7c7      	b.n	800a0f2 <__ssputs_r+0x46>
	...

0800a164 <_svfiprintf_r>:
 800a164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a168:	b09d      	sub	sp, #116	; 0x74
 800a16a:	4680      	mov	r8, r0
 800a16c:	9303      	str	r3, [sp, #12]
 800a16e:	898b      	ldrh	r3, [r1, #12]
 800a170:	061c      	lsls	r4, r3, #24
 800a172:	460d      	mov	r5, r1
 800a174:	4616      	mov	r6, r2
 800a176:	d50f      	bpl.n	800a198 <_svfiprintf_r+0x34>
 800a178:	690b      	ldr	r3, [r1, #16]
 800a17a:	b96b      	cbnz	r3, 800a198 <_svfiprintf_r+0x34>
 800a17c:	2140      	movs	r1, #64	; 0x40
 800a17e:	f7ff ff37 	bl	8009ff0 <_malloc_r>
 800a182:	6028      	str	r0, [r5, #0]
 800a184:	6128      	str	r0, [r5, #16]
 800a186:	b928      	cbnz	r0, 800a194 <_svfiprintf_r+0x30>
 800a188:	230c      	movs	r3, #12
 800a18a:	f8c8 3000 	str.w	r3, [r8]
 800a18e:	f04f 30ff 	mov.w	r0, #4294967295
 800a192:	e0c5      	b.n	800a320 <_svfiprintf_r+0x1bc>
 800a194:	2340      	movs	r3, #64	; 0x40
 800a196:	616b      	str	r3, [r5, #20]
 800a198:	2300      	movs	r3, #0
 800a19a:	9309      	str	r3, [sp, #36]	; 0x24
 800a19c:	2320      	movs	r3, #32
 800a19e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1a2:	2330      	movs	r3, #48	; 0x30
 800a1a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1a8:	f04f 0b01 	mov.w	fp, #1
 800a1ac:	4637      	mov	r7, r6
 800a1ae:	463c      	mov	r4, r7
 800a1b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d13c      	bne.n	800a232 <_svfiprintf_r+0xce>
 800a1b8:	ebb7 0a06 	subs.w	sl, r7, r6
 800a1bc:	d00b      	beq.n	800a1d6 <_svfiprintf_r+0x72>
 800a1be:	4653      	mov	r3, sl
 800a1c0:	4632      	mov	r2, r6
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	f7ff ff71 	bl	800a0ac <__ssputs_r>
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	f000 80a3 	beq.w	800a316 <_svfiprintf_r+0x1b2>
 800a1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d2:	4453      	add	r3, sl
 800a1d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d6:	783b      	ldrb	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f000 809c 	beq.w	800a316 <_svfiprintf_r+0x1b2>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e4:	9304      	str	r3, [sp, #16]
 800a1e6:	9307      	str	r3, [sp, #28]
 800a1e8:	9205      	str	r2, [sp, #20]
 800a1ea:	9306      	str	r3, [sp, #24]
 800a1ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1f0:	931a      	str	r3, [sp, #104]	; 0x68
 800a1f2:	2205      	movs	r2, #5
 800a1f4:	7821      	ldrb	r1, [r4, #0]
 800a1f6:	4850      	ldr	r0, [pc, #320]	; (800a338 <_svfiprintf_r+0x1d4>)
 800a1f8:	f7f5 fff2 	bl	80001e0 <memchr>
 800a1fc:	1c67      	adds	r7, r4, #1
 800a1fe:	9b04      	ldr	r3, [sp, #16]
 800a200:	b9d8      	cbnz	r0, 800a23a <_svfiprintf_r+0xd6>
 800a202:	06d9      	lsls	r1, r3, #27
 800a204:	bf44      	itt	mi
 800a206:	2220      	movmi	r2, #32
 800a208:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a20c:	071a      	lsls	r2, r3, #28
 800a20e:	bf44      	itt	mi
 800a210:	222b      	movmi	r2, #43	; 0x2b
 800a212:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a216:	7822      	ldrb	r2, [r4, #0]
 800a218:	2a2a      	cmp	r2, #42	; 0x2a
 800a21a:	d016      	beq.n	800a24a <_svfiprintf_r+0xe6>
 800a21c:	9a07      	ldr	r2, [sp, #28]
 800a21e:	2100      	movs	r1, #0
 800a220:	200a      	movs	r0, #10
 800a222:	4627      	mov	r7, r4
 800a224:	3401      	adds	r4, #1
 800a226:	783b      	ldrb	r3, [r7, #0]
 800a228:	3b30      	subs	r3, #48	; 0x30
 800a22a:	2b09      	cmp	r3, #9
 800a22c:	d951      	bls.n	800a2d2 <_svfiprintf_r+0x16e>
 800a22e:	b1c9      	cbz	r1, 800a264 <_svfiprintf_r+0x100>
 800a230:	e011      	b.n	800a256 <_svfiprintf_r+0xf2>
 800a232:	2b25      	cmp	r3, #37	; 0x25
 800a234:	d0c0      	beq.n	800a1b8 <_svfiprintf_r+0x54>
 800a236:	4627      	mov	r7, r4
 800a238:	e7b9      	b.n	800a1ae <_svfiprintf_r+0x4a>
 800a23a:	4a3f      	ldr	r2, [pc, #252]	; (800a338 <_svfiprintf_r+0x1d4>)
 800a23c:	1a80      	subs	r0, r0, r2
 800a23e:	fa0b f000 	lsl.w	r0, fp, r0
 800a242:	4318      	orrs	r0, r3
 800a244:	9004      	str	r0, [sp, #16]
 800a246:	463c      	mov	r4, r7
 800a248:	e7d3      	b.n	800a1f2 <_svfiprintf_r+0x8e>
 800a24a:	9a03      	ldr	r2, [sp, #12]
 800a24c:	1d11      	adds	r1, r2, #4
 800a24e:	6812      	ldr	r2, [r2, #0]
 800a250:	9103      	str	r1, [sp, #12]
 800a252:	2a00      	cmp	r2, #0
 800a254:	db01      	blt.n	800a25a <_svfiprintf_r+0xf6>
 800a256:	9207      	str	r2, [sp, #28]
 800a258:	e004      	b.n	800a264 <_svfiprintf_r+0x100>
 800a25a:	4252      	negs	r2, r2
 800a25c:	f043 0302 	orr.w	r3, r3, #2
 800a260:	9207      	str	r2, [sp, #28]
 800a262:	9304      	str	r3, [sp, #16]
 800a264:	783b      	ldrb	r3, [r7, #0]
 800a266:	2b2e      	cmp	r3, #46	; 0x2e
 800a268:	d10e      	bne.n	800a288 <_svfiprintf_r+0x124>
 800a26a:	787b      	ldrb	r3, [r7, #1]
 800a26c:	2b2a      	cmp	r3, #42	; 0x2a
 800a26e:	f107 0101 	add.w	r1, r7, #1
 800a272:	d132      	bne.n	800a2da <_svfiprintf_r+0x176>
 800a274:	9b03      	ldr	r3, [sp, #12]
 800a276:	1d1a      	adds	r2, r3, #4
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	9203      	str	r2, [sp, #12]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	bfb8      	it	lt
 800a280:	f04f 33ff 	movlt.w	r3, #4294967295
 800a284:	3702      	adds	r7, #2
 800a286:	9305      	str	r3, [sp, #20]
 800a288:	4c2c      	ldr	r4, [pc, #176]	; (800a33c <_svfiprintf_r+0x1d8>)
 800a28a:	7839      	ldrb	r1, [r7, #0]
 800a28c:	2203      	movs	r2, #3
 800a28e:	4620      	mov	r0, r4
 800a290:	f7f5 ffa6 	bl	80001e0 <memchr>
 800a294:	b138      	cbz	r0, 800a2a6 <_svfiprintf_r+0x142>
 800a296:	2340      	movs	r3, #64	; 0x40
 800a298:	1b00      	subs	r0, r0, r4
 800a29a:	fa03 f000 	lsl.w	r0, r3, r0
 800a29e:	9b04      	ldr	r3, [sp, #16]
 800a2a0:	4303      	orrs	r3, r0
 800a2a2:	9304      	str	r3, [sp, #16]
 800a2a4:	3701      	adds	r7, #1
 800a2a6:	7839      	ldrb	r1, [r7, #0]
 800a2a8:	4825      	ldr	r0, [pc, #148]	; (800a340 <_svfiprintf_r+0x1dc>)
 800a2aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2ae:	2206      	movs	r2, #6
 800a2b0:	1c7e      	adds	r6, r7, #1
 800a2b2:	f7f5 ff95 	bl	80001e0 <memchr>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d035      	beq.n	800a326 <_svfiprintf_r+0x1c2>
 800a2ba:	4b22      	ldr	r3, [pc, #136]	; (800a344 <_svfiprintf_r+0x1e0>)
 800a2bc:	b9fb      	cbnz	r3, 800a2fe <_svfiprintf_r+0x19a>
 800a2be:	9b03      	ldr	r3, [sp, #12]
 800a2c0:	3307      	adds	r3, #7
 800a2c2:	f023 0307 	bic.w	r3, r3, #7
 800a2c6:	3308      	adds	r3, #8
 800a2c8:	9303      	str	r3, [sp, #12]
 800a2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2cc:	444b      	add	r3, r9
 800a2ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d0:	e76c      	b.n	800a1ac <_svfiprintf_r+0x48>
 800a2d2:	fb00 3202 	mla	r2, r0, r2, r3
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	e7a3      	b.n	800a222 <_svfiprintf_r+0xbe>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	9305      	str	r3, [sp, #20]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	240a      	movs	r4, #10
 800a2e2:	460f      	mov	r7, r1
 800a2e4:	3101      	adds	r1, #1
 800a2e6:	783a      	ldrb	r2, [r7, #0]
 800a2e8:	3a30      	subs	r2, #48	; 0x30
 800a2ea:	2a09      	cmp	r2, #9
 800a2ec:	d903      	bls.n	800a2f6 <_svfiprintf_r+0x192>
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d0ca      	beq.n	800a288 <_svfiprintf_r+0x124>
 800a2f2:	9005      	str	r0, [sp, #20]
 800a2f4:	e7c8      	b.n	800a288 <_svfiprintf_r+0x124>
 800a2f6:	fb04 2000 	mla	r0, r4, r0, r2
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e7f1      	b.n	800a2e2 <_svfiprintf_r+0x17e>
 800a2fe:	ab03      	add	r3, sp, #12
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	462a      	mov	r2, r5
 800a304:	4b10      	ldr	r3, [pc, #64]	; (800a348 <_svfiprintf_r+0x1e4>)
 800a306:	a904      	add	r1, sp, #16
 800a308:	4640      	mov	r0, r8
 800a30a:	f7fd fdcd 	bl	8007ea8 <_printf_float>
 800a30e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a312:	4681      	mov	r9, r0
 800a314:	d1d9      	bne.n	800a2ca <_svfiprintf_r+0x166>
 800a316:	89ab      	ldrh	r3, [r5, #12]
 800a318:	065b      	lsls	r3, r3, #25
 800a31a:	f53f af38 	bmi.w	800a18e <_svfiprintf_r+0x2a>
 800a31e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a320:	b01d      	add	sp, #116	; 0x74
 800a322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a326:	ab03      	add	r3, sp, #12
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	462a      	mov	r2, r5
 800a32c:	4b06      	ldr	r3, [pc, #24]	; (800a348 <_svfiprintf_r+0x1e4>)
 800a32e:	a904      	add	r1, sp, #16
 800a330:	4640      	mov	r0, r8
 800a332:	f7fe f86f 	bl	8008414 <_printf_i>
 800a336:	e7ea      	b.n	800a30e <_svfiprintf_r+0x1aa>
 800a338:	0800b06c 	.word	0x0800b06c
 800a33c:	0800b072 	.word	0x0800b072
 800a340:	0800b076 	.word	0x0800b076
 800a344:	08007ea9 	.word	0x08007ea9
 800a348:	0800a0ad 	.word	0x0800a0ad

0800a34c <_sbrk_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4c06      	ldr	r4, [pc, #24]	; (800a368 <_sbrk_r+0x1c>)
 800a350:	2300      	movs	r3, #0
 800a352:	4605      	mov	r5, r0
 800a354:	4608      	mov	r0, r1
 800a356:	6023      	str	r3, [r4, #0]
 800a358:	f000 fbd6 	bl	800ab08 <_sbrk>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	d102      	bne.n	800a366 <_sbrk_r+0x1a>
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	b103      	cbz	r3, 800a366 <_sbrk_r+0x1a>
 800a364:	602b      	str	r3, [r5, #0]
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	20001068 	.word	0x20001068

0800a36c <__sread>:
 800a36c:	b510      	push	{r4, lr}
 800a36e:	460c      	mov	r4, r1
 800a370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a374:	f000 f8e8 	bl	800a548 <_read_r>
 800a378:	2800      	cmp	r0, #0
 800a37a:	bfab      	itete	ge
 800a37c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a37e:	89a3      	ldrhlt	r3, [r4, #12]
 800a380:	181b      	addge	r3, r3, r0
 800a382:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a386:	bfac      	ite	ge
 800a388:	6563      	strge	r3, [r4, #84]	; 0x54
 800a38a:	81a3      	strhlt	r3, [r4, #12]
 800a38c:	bd10      	pop	{r4, pc}

0800a38e <__swrite>:
 800a38e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a392:	461f      	mov	r7, r3
 800a394:	898b      	ldrh	r3, [r1, #12]
 800a396:	05db      	lsls	r3, r3, #23
 800a398:	4605      	mov	r5, r0
 800a39a:	460c      	mov	r4, r1
 800a39c:	4616      	mov	r6, r2
 800a39e:	d505      	bpl.n	800a3ac <__swrite+0x1e>
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a8:	f000 f868 	bl	800a47c <_lseek_r>
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3b6:	81a3      	strh	r3, [r4, #12]
 800a3b8:	4632      	mov	r2, r6
 800a3ba:	463b      	mov	r3, r7
 800a3bc:	4628      	mov	r0, r5
 800a3be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c2:	f000 b817 	b.w	800a3f4 <_write_r>

0800a3c6 <__sseek>:
 800a3c6:	b510      	push	{r4, lr}
 800a3c8:	460c      	mov	r4, r1
 800a3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ce:	f000 f855 	bl	800a47c <_lseek_r>
 800a3d2:	1c43      	adds	r3, r0, #1
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	bf15      	itete	ne
 800a3d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3e2:	81a3      	strheq	r3, [r4, #12]
 800a3e4:	bf18      	it	ne
 800a3e6:	81a3      	strhne	r3, [r4, #12]
 800a3e8:	bd10      	pop	{r4, pc}

0800a3ea <__sclose>:
 800a3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ee:	f000 b813 	b.w	800a418 <_close_r>
	...

0800a3f4 <_write_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4c07      	ldr	r4, [pc, #28]	; (800a414 <_write_r+0x20>)
 800a3f8:	4605      	mov	r5, r0
 800a3fa:	4608      	mov	r0, r1
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	2200      	movs	r2, #0
 800a400:	6022      	str	r2, [r4, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	f000 fb8e 	bl	800ab24 <_write>
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	d102      	bne.n	800a412 <_write_r+0x1e>
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	b103      	cbz	r3, 800a412 <_write_r+0x1e>
 800a410:	602b      	str	r3, [r5, #0]
 800a412:	bd38      	pop	{r3, r4, r5, pc}
 800a414:	20001068 	.word	0x20001068

0800a418 <_close_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4c06      	ldr	r4, [pc, #24]	; (800a434 <_close_r+0x1c>)
 800a41c:	2300      	movs	r3, #0
 800a41e:	4605      	mov	r5, r0
 800a420:	4608      	mov	r0, r1
 800a422:	6023      	str	r3, [r4, #0]
 800a424:	f000 fb48 	bl	800aab8 <_close>
 800a428:	1c43      	adds	r3, r0, #1
 800a42a:	d102      	bne.n	800a432 <_close_r+0x1a>
 800a42c:	6823      	ldr	r3, [r4, #0]
 800a42e:	b103      	cbz	r3, 800a432 <_close_r+0x1a>
 800a430:	602b      	str	r3, [r5, #0]
 800a432:	bd38      	pop	{r3, r4, r5, pc}
 800a434:	20001068 	.word	0x20001068

0800a438 <_fstat_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	4c07      	ldr	r4, [pc, #28]	; (800a458 <_fstat_r+0x20>)
 800a43c:	2300      	movs	r3, #0
 800a43e:	4605      	mov	r5, r0
 800a440:	4608      	mov	r0, r1
 800a442:	4611      	mov	r1, r2
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	f000 fb3f 	bl	800aac8 <_fstat>
 800a44a:	1c43      	adds	r3, r0, #1
 800a44c:	d102      	bne.n	800a454 <_fstat_r+0x1c>
 800a44e:	6823      	ldr	r3, [r4, #0]
 800a450:	b103      	cbz	r3, 800a454 <_fstat_r+0x1c>
 800a452:	602b      	str	r3, [r5, #0]
 800a454:	bd38      	pop	{r3, r4, r5, pc}
 800a456:	bf00      	nop
 800a458:	20001068 	.word	0x20001068

0800a45c <_isatty_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4c06      	ldr	r4, [pc, #24]	; (800a478 <_isatty_r+0x1c>)
 800a460:	2300      	movs	r3, #0
 800a462:	4605      	mov	r5, r0
 800a464:	4608      	mov	r0, r1
 800a466:	6023      	str	r3, [r4, #0]
 800a468:	f000 fb36 	bl	800aad8 <_isatty>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_isatty_r+0x1a>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	b103      	cbz	r3, 800a476 <_isatty_r+0x1a>
 800a474:	602b      	str	r3, [r5, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	20001068 	.word	0x20001068

0800a47c <_lseek_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4c07      	ldr	r4, [pc, #28]	; (800a49c <_lseek_r+0x20>)
 800a480:	4605      	mov	r5, r0
 800a482:	4608      	mov	r0, r1
 800a484:	4611      	mov	r1, r2
 800a486:	2200      	movs	r2, #0
 800a488:	6022      	str	r2, [r4, #0]
 800a48a:	461a      	mov	r2, r3
 800a48c:	f000 fb2c 	bl	800aae8 <_lseek>
 800a490:	1c43      	adds	r3, r0, #1
 800a492:	d102      	bne.n	800a49a <_lseek_r+0x1e>
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	b103      	cbz	r3, 800a49a <_lseek_r+0x1e>
 800a498:	602b      	str	r3, [r5, #0]
 800a49a:	bd38      	pop	{r3, r4, r5, pc}
 800a49c:	20001068 	.word	0x20001068

0800a4a0 <__ascii_mbtowc>:
 800a4a0:	b082      	sub	sp, #8
 800a4a2:	b901      	cbnz	r1, 800a4a6 <__ascii_mbtowc+0x6>
 800a4a4:	a901      	add	r1, sp, #4
 800a4a6:	b142      	cbz	r2, 800a4ba <__ascii_mbtowc+0x1a>
 800a4a8:	b14b      	cbz	r3, 800a4be <__ascii_mbtowc+0x1e>
 800a4aa:	7813      	ldrb	r3, [r2, #0]
 800a4ac:	600b      	str	r3, [r1, #0]
 800a4ae:	7812      	ldrb	r2, [r2, #0]
 800a4b0:	1c10      	adds	r0, r2, #0
 800a4b2:	bf18      	it	ne
 800a4b4:	2001      	movne	r0, #1
 800a4b6:	b002      	add	sp, #8
 800a4b8:	4770      	bx	lr
 800a4ba:	4610      	mov	r0, r2
 800a4bc:	e7fb      	b.n	800a4b6 <__ascii_mbtowc+0x16>
 800a4be:	f06f 0001 	mvn.w	r0, #1
 800a4c2:	e7f8      	b.n	800a4b6 <__ascii_mbtowc+0x16>

0800a4c4 <memmove>:
 800a4c4:	4288      	cmp	r0, r1
 800a4c6:	b510      	push	{r4, lr}
 800a4c8:	eb01 0302 	add.w	r3, r1, r2
 800a4cc:	d803      	bhi.n	800a4d6 <memmove+0x12>
 800a4ce:	1e42      	subs	r2, r0, #1
 800a4d0:	4299      	cmp	r1, r3
 800a4d2:	d10c      	bne.n	800a4ee <memmove+0x2a>
 800a4d4:	bd10      	pop	{r4, pc}
 800a4d6:	4298      	cmp	r0, r3
 800a4d8:	d2f9      	bcs.n	800a4ce <memmove+0xa>
 800a4da:	1881      	adds	r1, r0, r2
 800a4dc:	1ad2      	subs	r2, r2, r3
 800a4de:	42d3      	cmn	r3, r2
 800a4e0:	d100      	bne.n	800a4e4 <memmove+0x20>
 800a4e2:	bd10      	pop	{r4, pc}
 800a4e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a4ec:	e7f7      	b.n	800a4de <memmove+0x1a>
 800a4ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a4f6:	e7eb      	b.n	800a4d0 <memmove+0xc>

0800a4f8 <__malloc_lock>:
 800a4f8:	4770      	bx	lr

0800a4fa <__malloc_unlock>:
 800a4fa:	4770      	bx	lr

0800a4fc <_realloc_r>:
 800a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fe:	4607      	mov	r7, r0
 800a500:	4614      	mov	r4, r2
 800a502:	460e      	mov	r6, r1
 800a504:	b921      	cbnz	r1, 800a510 <_realloc_r+0x14>
 800a506:	4611      	mov	r1, r2
 800a508:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a50c:	f7ff bd70 	b.w	8009ff0 <_malloc_r>
 800a510:	b922      	cbnz	r2, 800a51c <_realloc_r+0x20>
 800a512:	f7ff fd1f 	bl	8009f54 <_free_r>
 800a516:	4625      	mov	r5, r4
 800a518:	4628      	mov	r0, r5
 800a51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a51c:	f000 f833 	bl	800a586 <_malloc_usable_size_r>
 800a520:	4284      	cmp	r4, r0
 800a522:	d90f      	bls.n	800a544 <_realloc_r+0x48>
 800a524:	4621      	mov	r1, r4
 800a526:	4638      	mov	r0, r7
 800a528:	f7ff fd62 	bl	8009ff0 <_malloc_r>
 800a52c:	4605      	mov	r5, r0
 800a52e:	2800      	cmp	r0, #0
 800a530:	d0f2      	beq.n	800a518 <_realloc_r+0x1c>
 800a532:	4631      	mov	r1, r6
 800a534:	4622      	mov	r2, r4
 800a536:	f7fd fc0d 	bl	8007d54 <memcpy>
 800a53a:	4631      	mov	r1, r6
 800a53c:	4638      	mov	r0, r7
 800a53e:	f7ff fd09 	bl	8009f54 <_free_r>
 800a542:	e7e9      	b.n	800a518 <_realloc_r+0x1c>
 800a544:	4635      	mov	r5, r6
 800a546:	e7e7      	b.n	800a518 <_realloc_r+0x1c>

0800a548 <_read_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4c07      	ldr	r4, [pc, #28]	; (800a568 <_read_r+0x20>)
 800a54c:	4605      	mov	r5, r0
 800a54e:	4608      	mov	r0, r1
 800a550:	4611      	mov	r1, r2
 800a552:	2200      	movs	r2, #0
 800a554:	6022      	str	r2, [r4, #0]
 800a556:	461a      	mov	r2, r3
 800a558:	f000 face 	bl	800aaf8 <_read>
 800a55c:	1c43      	adds	r3, r0, #1
 800a55e:	d102      	bne.n	800a566 <_read_r+0x1e>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	b103      	cbz	r3, 800a566 <_read_r+0x1e>
 800a564:	602b      	str	r3, [r5, #0]
 800a566:	bd38      	pop	{r3, r4, r5, pc}
 800a568:	20001068 	.word	0x20001068

0800a56c <__ascii_wctomb>:
 800a56c:	b149      	cbz	r1, 800a582 <__ascii_wctomb+0x16>
 800a56e:	2aff      	cmp	r2, #255	; 0xff
 800a570:	bf85      	ittet	hi
 800a572:	238a      	movhi	r3, #138	; 0x8a
 800a574:	6003      	strhi	r3, [r0, #0]
 800a576:	700a      	strbls	r2, [r1, #0]
 800a578:	f04f 30ff 	movhi.w	r0, #4294967295
 800a57c:	bf98      	it	ls
 800a57e:	2001      	movls	r0, #1
 800a580:	4770      	bx	lr
 800a582:	4608      	mov	r0, r1
 800a584:	4770      	bx	lr

0800a586 <_malloc_usable_size_r>:
 800a586:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800a58a:	2800      	cmp	r0, #0
 800a58c:	f1a0 0004 	sub.w	r0, r0, #4
 800a590:	bfbc      	itt	lt
 800a592:	580b      	ldrlt	r3, [r1, r0]
 800a594:	18c0      	addlt	r0, r0, r3
 800a596:	4770      	bx	lr

0800a598 <atan2>:
 800a598:	f000 b802 	b.w	800a5a0 <__ieee754_atan2>
 800a59c:	0000      	movs	r0, r0
	...

0800a5a0 <__ieee754_atan2>:
 800a5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5a4:	ec57 6b11 	vmov	r6, r7, d1
 800a5a8:	4273      	negs	r3, r6
 800a5aa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a5ae:	4333      	orrs	r3, r6
 800a5b0:	f8df c19c 	ldr.w	ip, [pc, #412]	; 800a750 <__ieee754_atan2+0x1b0>
 800a5b4:	ec51 0b10 	vmov	r0, r1, d0
 800a5b8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a5bc:	4563      	cmp	r3, ip
 800a5be:	ee11 8a10 	vmov	r8, s2
 800a5c2:	ee10 9a10 	vmov	r9, s0
 800a5c6:	468e      	mov	lr, r1
 800a5c8:	d807      	bhi.n	800a5da <__ieee754_atan2+0x3a>
 800a5ca:	4244      	negs	r4, r0
 800a5cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a5d0:	4304      	orrs	r4, r0
 800a5d2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a5d6:	4564      	cmp	r4, ip
 800a5d8:	d907      	bls.n	800a5ea <__ieee754_atan2+0x4a>
 800a5da:	4632      	mov	r2, r6
 800a5dc:	463b      	mov	r3, r7
 800a5de:	f7f5 fe55 	bl	800028c <__adddf3>
 800a5e2:	ec41 0b10 	vmov	d0, r0, r1
 800a5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a5ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a5f2:	4334      	orrs	r4, r6
 800a5f4:	d103      	bne.n	800a5fe <__ieee754_atan2+0x5e>
 800a5f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5fa:	f000 b8ad 	b.w	800a758 <atan>
 800a5fe:	17bc      	asrs	r4, r7, #30
 800a600:	f004 0402 	and.w	r4, r4, #2
 800a604:	ea59 0903 	orrs.w	r9, r9, r3
 800a608:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a60c:	d107      	bne.n	800a61e <__ieee754_atan2+0x7e>
 800a60e:	2c02      	cmp	r4, #2
 800a610:	d030      	beq.n	800a674 <__ieee754_atan2+0xd4>
 800a612:	2c03      	cmp	r4, #3
 800a614:	d1e5      	bne.n	800a5e2 <__ieee754_atan2+0x42>
 800a616:	a13c      	add	r1, pc, #240	; (adr r1, 800a708 <__ieee754_atan2+0x168>)
 800a618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a61c:	e7e1      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a61e:	ea58 0802 	orrs.w	r8, r8, r2
 800a622:	d106      	bne.n	800a632 <__ieee754_atan2+0x92>
 800a624:	f1be 0f00 	cmp.w	lr, #0
 800a628:	da6a      	bge.n	800a700 <__ieee754_atan2+0x160>
 800a62a:	a139      	add	r1, pc, #228	; (adr r1, 800a710 <__ieee754_atan2+0x170>)
 800a62c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a630:	e7d7      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a632:	4562      	cmp	r2, ip
 800a634:	d122      	bne.n	800a67c <__ieee754_atan2+0xdc>
 800a636:	4293      	cmp	r3, r2
 800a638:	d111      	bne.n	800a65e <__ieee754_atan2+0xbe>
 800a63a:	2c02      	cmp	r4, #2
 800a63c:	d007      	beq.n	800a64e <__ieee754_atan2+0xae>
 800a63e:	2c03      	cmp	r4, #3
 800a640:	d009      	beq.n	800a656 <__ieee754_atan2+0xb6>
 800a642:	2c01      	cmp	r4, #1
 800a644:	d156      	bne.n	800a6f4 <__ieee754_atan2+0x154>
 800a646:	a134      	add	r1, pc, #208	; (adr r1, 800a718 <__ieee754_atan2+0x178>)
 800a648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a64c:	e7c9      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a64e:	a134      	add	r1, pc, #208	; (adr r1, 800a720 <__ieee754_atan2+0x180>)
 800a650:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a654:	e7c5      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a656:	a134      	add	r1, pc, #208	; (adr r1, 800a728 <__ieee754_atan2+0x188>)
 800a658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a65c:	e7c1      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a65e:	2c02      	cmp	r4, #2
 800a660:	d008      	beq.n	800a674 <__ieee754_atan2+0xd4>
 800a662:	2c03      	cmp	r4, #3
 800a664:	d0d7      	beq.n	800a616 <__ieee754_atan2+0x76>
 800a666:	2c01      	cmp	r4, #1
 800a668:	f04f 0000 	mov.w	r0, #0
 800a66c:	d146      	bne.n	800a6fc <__ieee754_atan2+0x15c>
 800a66e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a672:	e7b6      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a674:	a12e      	add	r1, pc, #184	; (adr r1, 800a730 <__ieee754_atan2+0x190>)
 800a676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a67a:	e7b2      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a67c:	4563      	cmp	r3, ip
 800a67e:	d0d1      	beq.n	800a624 <__ieee754_atan2+0x84>
 800a680:	1a9b      	subs	r3, r3, r2
 800a682:	151b      	asrs	r3, r3, #20
 800a684:	2b3c      	cmp	r3, #60	; 0x3c
 800a686:	dc1e      	bgt.n	800a6c6 <__ieee754_atan2+0x126>
 800a688:	2f00      	cmp	r7, #0
 800a68a:	da01      	bge.n	800a690 <__ieee754_atan2+0xf0>
 800a68c:	333c      	adds	r3, #60	; 0x3c
 800a68e:	db1e      	blt.n	800a6ce <__ieee754_atan2+0x12e>
 800a690:	4632      	mov	r2, r6
 800a692:	463b      	mov	r3, r7
 800a694:	f7f6 f8d6 	bl	8000844 <__aeabi_ddiv>
 800a698:	ec41 0b10 	vmov	d0, r0, r1
 800a69c:	f000 fa04 	bl	800aaa8 <fabs>
 800a6a0:	f000 f85a 	bl	800a758 <atan>
 800a6a4:	ec51 0b10 	vmov	r0, r1, d0
 800a6a8:	2c01      	cmp	r4, #1
 800a6aa:	d013      	beq.n	800a6d4 <__ieee754_atan2+0x134>
 800a6ac:	2c02      	cmp	r4, #2
 800a6ae:	d014      	beq.n	800a6da <__ieee754_atan2+0x13a>
 800a6b0:	2c00      	cmp	r4, #0
 800a6b2:	d096      	beq.n	800a5e2 <__ieee754_atan2+0x42>
 800a6b4:	a320      	add	r3, pc, #128	; (adr r3, 800a738 <__ieee754_atan2+0x198>)
 800a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ba:	f7f5 fde5 	bl	8000288 <__aeabi_dsub>
 800a6be:	a31c      	add	r3, pc, #112	; (adr r3, 800a730 <__ieee754_atan2+0x190>)
 800a6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c4:	e013      	b.n	800a6ee <__ieee754_atan2+0x14e>
 800a6c6:	a11e      	add	r1, pc, #120	; (adr r1, 800a740 <__ieee754_atan2+0x1a0>)
 800a6c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6cc:	e7ec      	b.n	800a6a8 <__ieee754_atan2+0x108>
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	e7e9      	b.n	800a6a8 <__ieee754_atan2+0x108>
 800a6d4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a6d8:	e783      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a6da:	a317      	add	r3, pc, #92	; (adr r3, 800a738 <__ieee754_atan2+0x198>)
 800a6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e0:	f7f5 fdd2 	bl	8000288 <__aeabi_dsub>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	a111      	add	r1, pc, #68	; (adr r1, 800a730 <__ieee754_atan2+0x190>)
 800a6ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ee:	f7f5 fdcb 	bl	8000288 <__aeabi_dsub>
 800a6f2:	e776      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a6f4:	a114      	add	r1, pc, #80	; (adr r1, 800a748 <__ieee754_atan2+0x1a8>)
 800a6f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6fa:	e772      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	e770      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a700:	a10f      	add	r1, pc, #60	; (adr r1, 800a740 <__ieee754_atan2+0x1a0>)
 800a702:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a706:	e76c      	b.n	800a5e2 <__ieee754_atan2+0x42>
 800a708:	54442d18 	.word	0x54442d18
 800a70c:	c00921fb 	.word	0xc00921fb
 800a710:	54442d18 	.word	0x54442d18
 800a714:	bff921fb 	.word	0xbff921fb
 800a718:	54442d18 	.word	0x54442d18
 800a71c:	bfe921fb 	.word	0xbfe921fb
 800a720:	7f3321d2 	.word	0x7f3321d2
 800a724:	4002d97c 	.word	0x4002d97c
 800a728:	7f3321d2 	.word	0x7f3321d2
 800a72c:	c002d97c 	.word	0xc002d97c
 800a730:	54442d18 	.word	0x54442d18
 800a734:	400921fb 	.word	0x400921fb
 800a738:	33145c07 	.word	0x33145c07
 800a73c:	3ca1a626 	.word	0x3ca1a626
 800a740:	54442d18 	.word	0x54442d18
 800a744:	3ff921fb 	.word	0x3ff921fb
 800a748:	54442d18 	.word	0x54442d18
 800a74c:	3fe921fb 	.word	0x3fe921fb
 800a750:	7ff00000 	.word	0x7ff00000
 800a754:	00000000 	.word	0x00000000

0800a758 <atan>:
 800a758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	ec55 4b10 	vmov	r4, r5, d0
 800a760:	4bc7      	ldr	r3, [pc, #796]	; (800aa80 <atan+0x328>)
 800a762:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a766:	429e      	cmp	r6, r3
 800a768:	46ab      	mov	fp, r5
 800a76a:	dd18      	ble.n	800a79e <atan+0x46>
 800a76c:	4ac5      	ldr	r2, [pc, #788]	; (800aa84 <atan+0x32c>)
 800a76e:	4296      	cmp	r6, r2
 800a770:	dc01      	bgt.n	800a776 <atan+0x1e>
 800a772:	d109      	bne.n	800a788 <atan+0x30>
 800a774:	b144      	cbz	r4, 800a788 <atan+0x30>
 800a776:	4622      	mov	r2, r4
 800a778:	462b      	mov	r3, r5
 800a77a:	4620      	mov	r0, r4
 800a77c:	4629      	mov	r1, r5
 800a77e:	f7f5 fd85 	bl	800028c <__adddf3>
 800a782:	4604      	mov	r4, r0
 800a784:	460d      	mov	r5, r1
 800a786:	e006      	b.n	800a796 <atan+0x3e>
 800a788:	f1bb 0f00 	cmp.w	fp, #0
 800a78c:	f300 813a 	bgt.w	800aa04 <atan+0x2ac>
 800a790:	a59f      	add	r5, pc, #636	; (adr r5, 800aa10 <atan+0x2b8>)
 800a792:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a796:	ec45 4b10 	vmov	d0, r4, r5
 800a79a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a79e:	4bba      	ldr	r3, [pc, #744]	; (800aa88 <atan+0x330>)
 800a7a0:	429e      	cmp	r6, r3
 800a7a2:	dc14      	bgt.n	800a7ce <atan+0x76>
 800a7a4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a7a8:	429e      	cmp	r6, r3
 800a7aa:	dc0d      	bgt.n	800a7c8 <atan+0x70>
 800a7ac:	a39a      	add	r3, pc, #616	; (adr r3, 800aa18 <atan+0x2c0>)
 800a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b2:	ee10 0a10 	vmov	r0, s0
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	f7f5 fd68 	bl	800028c <__adddf3>
 800a7bc:	2200      	movs	r2, #0
 800a7be:	4bb3      	ldr	r3, [pc, #716]	; (800aa8c <atan+0x334>)
 800a7c0:	f7f6 f9a6 	bl	8000b10 <__aeabi_dcmpgt>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d1e6      	bne.n	800a796 <atan+0x3e>
 800a7c8:	f04f 3aff 	mov.w	sl, #4294967295
 800a7cc:	e02b      	b.n	800a826 <atan+0xce>
 800a7ce:	f000 f96b 	bl	800aaa8 <fabs>
 800a7d2:	4baf      	ldr	r3, [pc, #700]	; (800aa90 <atan+0x338>)
 800a7d4:	429e      	cmp	r6, r3
 800a7d6:	ec55 4b10 	vmov	r4, r5, d0
 800a7da:	f300 80bf 	bgt.w	800a95c <atan+0x204>
 800a7de:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a7e2:	429e      	cmp	r6, r3
 800a7e4:	f300 80a0 	bgt.w	800a928 <atan+0x1d0>
 800a7e8:	ee10 2a10 	vmov	r2, s0
 800a7ec:	ee10 0a10 	vmov	r0, s0
 800a7f0:	462b      	mov	r3, r5
 800a7f2:	4629      	mov	r1, r5
 800a7f4:	f7f5 fd4a 	bl	800028c <__adddf3>
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	4ba4      	ldr	r3, [pc, #656]	; (800aa8c <atan+0x334>)
 800a7fc:	f7f5 fd44 	bl	8000288 <__aeabi_dsub>
 800a800:	2200      	movs	r2, #0
 800a802:	4606      	mov	r6, r0
 800a804:	460f      	mov	r7, r1
 800a806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a80a:	4620      	mov	r0, r4
 800a80c:	4629      	mov	r1, r5
 800a80e:	f7f5 fd3d 	bl	800028c <__adddf3>
 800a812:	4602      	mov	r2, r0
 800a814:	460b      	mov	r3, r1
 800a816:	4630      	mov	r0, r6
 800a818:	4639      	mov	r1, r7
 800a81a:	f7f6 f813 	bl	8000844 <__aeabi_ddiv>
 800a81e:	f04f 0a00 	mov.w	sl, #0
 800a822:	4604      	mov	r4, r0
 800a824:	460d      	mov	r5, r1
 800a826:	4622      	mov	r2, r4
 800a828:	462b      	mov	r3, r5
 800a82a:	4620      	mov	r0, r4
 800a82c:	4629      	mov	r1, r5
 800a82e:	f7f5 fedf 	bl	80005f0 <__aeabi_dmul>
 800a832:	4602      	mov	r2, r0
 800a834:	460b      	mov	r3, r1
 800a836:	4680      	mov	r8, r0
 800a838:	4689      	mov	r9, r1
 800a83a:	f7f5 fed9 	bl	80005f0 <__aeabi_dmul>
 800a83e:	a378      	add	r3, pc, #480	; (adr r3, 800aa20 <atan+0x2c8>)
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	4606      	mov	r6, r0
 800a846:	460f      	mov	r7, r1
 800a848:	f7f5 fed2 	bl	80005f0 <__aeabi_dmul>
 800a84c:	a376      	add	r3, pc, #472	; (adr r3, 800aa28 <atan+0x2d0>)
 800a84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a852:	f7f5 fd1b 	bl	800028c <__adddf3>
 800a856:	4632      	mov	r2, r6
 800a858:	463b      	mov	r3, r7
 800a85a:	f7f5 fec9 	bl	80005f0 <__aeabi_dmul>
 800a85e:	a374      	add	r3, pc, #464	; (adr r3, 800aa30 <atan+0x2d8>)
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	f7f5 fd12 	bl	800028c <__adddf3>
 800a868:	4632      	mov	r2, r6
 800a86a:	463b      	mov	r3, r7
 800a86c:	f7f5 fec0 	bl	80005f0 <__aeabi_dmul>
 800a870:	a371      	add	r3, pc, #452	; (adr r3, 800aa38 <atan+0x2e0>)
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	f7f5 fd09 	bl	800028c <__adddf3>
 800a87a:	4632      	mov	r2, r6
 800a87c:	463b      	mov	r3, r7
 800a87e:	f7f5 feb7 	bl	80005f0 <__aeabi_dmul>
 800a882:	a36f      	add	r3, pc, #444	; (adr r3, 800aa40 <atan+0x2e8>)
 800a884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a888:	f7f5 fd00 	bl	800028c <__adddf3>
 800a88c:	4632      	mov	r2, r6
 800a88e:	463b      	mov	r3, r7
 800a890:	f7f5 feae 	bl	80005f0 <__aeabi_dmul>
 800a894:	a36c      	add	r3, pc, #432	; (adr r3, 800aa48 <atan+0x2f0>)
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	f7f5 fcf7 	bl	800028c <__adddf3>
 800a89e:	4642      	mov	r2, r8
 800a8a0:	464b      	mov	r3, r9
 800a8a2:	f7f5 fea5 	bl	80005f0 <__aeabi_dmul>
 800a8a6:	a36a      	add	r3, pc, #424	; (adr r3, 800aa50 <atan+0x2f8>)
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	4680      	mov	r8, r0
 800a8ae:	4689      	mov	r9, r1
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	4639      	mov	r1, r7
 800a8b4:	f7f5 fe9c 	bl	80005f0 <__aeabi_dmul>
 800a8b8:	a367      	add	r3, pc, #412	; (adr r3, 800aa58 <atan+0x300>)
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f7f5 fce3 	bl	8000288 <__aeabi_dsub>
 800a8c2:	4632      	mov	r2, r6
 800a8c4:	463b      	mov	r3, r7
 800a8c6:	f7f5 fe93 	bl	80005f0 <__aeabi_dmul>
 800a8ca:	a365      	add	r3, pc, #404	; (adr r3, 800aa60 <atan+0x308>)
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	f7f5 fcda 	bl	8000288 <__aeabi_dsub>
 800a8d4:	4632      	mov	r2, r6
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	f7f5 fe8a 	bl	80005f0 <__aeabi_dmul>
 800a8dc:	a362      	add	r3, pc, #392	; (adr r3, 800aa68 <atan+0x310>)
 800a8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e2:	f7f5 fcd1 	bl	8000288 <__aeabi_dsub>
 800a8e6:	4632      	mov	r2, r6
 800a8e8:	463b      	mov	r3, r7
 800a8ea:	f7f5 fe81 	bl	80005f0 <__aeabi_dmul>
 800a8ee:	a360      	add	r3, pc, #384	; (adr r3, 800aa70 <atan+0x318>)
 800a8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f4:	f7f5 fcc8 	bl	8000288 <__aeabi_dsub>
 800a8f8:	4632      	mov	r2, r6
 800a8fa:	463b      	mov	r3, r7
 800a8fc:	f7f5 fe78 	bl	80005f0 <__aeabi_dmul>
 800a900:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a904:	4602      	mov	r2, r0
 800a906:	460b      	mov	r3, r1
 800a908:	d155      	bne.n	800a9b6 <atan+0x25e>
 800a90a:	4640      	mov	r0, r8
 800a90c:	4649      	mov	r1, r9
 800a90e:	f7f5 fcbd 	bl	800028c <__adddf3>
 800a912:	4622      	mov	r2, r4
 800a914:	462b      	mov	r3, r5
 800a916:	f7f5 fe6b 	bl	80005f0 <__aeabi_dmul>
 800a91a:	4602      	mov	r2, r0
 800a91c:	460b      	mov	r3, r1
 800a91e:	4620      	mov	r0, r4
 800a920:	4629      	mov	r1, r5
 800a922:	f7f5 fcb1 	bl	8000288 <__aeabi_dsub>
 800a926:	e72c      	b.n	800a782 <atan+0x2a>
 800a928:	ee10 0a10 	vmov	r0, s0
 800a92c:	2200      	movs	r2, #0
 800a92e:	4b57      	ldr	r3, [pc, #348]	; (800aa8c <atan+0x334>)
 800a930:	4629      	mov	r1, r5
 800a932:	f7f5 fca9 	bl	8000288 <__aeabi_dsub>
 800a936:	2200      	movs	r2, #0
 800a938:	4606      	mov	r6, r0
 800a93a:	460f      	mov	r7, r1
 800a93c:	4b53      	ldr	r3, [pc, #332]	; (800aa8c <atan+0x334>)
 800a93e:	4620      	mov	r0, r4
 800a940:	4629      	mov	r1, r5
 800a942:	f7f5 fca3 	bl	800028c <__adddf3>
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	4630      	mov	r0, r6
 800a94c:	4639      	mov	r1, r7
 800a94e:	f7f5 ff79 	bl	8000844 <__aeabi_ddiv>
 800a952:	f04f 0a01 	mov.w	sl, #1
 800a956:	4604      	mov	r4, r0
 800a958:	460d      	mov	r5, r1
 800a95a:	e764      	b.n	800a826 <atan+0xce>
 800a95c:	4b4d      	ldr	r3, [pc, #308]	; (800aa94 <atan+0x33c>)
 800a95e:	429e      	cmp	r6, r3
 800a960:	dc1d      	bgt.n	800a99e <atan+0x246>
 800a962:	ee10 0a10 	vmov	r0, s0
 800a966:	2200      	movs	r2, #0
 800a968:	4b4b      	ldr	r3, [pc, #300]	; (800aa98 <atan+0x340>)
 800a96a:	4629      	mov	r1, r5
 800a96c:	f7f5 fc8c 	bl	8000288 <__aeabi_dsub>
 800a970:	2200      	movs	r2, #0
 800a972:	4606      	mov	r6, r0
 800a974:	460f      	mov	r7, r1
 800a976:	4b48      	ldr	r3, [pc, #288]	; (800aa98 <atan+0x340>)
 800a978:	4620      	mov	r0, r4
 800a97a:	4629      	mov	r1, r5
 800a97c:	f7f5 fe38 	bl	80005f0 <__aeabi_dmul>
 800a980:	2200      	movs	r2, #0
 800a982:	4b42      	ldr	r3, [pc, #264]	; (800aa8c <atan+0x334>)
 800a984:	f7f5 fc82 	bl	800028c <__adddf3>
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	4630      	mov	r0, r6
 800a98e:	4639      	mov	r1, r7
 800a990:	f7f5 ff58 	bl	8000844 <__aeabi_ddiv>
 800a994:	f04f 0a02 	mov.w	sl, #2
 800a998:	4604      	mov	r4, r0
 800a99a:	460d      	mov	r5, r1
 800a99c:	e743      	b.n	800a826 <atan+0xce>
 800a99e:	462b      	mov	r3, r5
 800a9a0:	ee10 2a10 	vmov	r2, s0
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	493d      	ldr	r1, [pc, #244]	; (800aa9c <atan+0x344>)
 800a9a8:	f7f5 ff4c 	bl	8000844 <__aeabi_ddiv>
 800a9ac:	f04f 0a03 	mov.w	sl, #3
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	460d      	mov	r5, r1
 800a9b4:	e737      	b.n	800a826 <atan+0xce>
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	4649      	mov	r1, r9
 800a9ba:	f7f5 fc67 	bl	800028c <__adddf3>
 800a9be:	4622      	mov	r2, r4
 800a9c0:	462b      	mov	r3, r5
 800a9c2:	f7f5 fe15 	bl	80005f0 <__aeabi_dmul>
 800a9c6:	4e36      	ldr	r6, [pc, #216]	; (800aaa0 <atan+0x348>)
 800a9c8:	4b36      	ldr	r3, [pc, #216]	; (800aaa4 <atan+0x34c>)
 800a9ca:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800a9ce:	4456      	add	r6, sl
 800a9d0:	449a      	add	sl, r3
 800a9d2:	e9da 2300 	ldrd	r2, r3, [sl]
 800a9d6:	f7f5 fc57 	bl	8000288 <__aeabi_dsub>
 800a9da:	4622      	mov	r2, r4
 800a9dc:	462b      	mov	r3, r5
 800a9de:	f7f5 fc53 	bl	8000288 <__aeabi_dsub>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a9ea:	f7f5 fc4d 	bl	8000288 <__aeabi_dsub>
 800a9ee:	f1bb 0f00 	cmp.w	fp, #0
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	460d      	mov	r5, r1
 800a9f6:	f6bf aece 	bge.w	800a796 <atan+0x3e>
 800a9fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9fe:	4604      	mov	r4, r0
 800aa00:	461d      	mov	r5, r3
 800aa02:	e6c8      	b.n	800a796 <atan+0x3e>
 800aa04:	a51c      	add	r5, pc, #112	; (adr r5, 800aa78 <atan+0x320>)
 800aa06:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aa0a:	e6c4      	b.n	800a796 <atan+0x3e>
 800aa0c:	f3af 8000 	nop.w
 800aa10:	54442d18 	.word	0x54442d18
 800aa14:	bff921fb 	.word	0xbff921fb
 800aa18:	8800759c 	.word	0x8800759c
 800aa1c:	7e37e43c 	.word	0x7e37e43c
 800aa20:	e322da11 	.word	0xe322da11
 800aa24:	3f90ad3a 	.word	0x3f90ad3a
 800aa28:	24760deb 	.word	0x24760deb
 800aa2c:	3fa97b4b 	.word	0x3fa97b4b
 800aa30:	a0d03d51 	.word	0xa0d03d51
 800aa34:	3fb10d66 	.word	0x3fb10d66
 800aa38:	c54c206e 	.word	0xc54c206e
 800aa3c:	3fb745cd 	.word	0x3fb745cd
 800aa40:	920083ff 	.word	0x920083ff
 800aa44:	3fc24924 	.word	0x3fc24924
 800aa48:	5555550d 	.word	0x5555550d
 800aa4c:	3fd55555 	.word	0x3fd55555
 800aa50:	2c6a6c2f 	.word	0x2c6a6c2f
 800aa54:	bfa2b444 	.word	0xbfa2b444
 800aa58:	52defd9a 	.word	0x52defd9a
 800aa5c:	3fadde2d 	.word	0x3fadde2d
 800aa60:	af749a6d 	.word	0xaf749a6d
 800aa64:	3fb3b0f2 	.word	0x3fb3b0f2
 800aa68:	fe231671 	.word	0xfe231671
 800aa6c:	3fbc71c6 	.word	0x3fbc71c6
 800aa70:	9998ebc4 	.word	0x9998ebc4
 800aa74:	3fc99999 	.word	0x3fc99999
 800aa78:	54442d18 	.word	0x54442d18
 800aa7c:	3ff921fb 	.word	0x3ff921fb
 800aa80:	440fffff 	.word	0x440fffff
 800aa84:	7ff00000 	.word	0x7ff00000
 800aa88:	3fdbffff 	.word	0x3fdbffff
 800aa8c:	3ff00000 	.word	0x3ff00000
 800aa90:	3ff2ffff 	.word	0x3ff2ffff
 800aa94:	40037fff 	.word	0x40037fff
 800aa98:	3ff80000 	.word	0x3ff80000
 800aa9c:	bff00000 	.word	0xbff00000
 800aaa0:	0800b188 	.word	0x0800b188
 800aaa4:	0800b1a8 	.word	0x0800b1a8

0800aaa8 <fabs>:
 800aaa8:	ec53 2b10 	vmov	r2, r3, d0
 800aaac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aab0:	ec43 2b10 	vmov	d0, r2, r3
 800aab4:	4770      	bx	lr
	...

0800aab8 <_close>:
 800aab8:	4b02      	ldr	r3, [pc, #8]	; (800aac4 <_close+0xc>)
 800aaba:	2258      	movs	r2, #88	; 0x58
 800aabc:	601a      	str	r2, [r3, #0]
 800aabe:	f04f 30ff 	mov.w	r0, #4294967295
 800aac2:	4770      	bx	lr
 800aac4:	20001068 	.word	0x20001068

0800aac8 <_fstat>:
 800aac8:	4b02      	ldr	r3, [pc, #8]	; (800aad4 <_fstat+0xc>)
 800aaca:	2258      	movs	r2, #88	; 0x58
 800aacc:	601a      	str	r2, [r3, #0]
 800aace:	f04f 30ff 	mov.w	r0, #4294967295
 800aad2:	4770      	bx	lr
 800aad4:	20001068 	.word	0x20001068

0800aad8 <_isatty>:
 800aad8:	4b02      	ldr	r3, [pc, #8]	; (800aae4 <_isatty+0xc>)
 800aada:	2258      	movs	r2, #88	; 0x58
 800aadc:	601a      	str	r2, [r3, #0]
 800aade:	2000      	movs	r0, #0
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	20001068 	.word	0x20001068

0800aae8 <_lseek>:
 800aae8:	4b02      	ldr	r3, [pc, #8]	; (800aaf4 <_lseek+0xc>)
 800aaea:	2258      	movs	r2, #88	; 0x58
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf2:	4770      	bx	lr
 800aaf4:	20001068 	.word	0x20001068

0800aaf8 <_read>:
 800aaf8:	4b02      	ldr	r3, [pc, #8]	; (800ab04 <_read+0xc>)
 800aafa:	2258      	movs	r2, #88	; 0x58
 800aafc:	601a      	str	r2, [r3, #0]
 800aafe:	f04f 30ff 	mov.w	r0, #4294967295
 800ab02:	4770      	bx	lr
 800ab04:	20001068 	.word	0x20001068

0800ab08 <_sbrk>:
 800ab08:	4b04      	ldr	r3, [pc, #16]	; (800ab1c <_sbrk+0x14>)
 800ab0a:	6819      	ldr	r1, [r3, #0]
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	b909      	cbnz	r1, 800ab14 <_sbrk+0xc>
 800ab10:	4903      	ldr	r1, [pc, #12]	; (800ab20 <_sbrk+0x18>)
 800ab12:	6019      	str	r1, [r3, #0]
 800ab14:	6818      	ldr	r0, [r3, #0]
 800ab16:	4402      	add	r2, r0
 800ab18:	601a      	str	r2, [r3, #0]
 800ab1a:	4770      	bx	lr
 800ab1c:	20000760 	.word	0x20000760
 800ab20:	2000106c 	.word	0x2000106c

0800ab24 <_write>:
 800ab24:	4b02      	ldr	r3, [pc, #8]	; (800ab30 <_write+0xc>)
 800ab26:	2258      	movs	r2, #88	; 0x58
 800ab28:	601a      	str	r2, [r3, #0]
 800ab2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2e:	4770      	bx	lr
 800ab30:	20001068 	.word	0x20001068

0800ab34 <_init>:
 800ab34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab36:	bf00      	nop
 800ab38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab3a:	bc08      	pop	{r3}
 800ab3c:	469e      	mov	lr, r3
 800ab3e:	4770      	bx	lr

0800ab40 <_fini>:
 800ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab42:	bf00      	nop
 800ab44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab46:	bc08      	pop	{r3}
 800ab48:	469e      	mov	lr, r3
 800ab4a:	4770      	bx	lr
